// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: chart_api.proto
// Protobuf C++ Version: 5.29.1

#ifndef chart_5fapi_2eproto_2epb_2eh
#define chart_5fapi_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/map.h"  // IWYU pragma: export
#include "google/protobuf/map_entry.h"
#include "google/protobuf/map_field_inl.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_chart_5fapi_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_chart_5fapi_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_chart_5fapi_2eproto;
namespace chart_api {
class DataPoint;
struct DataPointDefaultTypeInternal;
extern DataPointDefaultTypeInternal _DataPoint_default_instance_;
class ExchangeData;
struct ExchangeDataDefaultTypeInternal;
extern ExchangeDataDefaultTypeInternal _ExchangeData_default_instance_;
class ExchangeData_ExchangesEntry_DoNotUse;
struct ExchangeData_ExchangesEntry_DoNotUseDefaultTypeInternal;
extern ExchangeData_ExchangesEntry_DoNotUseDefaultTypeInternal _ExchangeData_ExchangesEntry_DoNotUse_default_instance_;
class GetAlgosRequest;
struct GetAlgosRequestDefaultTypeInternal;
extern GetAlgosRequestDefaultTypeInternal _GetAlgosRequest_default_instance_;
class GetAlgosResponse;
struct GetAlgosResponseDefaultTypeInternal;
extern GetAlgosResponseDefaultTypeInternal _GetAlgosResponse_default_instance_;
class GetDataRequest;
struct GetDataRequestDefaultTypeInternal;
extern GetDataRequestDefaultTypeInternal _GetDataRequest_default_instance_;
class GetDataResponse;
struct GetDataResponseDefaultTypeInternal;
extern GetDataResponseDefaultTypeInternal _GetDataResponse_default_instance_;
class GetLogsRequest;
struct GetLogsRequestDefaultTypeInternal;
extern GetLogsRequestDefaultTypeInternal _GetLogsRequest_default_instance_;
class GetLogsResponse;
struct GetLogsResponseDefaultTypeInternal;
extern GetLogsResponseDefaultTypeInternal _GetLogsResponse_default_instance_;
class GetStreamsByAlgoRequest;
struct GetStreamsByAlgoRequestDefaultTypeInternal;
extern GetStreamsByAlgoRequestDefaultTypeInternal _GetStreamsByAlgoRequest_default_instance_;
class GetStreamsByAlgoResponse;
struct GetStreamsByAlgoResponseDefaultTypeInternal;
extern GetStreamsByAlgoResponseDefaultTypeInternal _GetStreamsByAlgoResponse_default_instance_;
class GetUsersRequest;
struct GetUsersRequestDefaultTypeInternal;
extern GetUsersRequestDefaultTypeInternal _GetUsersRequest_default_instance_;
class GetUsersResponse;
struct GetUsersResponseDefaultTypeInternal;
extern GetUsersResponseDefaultTypeInternal _GetUsersResponse_default_instance_;
class GetUsersResponse_UsersEntry_DoNotUse;
struct GetUsersResponse_UsersEntry_DoNotUseDefaultTypeInternal;
extern GetUsersResponse_UsersEntry_DoNotUseDefaultTypeInternal _GetUsersResponse_UsersEntry_DoNotUse_default_instance_;
class Indicator;
struct IndicatorDefaultTypeInternal;
extern IndicatorDefaultTypeInternal _Indicator_default_instance_;
class IndicatorParam;
struct IndicatorParamDefaultTypeInternal;
extern IndicatorParamDefaultTypeInternal _IndicatorParam_default_instance_;
class IndicatorParam_ParamEntry_DoNotUse;
struct IndicatorParam_ParamEntry_DoNotUseDefaultTypeInternal;
extern IndicatorParam_ParamEntry_DoNotUseDefaultTypeInternal _IndicatorParam_ParamEntry_DoNotUse_default_instance_;
class Indicator_ParamEntry_DoNotUse;
struct Indicator_ParamEntry_DoNotUseDefaultTypeInternal;
extern Indicator_ParamEntry_DoNotUseDefaultTypeInternal _Indicator_ParamEntry_DoNotUse_default_instance_;
class LogEntry;
struct LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class MarketData;
struct MarketDataDefaultTypeInternal;
extern MarketDataDefaultTypeInternal _MarketData_default_instance_;
class MarketData_MarketsEntry_DoNotUse;
struct MarketData_MarketsEntry_DoNotUseDefaultTypeInternal;
extern MarketData_MarketsEntry_DoNotUseDefaultTypeInternal _MarketData_MarketsEntry_DoNotUse_default_instance_;
class ModeData;
struct ModeDataDefaultTypeInternal;
extern ModeDataDefaultTypeInternal _ModeData_default_instance_;
class StreamData;
struct StreamDataDefaultTypeInternal;
extern StreamDataDefaultTypeInternal _StreamData_default_instance_;
class Volume;
struct VolumeDefaultTypeInternal;
extern VolumeDefaultTypeInternal _Volume_default_instance_;
class Volume_ParamsEntry_DoNotUse;
struct Volume_ParamsEntry_DoNotUseDefaultTypeInternal;
extern Volume_ParamsEntry_DoNotUseDefaultTypeInternal _Volume_ParamsEntry_DoNotUse_default_instance_;
}  // namespace chart_api
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace chart_api {

// ===================================================================


// -------------------------------------------------------------------

class Volume_ParamsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Volume_ParamsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Volume_ParamsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Volume_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Volume_ParamsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Volume_ParamsEntry_DoNotUse*>(
        &_Volume_ParamsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_chart_5fapi_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class ModeData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.ModeData) */ {
 public:
  inline ModeData() : ModeData(nullptr) {}
  ~ModeData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ModeData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ModeData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ModeData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ModeData(const ModeData& from) : ModeData(nullptr, from) {}
  inline ModeData(ModeData&& from) noexcept
      : ModeData(nullptr, std::move(from)) {}
  inline ModeData& operator=(const ModeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModeData& operator=(ModeData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModeData* internal_default_instance() {
    return reinterpret_cast<const ModeData*>(
        &_ModeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(ModeData& a, ModeData& b) { a.Swap(&b); }
  inline void Swap(ModeData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModeData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModeData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ModeData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ModeData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ModeData& from) { ModeData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ModeData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.ModeData"; }

 protected:
  explicit ModeData(::google::protobuf::Arena* arena);
  ModeData(::google::protobuf::Arena* arena, const ModeData& from);
  ModeData(::google::protobuf::Arena* arena, ModeData&& from) noexcept
      : ModeData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampsFieldNumber = 1,
  };
  // repeated string timestamps = 1;
  int timestamps_size() const;
  private:
  int _internal_timestamps_size() const;

  public:
  void clear_timestamps() ;
  const std::string& timestamps(int index) const;
  std::string* mutable_timestamps(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamps(int index, Arg_&& value, Args_... args);
  std::string* add_timestamps();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_timestamps(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& timestamps() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_timestamps();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_timestamps() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_timestamps();

  public:
  // @@protoc_insertion_point(class_scope:chart_api.ModeData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      37, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ModeData& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> timestamps_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class LogEntry final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.LogEntry) */ {
 public:
  inline LogEntry() : LogEntry(nullptr) {}
  ~LogEntry() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LogEntry* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LogEntry));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LogEntry(
      ::google::protobuf::internal::ConstantInitialized);

  inline LogEntry(const LogEntry& from) : LogEntry(nullptr, from) {}
  inline LogEntry(LogEntry&& from) noexcept
      : LogEntry(nullptr, std::move(from)) {}
  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
        &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(LogEntry& a, LogEntry& b) { a.Swap(&b); }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogEntry* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogEntry* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LogEntry>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LogEntry& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LogEntry& from) { LogEntry::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LogEntry* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.LogEntry"; }

 protected:
  explicit LogEntry(::google::protobuf::Arena* arena);
  LogEntry(::google::protobuf::Arena* arena, const LogEntry& from);
  LogEntry(::google::protobuf::Arena* arena, LogEntry&& from) noexcept
      : LogEntry(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimeFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kAlgoFieldNumber = 6,
    kTimeframeFieldNumber = 8,
    kBlockNameFieldNumber = 11,
    kIndicatorParamFieldNumber = 12,
    kVarsFieldNumber = 13,
    kSideFieldNumber = 18,
    kOrderTypeLongFieldNumber = 24,
    kOrderTypeShortFieldNumber = 37,
    kUserFieldNumber = 45,
    kModeFieldNumber = 46,
    kModeTimeFieldNumber = 47,
    kCoinFieldNumber = 48,
    kCoinSecondFieldNumber = 49,
    kCloseFieldNumber = 14,
    kBalanceFieldNumber = 15,
    kEquityFieldNumber = 16,
    kMoneyFieldNumber = 17,
    kOrderLeverageLongFieldNumber = 19,
    kLeverageLongFieldNumber = 20,
    kOrderSizeLongFieldNumber = 21,
    kOrderPriceLongFieldNumber = 22,
    kOrderUsdLongFieldNumber = 23,
    kPositionSizeLongFieldNumber = 25,
    kPositionPriceLongFieldNumber = 26,
    kPositionUsdLongFieldNumber = 27,
    kPnlUsdLongFieldNumber = 28,
    kFeeUsdLongFieldNumber = 29,
    kFundingLongFieldNumber = 30,
    kRplUsdLongFieldNumber = 31,
    kOrderLeverageShortFieldNumber = 32,
    kLeverageShortFieldNumber = 33,
    kOrderSizeShortFieldNumber = 34,
    kOrderPriceShortFieldNumber = 35,
    kOrderUsdShortFieldNumber = 36,
    kPositionUsdShortFieldNumber = 38,
    kPositionSizeShortFieldNumber = 39,
    kPositionPriceShortFieldNumber = 40,
    kPnlUsdShortFieldNumber = 41,
    kFeeUsdShortFieldNumber = 42,
    kFundingShortFieldNumber = 43,
    kRplUsdShortFieldNumber = 44,
    kBlockIdFieldNumber = 10,
  };
  // string time = 2;
  void clear_time() ;
  const std::string& time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time(Arg_&& arg, Args_... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* value);

  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(
      const std::string& value);
  std::string* _internal_mutable_time();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // string algo = 6;
  void clear_algo() ;
  const std::string& algo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_algo(Arg_&& arg, Args_... args);
  std::string* mutable_algo();
  PROTOBUF_NODISCARD std::string* release_algo();
  void set_allocated_algo(std::string* value);

  private:
  const std::string& _internal_algo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algo(
      const std::string& value);
  std::string* _internal_mutable_algo();

  public:
  // string timeframe = 8;
  void clear_timeframe() ;
  const std::string& timeframe() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeframe(Arg_&& arg, Args_... args);
  std::string* mutable_timeframe();
  PROTOBUF_NODISCARD std::string* release_timeframe();
  void set_allocated_timeframe(std::string* value);

  private:
  const std::string& _internal_timeframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeframe(
      const std::string& value);
  std::string* _internal_mutable_timeframe();

  public:
  // string block_name = 11;
  void clear_block_name() ;
  const std::string& block_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_block_name(Arg_&& arg, Args_... args);
  std::string* mutable_block_name();
  PROTOBUF_NODISCARD std::string* release_block_name();
  void set_allocated_block_name(std::string* value);

  private:
  const std::string& _internal_block_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_block_name(
      const std::string& value);
  std::string* _internal_mutable_block_name();

  public:
  // string indicator_param = 12;
  void clear_indicator_param() ;
  const std::string& indicator_param() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_indicator_param(Arg_&& arg, Args_... args);
  std::string* mutable_indicator_param();
  PROTOBUF_NODISCARD std::string* release_indicator_param();
  void set_allocated_indicator_param(std::string* value);

  private:
  const std::string& _internal_indicator_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_indicator_param(
      const std::string& value);
  std::string* _internal_mutable_indicator_param();

  public:
  // string vars = 13;
  void clear_vars() ;
  const std::string& vars() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vars(Arg_&& arg, Args_... args);
  std::string* mutable_vars();
  PROTOBUF_NODISCARD std::string* release_vars();
  void set_allocated_vars(std::string* value);

  private:
  const std::string& _internal_vars() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vars(
      const std::string& value);
  std::string* _internal_mutable_vars();

  public:
  // string side = 18;
  void clear_side() ;
  const std::string& side() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_side(Arg_&& arg, Args_... args);
  std::string* mutable_side();
  PROTOBUF_NODISCARD std::string* release_side();
  void set_allocated_side(std::string* value);

  private:
  const std::string& _internal_side() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_side(
      const std::string& value);
  std::string* _internal_mutable_side();

  public:
  // string order_type_long = 24;
  void clear_order_type_long() ;
  const std::string& order_type_long() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_order_type_long(Arg_&& arg, Args_... args);
  std::string* mutable_order_type_long();
  PROTOBUF_NODISCARD std::string* release_order_type_long();
  void set_allocated_order_type_long(std::string* value);

  private:
  const std::string& _internal_order_type_long() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_type_long(
      const std::string& value);
  std::string* _internal_mutable_order_type_long();

  public:
  // string order_type_short = 37;
  void clear_order_type_short() ;
  const std::string& order_type_short() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_order_type_short(Arg_&& arg, Args_... args);
  std::string* mutable_order_type_short();
  PROTOBUF_NODISCARD std::string* release_order_type_short();
  void set_allocated_order_type_short(std::string* value);

  private:
  const std::string& _internal_order_type_short() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_type_short(
      const std::string& value);
  std::string* _internal_mutable_order_type_short();

  public:
  // string user = 45;
  void clear_user() ;
  const std::string& user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* value);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // string mode = 46;
  void clear_mode() ;
  const std::string& mode() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mode(Arg_&& arg, Args_... args);
  std::string* mutable_mode();
  PROTOBUF_NODISCARD std::string* release_mode();
  void set_allocated_mode(std::string* value);

  private:
  const std::string& _internal_mode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode(
      const std::string& value);
  std::string* _internal_mutable_mode();

  public:
  // string mode_time = 47;
  void clear_mode_time() ;
  const std::string& mode_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mode_time(Arg_&& arg, Args_... args);
  std::string* mutable_mode_time();
  PROTOBUF_NODISCARD std::string* release_mode_time();
  void set_allocated_mode_time(std::string* value);

  private:
  const std::string& _internal_mode_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode_time(
      const std::string& value);
  std::string* _internal_mutable_mode_time();

  public:
  // string coin = 48;
  void clear_coin() ;
  const std::string& coin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_coin(Arg_&& arg, Args_... args);
  std::string* mutable_coin();
  PROTOBUF_NODISCARD std::string* release_coin();
  void set_allocated_coin(std::string* value);

  private:
  const std::string& _internal_coin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin(
      const std::string& value);
  std::string* _internal_mutable_coin();

  public:
  // string coin_second = 49;
  void clear_coin_second() ;
  const std::string& coin_second() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_coin_second(Arg_&& arg, Args_... args);
  std::string* mutable_coin_second();
  PROTOBUF_NODISCARD std::string* release_coin_second();
  void set_allocated_coin_second(std::string* value);

  private:
  const std::string& _internal_coin_second() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_second(
      const std::string& value);
  std::string* _internal_mutable_coin_second();

  public:
  // double close = 14;
  void clear_close() ;
  double close() const;
  void set_close(double value);

  private:
  double _internal_close() const;
  void _internal_set_close(double value);

  public:
  // double balance = 15;
  void clear_balance() ;
  double balance() const;
  void set_balance(double value);

  private:
  double _internal_balance() const;
  void _internal_set_balance(double value);

  public:
  // double equity = 16;
  void clear_equity() ;
  double equity() const;
  void set_equity(double value);

  private:
  double _internal_equity() const;
  void _internal_set_equity(double value);

  public:
  // double money = 17;
  void clear_money() ;
  double money() const;
  void set_money(double value);

  private:
  double _internal_money() const;
  void _internal_set_money(double value);

  public:
  // double order_leverage_long = 19;
  void clear_order_leverage_long() ;
  double order_leverage_long() const;
  void set_order_leverage_long(double value);

  private:
  double _internal_order_leverage_long() const;
  void _internal_set_order_leverage_long(double value);

  public:
  // double leverage_long = 20;
  void clear_leverage_long() ;
  double leverage_long() const;
  void set_leverage_long(double value);

  private:
  double _internal_leverage_long() const;
  void _internal_set_leverage_long(double value);

  public:
  // double order_size_long = 21;
  void clear_order_size_long() ;
  double order_size_long() const;
  void set_order_size_long(double value);

  private:
  double _internal_order_size_long() const;
  void _internal_set_order_size_long(double value);

  public:
  // double order_price_long = 22;
  void clear_order_price_long() ;
  double order_price_long() const;
  void set_order_price_long(double value);

  private:
  double _internal_order_price_long() const;
  void _internal_set_order_price_long(double value);

  public:
  // double order_usd_long = 23;
  void clear_order_usd_long() ;
  double order_usd_long() const;
  void set_order_usd_long(double value);

  private:
  double _internal_order_usd_long() const;
  void _internal_set_order_usd_long(double value);

  public:
  // double position_size_long = 25;
  void clear_position_size_long() ;
  double position_size_long() const;
  void set_position_size_long(double value);

  private:
  double _internal_position_size_long() const;
  void _internal_set_position_size_long(double value);

  public:
  // double position_price_long = 26;
  void clear_position_price_long() ;
  double position_price_long() const;
  void set_position_price_long(double value);

  private:
  double _internal_position_price_long() const;
  void _internal_set_position_price_long(double value);

  public:
  // double position_usd_long = 27;
  void clear_position_usd_long() ;
  double position_usd_long() const;
  void set_position_usd_long(double value);

  private:
  double _internal_position_usd_long() const;
  void _internal_set_position_usd_long(double value);

  public:
  // double pnl_usd_long = 28;
  void clear_pnl_usd_long() ;
  double pnl_usd_long() const;
  void set_pnl_usd_long(double value);

  private:
  double _internal_pnl_usd_long() const;
  void _internal_set_pnl_usd_long(double value);

  public:
  // double fee_usd_long = 29;
  void clear_fee_usd_long() ;
  double fee_usd_long() const;
  void set_fee_usd_long(double value);

  private:
  double _internal_fee_usd_long() const;
  void _internal_set_fee_usd_long(double value);

  public:
  // double funding_long = 30;
  void clear_funding_long() ;
  double funding_long() const;
  void set_funding_long(double value);

  private:
  double _internal_funding_long() const;
  void _internal_set_funding_long(double value);

  public:
  // double rpl_usd_long = 31;
  void clear_rpl_usd_long() ;
  double rpl_usd_long() const;
  void set_rpl_usd_long(double value);

  private:
  double _internal_rpl_usd_long() const;
  void _internal_set_rpl_usd_long(double value);

  public:
  // double order_leverage_short = 32;
  void clear_order_leverage_short() ;
  double order_leverage_short() const;
  void set_order_leverage_short(double value);

  private:
  double _internal_order_leverage_short() const;
  void _internal_set_order_leverage_short(double value);

  public:
  // double leverage_short = 33;
  void clear_leverage_short() ;
  double leverage_short() const;
  void set_leverage_short(double value);

  private:
  double _internal_leverage_short() const;
  void _internal_set_leverage_short(double value);

  public:
  // double order_size_short = 34;
  void clear_order_size_short() ;
  double order_size_short() const;
  void set_order_size_short(double value);

  private:
  double _internal_order_size_short() const;
  void _internal_set_order_size_short(double value);

  public:
  // double order_price_short = 35;
  void clear_order_price_short() ;
  double order_price_short() const;
  void set_order_price_short(double value);

  private:
  double _internal_order_price_short() const;
  void _internal_set_order_price_short(double value);

  public:
  // double order_usd_short = 36;
  void clear_order_usd_short() ;
  double order_usd_short() const;
  void set_order_usd_short(double value);

  private:
  double _internal_order_usd_short() const;
  void _internal_set_order_usd_short(double value);

  public:
  // double position_usd_short = 38;
  void clear_position_usd_short() ;
  double position_usd_short() const;
  void set_position_usd_short(double value);

  private:
  double _internal_position_usd_short() const;
  void _internal_set_position_usd_short(double value);

  public:
  // double position_size_short = 39;
  void clear_position_size_short() ;
  double position_size_short() const;
  void set_position_size_short(double value);

  private:
  double _internal_position_size_short() const;
  void _internal_set_position_size_short(double value);

  public:
  // double position_price_short = 40;
  void clear_position_price_short() ;
  double position_price_short() const;
  void set_position_price_short(double value);

  private:
  double _internal_position_price_short() const;
  void _internal_set_position_price_short(double value);

  public:
  // double pnl_usd_short = 41;
  void clear_pnl_usd_short() ;
  double pnl_usd_short() const;
  void set_pnl_usd_short(double value);

  private:
  double _internal_pnl_usd_short() const;
  void _internal_set_pnl_usd_short(double value);

  public:
  // double fee_usd_short = 42;
  void clear_fee_usd_short() ;
  double fee_usd_short() const;
  void set_fee_usd_short(double value);

  private:
  double _internal_fee_usd_short() const;
  void _internal_set_fee_usd_short(double value);

  public:
  // double funding_short = 43;
  void clear_funding_short() ;
  double funding_short() const;
  void set_funding_short(double value);

  private:
  double _internal_funding_short() const;
  void _internal_set_funding_short(double value);

  public:
  // double rpl_usd_short = 44;
  void clear_rpl_usd_short() ;
  double rpl_usd_short() const;
  void set_rpl_usd_short(double value);

  private:
  double _internal_rpl_usd_short() const;
  void _internal_set_rpl_usd_short(double value);

  public:
  // int32 block_id = 10;
  void clear_block_id() ;
  ::int32_t block_id() const;
  void set_block_id(::int32_t value);

  private:
  ::int32_t _internal_block_id() const;
  void _internal_set_block_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chart_api.LogEntry)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      5, 44, 0,
      189, 9>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LogEntry& from_msg);
    ::google::protobuf::internal::ArenaStringPtr time_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    ::google::protobuf::internal::ArenaStringPtr algo_;
    ::google::protobuf::internal::ArenaStringPtr timeframe_;
    ::google::protobuf::internal::ArenaStringPtr block_name_;
    ::google::protobuf::internal::ArenaStringPtr indicator_param_;
    ::google::protobuf::internal::ArenaStringPtr vars_;
    ::google::protobuf::internal::ArenaStringPtr side_;
    ::google::protobuf::internal::ArenaStringPtr order_type_long_;
    ::google::protobuf::internal::ArenaStringPtr order_type_short_;
    ::google::protobuf::internal::ArenaStringPtr user_;
    ::google::protobuf::internal::ArenaStringPtr mode_;
    ::google::protobuf::internal::ArenaStringPtr mode_time_;
    ::google::protobuf::internal::ArenaStringPtr coin_;
    ::google::protobuf::internal::ArenaStringPtr coin_second_;
    double close_;
    double balance_;
    double equity_;
    double money_;
    double order_leverage_long_;
    double leverage_long_;
    double order_size_long_;
    double order_price_long_;
    double order_usd_long_;
    double position_size_long_;
    double position_price_long_;
    double position_usd_long_;
    double pnl_usd_long_;
    double fee_usd_long_;
    double funding_long_;
    double rpl_usd_long_;
    double order_leverage_short_;
    double leverage_short_;
    double order_size_short_;
    double order_price_short_;
    double order_usd_short_;
    double position_usd_short_;
    double position_size_short_;
    double position_price_short_;
    double pnl_usd_short_;
    double fee_usd_short_;
    double funding_short_;
    double rpl_usd_short_;
    ::int32_t block_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class IndicatorParam_ParamEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  IndicatorParam_ParamEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IndicatorParam_ParamEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit IndicatorParam_ParamEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const IndicatorParam_ParamEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const IndicatorParam_ParamEntry_DoNotUse*>(
        &_IndicatorParam_ParamEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_chart_5fapi_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      52, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class Indicator_ParamEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, std::string,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>;
  Indicator_ParamEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Indicator_ParamEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit Indicator_ParamEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const Indicator_ParamEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const Indicator_ParamEntry_DoNotUse*>(
        &_Indicator_ParamEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_chart_5fapi_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      47, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class GetUsersRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:chart_api.GetUsersRequest) */ {
 public:
  inline GetUsersRequest() : GetUsersRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetUsersRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetUsersRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetUsersRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetUsersRequest(const GetUsersRequest& from) : GetUsersRequest(nullptr, from) {}
  inline GetUsersRequest(GetUsersRequest&& from) noexcept
      : GetUsersRequest(nullptr, std::move(from)) {}
  inline GetUsersRequest& operator=(const GetUsersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUsersRequest& operator=(GetUsersRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUsersRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUsersRequest* internal_default_instance() {
    return reinterpret_cast<const GetUsersRequest*>(
        &_GetUsersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(GetUsersRequest& a, GetUsersRequest& b) { a.Swap(&b); }
  inline void Swap(GetUsersRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUsersRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUsersRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<GetUsersRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetUsersRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetUsersRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetUsersRequest"; }

 protected:
  explicit GetUsersRequest(::google::protobuf::Arena* arena);
  GetUsersRequest(::google::protobuf::Arena* arena, const GetUsersRequest& from);
  GetUsersRequest(::google::protobuf::Arena* arena, GetUsersRequest&& from) noexcept
      : GetUsersRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:chart_api.GetUsersRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetUsersRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetStreamsByAlgoRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.GetStreamsByAlgoRequest) */ {
 public:
  inline GetStreamsByAlgoRequest() : GetStreamsByAlgoRequest(nullptr) {}
  ~GetStreamsByAlgoRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetStreamsByAlgoRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetStreamsByAlgoRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetStreamsByAlgoRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetStreamsByAlgoRequest(const GetStreamsByAlgoRequest& from) : GetStreamsByAlgoRequest(nullptr, from) {}
  inline GetStreamsByAlgoRequest(GetStreamsByAlgoRequest&& from) noexcept
      : GetStreamsByAlgoRequest(nullptr, std::move(from)) {}
  inline GetStreamsByAlgoRequest& operator=(const GetStreamsByAlgoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamsByAlgoRequest& operator=(GetStreamsByAlgoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamsByAlgoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamsByAlgoRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamsByAlgoRequest*>(
        &_GetStreamsByAlgoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(GetStreamsByAlgoRequest& a, GetStreamsByAlgoRequest& b) { a.Swap(&b); }
  inline void Swap(GetStreamsByAlgoRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamsByAlgoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStreamsByAlgoRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetStreamsByAlgoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetStreamsByAlgoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetStreamsByAlgoRequest& from) { GetStreamsByAlgoRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetStreamsByAlgoRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetStreamsByAlgoRequest"; }

 protected:
  explicit GetStreamsByAlgoRequest(::google::protobuf::Arena* arena);
  GetStreamsByAlgoRequest(::google::protobuf::Arena* arena, const GetStreamsByAlgoRequest& from);
  GetStreamsByAlgoRequest(::google::protobuf::Arena* arena, GetStreamsByAlgoRequest&& from) noexcept
      : GetStreamsByAlgoRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAlgoFieldNumber = 1,
  };
  // string algo = 1;
  void clear_algo() ;
  const std::string& algo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_algo(Arg_&& arg, Args_... args);
  std::string* mutable_algo();
  PROTOBUF_NODISCARD std::string* release_algo();
  void set_allocated_algo(std::string* value);

  private:
  const std::string& _internal_algo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algo(
      const std::string& value);
  std::string* _internal_mutable_algo();

  public:
  // @@protoc_insertion_point(class_scope:chart_api.GetStreamsByAlgoRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      46, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetStreamsByAlgoRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr algo_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetLogsRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.GetLogsRequest) */ {
 public:
  inline GetLogsRequest() : GetLogsRequest(nullptr) {}
  ~GetLogsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetLogsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetLogsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetLogsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetLogsRequest(const GetLogsRequest& from) : GetLogsRequest(nullptr, from) {}
  inline GetLogsRequest(GetLogsRequest&& from) noexcept
      : GetLogsRequest(nullptr, std::move(from)) {}
  inline GetLogsRequest& operator=(const GetLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogsRequest& operator=(GetLogsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLogsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogsRequest* internal_default_instance() {
    return reinterpret_cast<const GetLogsRequest*>(
        &_GetLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(GetLogsRequest& a, GetLogsRequest& b) { a.Swap(&b); }
  inline void Swap(GetLogsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLogsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetLogsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetLogsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetLogsRequest& from) { GetLogsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetLogsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetLogsRequest"; }

 protected:
  explicit GetLogsRequest(::google::protobuf::Arena* arena);
  GetLogsRequest(::google::protobuf::Arena* arena, const GetLogsRequest& from);
  GetLogsRequest(::google::protobuf::Arena* arena, GetLogsRequest&& from) noexcept
      : GetLogsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kModeTimeFieldNumber = 5,
    kFromTimestampFieldNumber = 2,
    kIdFieldNumber = 1,
    kOrdersOnlyFieldNumber = 3,
    kLimitFieldNumber = 4,
  };
  // string mode_time = 5;
  void clear_mode_time() ;
  const std::string& mode_time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_mode_time(Arg_&& arg, Args_... args);
  std::string* mutable_mode_time();
  PROTOBUF_NODISCARD std::string* release_mode_time();
  void set_allocated_mode_time(std::string* value);

  private:
  const std::string& _internal_mode_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mode_time(
      const std::string& value);
  std::string* _internal_mutable_mode_time();

  public:
  // int64 from_timestamp = 2;
  void clear_from_timestamp() ;
  ::int64_t from_timestamp() const;
  void set_from_timestamp(::int64_t value);

  private:
  ::int64_t _internal_from_timestamp() const;
  void _internal_set_from_timestamp(::int64_t value);

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // bool orders_only = 3;
  void clear_orders_only() ;
  bool orders_only() const;
  void set_orders_only(bool value);

  private:
  bool _internal_orders_only() const;
  void _internal_set_orders_only(bool value);

  public:
  // int32 limit = 4;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chart_api.GetLogsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetLogsRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr mode_time_;
    ::int64_t from_timestamp_;
    ::int32_t id_;
    bool orders_only_;
    ::int32_t limit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetDataRequest final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.GetDataRequest) */ {
 public:
  inline GetDataRequest() : GetDataRequest(nullptr) {}
  ~GetDataRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetDataRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetDataRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetDataRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetDataRequest(const GetDataRequest& from) : GetDataRequest(nullptr, from) {}
  inline GetDataRequest(GetDataRequest&& from) noexcept
      : GetDataRequest(nullptr, std::move(from)) {}
  inline GetDataRequest& operator=(const GetDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataRequest& operator=(GetDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetDataRequest*>(
        &_GetDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(GetDataRequest& a, GetDataRequest& b) { a.Swap(&b); }
  inline void Swap(GetDataRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDataRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetDataRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetDataRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetDataRequest& from) { GetDataRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetDataRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetDataRequest"; }

 protected:
  explicit GetDataRequest(::google::protobuf::Arena* arena);
  GetDataRequest(::google::protobuf::Arena* arena, const GetDataRequest& from);
  GetDataRequest(::google::protobuf::Arena* arena, GetDataRequest&& from) noexcept
      : GetDataRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFromTimestampFieldNumber = 2,
    kIdFieldNumber = 1,
    kLimitFieldNumber = 3,
  };
  // int64 from_timestamp = 2;
  void clear_from_timestamp() ;
  ::int64_t from_timestamp() const;
  void set_from_timestamp(::int64_t value);

  private:
  ::int64_t _internal_from_timestamp() const;
  void _internal_set_from_timestamp(::int64_t value);

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 limit = 3;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chart_api.GetDataRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetDataRequest& from_msg);
    ::int64_t from_timestamp_;
    ::int32_t id_;
    ::int32_t limit_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetAlgosResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.GetAlgosResponse) */ {
 public:
  inline GetAlgosResponse() : GetAlgosResponse(nullptr) {}
  ~GetAlgosResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetAlgosResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetAlgosResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetAlgosResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetAlgosResponse(const GetAlgosResponse& from) : GetAlgosResponse(nullptr, from) {}
  inline GetAlgosResponse(GetAlgosResponse&& from) noexcept
      : GetAlgosResponse(nullptr, std::move(from)) {}
  inline GetAlgosResponse& operator=(const GetAlgosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAlgosResponse& operator=(GetAlgosResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAlgosResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAlgosResponse* internal_default_instance() {
    return reinterpret_cast<const GetAlgosResponse*>(
        &_GetAlgosResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GetAlgosResponse& a, GetAlgosResponse& b) { a.Swap(&b); }
  inline void Swap(GetAlgosResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAlgosResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAlgosResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetAlgosResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetAlgosResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetAlgosResponse& from) { GetAlgosResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetAlgosResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetAlgosResponse"; }

 protected:
  explicit GetAlgosResponse(::google::protobuf::Arena* arena);
  GetAlgosResponse(::google::protobuf::Arena* arena, const GetAlgosResponse& from);
  GetAlgosResponse(::google::protobuf::Arena* arena, GetAlgosResponse&& from) noexcept
      : GetAlgosResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kAlgosFieldNumber = 1,
  };
  // repeated string algos = 1;
  int algos_size() const;
  private:
  int _internal_algos_size() const;

  public:
  void clear_algos() ;
  const std::string& algos(int index) const;
  std::string* mutable_algos(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_algos(int index, Arg_&& value, Args_... args);
  std::string* add_algos();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_algos(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& algos() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_algos();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_algos() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_algos();

  public:
  // @@protoc_insertion_point(class_scope:chart_api.GetAlgosResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetAlgosResponse& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> algos_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetAlgosRequest final
    : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:chart_api.GetAlgosRequest) */ {
 public:
  inline GetAlgosRequest() : GetAlgosRequest(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetAlgosRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetAlgosRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetAlgosRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetAlgosRequest(const GetAlgosRequest& from) : GetAlgosRequest(nullptr, from) {}
  inline GetAlgosRequest(GetAlgosRequest&& from) noexcept
      : GetAlgosRequest(nullptr, std::move(from)) {}
  inline GetAlgosRequest& operator=(const GetAlgosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAlgosRequest& operator=(GetAlgosRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAlgosRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAlgosRequest* internal_default_instance() {
    return reinterpret_cast<const GetAlgosRequest*>(
        &_GetAlgosRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GetAlgosRequest& a, GetAlgosRequest& b) { a.Swap(&b); }
  inline void Swap(GetAlgosRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAlgosRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetAlgosRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<GetAlgosRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetAlgosRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetAlgosRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetAlgosRequest"; }

 protected:
  explicit GetAlgosRequest(::google::protobuf::Arena* arena);
  GetAlgosRequest(::google::protobuf::Arena* arena, const GetAlgosRequest& from);
  GetAlgosRequest(::google::protobuf::Arena* arena, GetAlgosRequest&& from) noexcept
      : GetAlgosRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:chart_api.GetAlgosRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetAlgosRequest& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Volume final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.Volume) */ {
 public:
  inline Volume() : Volume(nullptr) {}
  ~Volume() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Volume* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Volume));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Volume(
      ::google::protobuf::internal::ConstantInitialized);

  inline Volume(const Volume& from) : Volume(nullptr, from) {}
  inline Volume(Volume&& from) noexcept
      : Volume(nullptr, std::move(from)) {}
  inline Volume& operator=(const Volume& from) {
    CopyFrom(from);
    return *this;
  }
  inline Volume& operator=(Volume&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Volume& default_instance() {
    return *internal_default_instance();
  }
  static inline const Volume* internal_default_instance() {
    return reinterpret_cast<const Volume*>(
        &_Volume_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(Volume& a, Volume& b) { a.Swap(&b); }
  inline void Swap(Volume* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Volume* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Volume* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Volume>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Volume& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Volume& from) { Volume::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Volume* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.Volume"; }

 protected:
  explicit Volume(::google::protobuf::Arena* arena);
  Volume(::google::protobuf::Arena* arena, const Volume& from);
  Volume(::google::protobuf::Arena* arena, Volume&& from) noexcept
      : Volume(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParamsFieldNumber = 1,
  };
  // map<string, string> params = 1;
  int params_size() const;
  private:
  int _internal_params_size() const;

  public:
  void clear_params() ;
  const ::google::protobuf::Map<std::string, std::string>& params() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_params();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_params() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_params();

  public:
  // @@protoc_insertion_point(class_scope:chart_api.Volume)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      31, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Volume& from_msg);
    ::google::protobuf::internal::MapField<Volume_ParamsEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        params_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class MarketData_MarketsEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  MarketData_MarketsEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketData_MarketsEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit MarketData_MarketsEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const MarketData_MarketsEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const MarketData_MarketsEntry_DoNotUse*>(
        &_MarketData_MarketsEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_chart_5fapi_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      45, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class IndicatorParam final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.IndicatorParam) */ {
 public:
  inline IndicatorParam() : IndicatorParam(nullptr) {}
  ~IndicatorParam() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(IndicatorParam* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(IndicatorParam));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR IndicatorParam(
      ::google::protobuf::internal::ConstantInitialized);

  inline IndicatorParam(const IndicatorParam& from) : IndicatorParam(nullptr, from) {}
  inline IndicatorParam(IndicatorParam&& from) noexcept
      : IndicatorParam(nullptr, std::move(from)) {}
  inline IndicatorParam& operator=(const IndicatorParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndicatorParam& operator=(IndicatorParam&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IndicatorParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const IndicatorParam* internal_default_instance() {
    return reinterpret_cast<const IndicatorParam*>(
        &_IndicatorParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(IndicatorParam& a, IndicatorParam& b) { a.Swap(&b); }
  inline void Swap(IndicatorParam* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndicatorParam* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IndicatorParam* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<IndicatorParam>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const IndicatorParam& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const IndicatorParam& from) { IndicatorParam::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(IndicatorParam* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.IndicatorParam"; }

 protected:
  explicit IndicatorParam(::google::protobuf::Arena* arena);
  IndicatorParam(::google::protobuf::Arena* arena, const IndicatorParam& from);
  IndicatorParam(::google::protobuf::Arena* arena, IndicatorParam&& from) noexcept
      : IndicatorParam(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParamFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // map<string, string> param = 2;
  int param_size() const;
  private:
  int _internal_param_size() const;

  public:
  void clear_param() ;
  const ::google::protobuf::Map<std::string, std::string>& param() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_param();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_param() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_param();

  public:
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // @@protoc_insertion_point(class_scope:chart_api.IndicatorParam)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      42, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const IndicatorParam& from_msg);
    ::google::protobuf::internal::MapField<IndicatorParam_ParamEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        param_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetLogsResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.GetLogsResponse) */ {
 public:
  inline GetLogsResponse() : GetLogsResponse(nullptr) {}
  ~GetLogsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetLogsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetLogsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetLogsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetLogsResponse(const GetLogsResponse& from) : GetLogsResponse(nullptr, from) {}
  inline GetLogsResponse(GetLogsResponse&& from) noexcept
      : GetLogsResponse(nullptr, std::move(from)) {}
  inline GetLogsResponse& operator=(const GetLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLogsResponse& operator=(GetLogsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLogsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLogsResponse* internal_default_instance() {
    return reinterpret_cast<const GetLogsResponse*>(
        &_GetLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(GetLogsResponse& a, GetLogsResponse& b) { a.Swap(&b); }
  inline void Swap(GetLogsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLogsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLogsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetLogsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetLogsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetLogsResponse& from) { GetLogsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetLogsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetLogsResponse"; }

 protected:
  explicit GetLogsResponse(::google::protobuf::Arena* arena);
  GetLogsResponse(::google::protobuf::Arena* arena, const GetLogsResponse& from);
  GetLogsResponse(::google::protobuf::Arena* arena, GetLogsResponse&& from) noexcept
      : GetLogsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogsFieldNumber = 1,
  };
  // repeated .chart_api.LogEntry logs = 1;
  int logs_size() const;
  private:
  int _internal_logs_size() const;

  public:
  void clear_logs() ;
  ::chart_api::LogEntry* mutable_logs(int index);
  ::google::protobuf::RepeatedPtrField<::chart_api::LogEntry>* mutable_logs();

  private:
  const ::google::protobuf::RepeatedPtrField<::chart_api::LogEntry>& _internal_logs() const;
  ::google::protobuf::RepeatedPtrField<::chart_api::LogEntry>* _internal_mutable_logs();
  public:
  const ::chart_api::LogEntry& logs(int index) const;
  ::chart_api::LogEntry* add_logs();
  const ::google::protobuf::RepeatedPtrField<::chart_api::LogEntry>& logs() const;
  // @@protoc_insertion_point(class_scope:chart_api.GetLogsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetLogsResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::chart_api::LogEntry > logs_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class StreamData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.StreamData) */ {
 public:
  inline StreamData() : StreamData(nullptr) {}
  ~StreamData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(StreamData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(StreamData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR StreamData(
      ::google::protobuf::internal::ConstantInitialized);

  inline StreamData(const StreamData& from) : StreamData(nullptr, from) {}
  inline StreamData(StreamData&& from) noexcept
      : StreamData(nullptr, std::move(from)) {}
  inline StreamData& operator=(const StreamData& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamData& operator=(StreamData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamData& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamData* internal_default_instance() {
    return reinterpret_cast<const StreamData*>(
        &_StreamData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(StreamData& a, StreamData& b) { a.Swap(&b); }
  inline void Swap(StreamData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<StreamData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const StreamData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const StreamData& from) { StreamData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(StreamData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.StreamData"; }

 protected:
  explicit StreamData(::google::protobuf::Arena* arena);
  StreamData(::google::protobuf::Arena* arena, const StreamData& from);
  StreamData(::google::protobuf::Arena* arena, StreamData&& from) noexcept
      : StreamData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIndicatorParamFieldNumber = 9,
    kUserFieldNumber = 2,
    kCoinFieldNumber = 3,
    kCoinSecondFieldNumber = 4,
    kTimeframeFieldNumber = 5,
    kAlgoFieldNumber = 6,
    kIdFieldNumber = 1,
    kPriceDecimalFieldNumber = 7,
    kSizeDecimalFieldNumber = 8,
  };
  // repeated .chart_api.IndicatorParam indicator_param = 9;
  int indicator_param_size() const;
  private:
  int _internal_indicator_param_size() const;

  public:
  void clear_indicator_param() ;
  ::chart_api::IndicatorParam* mutable_indicator_param(int index);
  ::google::protobuf::RepeatedPtrField<::chart_api::IndicatorParam>* mutable_indicator_param();

  private:
  const ::google::protobuf::RepeatedPtrField<::chart_api::IndicatorParam>& _internal_indicator_param() const;
  ::google::protobuf::RepeatedPtrField<::chart_api::IndicatorParam>* _internal_mutable_indicator_param();
  public:
  const ::chart_api::IndicatorParam& indicator_param(int index) const;
  ::chart_api::IndicatorParam* add_indicator_param();
  const ::google::protobuf::RepeatedPtrField<::chart_api::IndicatorParam>& indicator_param() const;
  // string user = 2;
  void clear_user() ;
  const std::string& user() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user(Arg_&& arg, Args_... args);
  std::string* mutable_user();
  PROTOBUF_NODISCARD std::string* release_user();
  void set_allocated_user(std::string* value);

  private:
  const std::string& _internal_user() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user(
      const std::string& value);
  std::string* _internal_mutable_user();

  public:
  // string coin = 3;
  void clear_coin() ;
  const std::string& coin() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_coin(Arg_&& arg, Args_... args);
  std::string* mutable_coin();
  PROTOBUF_NODISCARD std::string* release_coin();
  void set_allocated_coin(std::string* value);

  private:
  const std::string& _internal_coin() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin(
      const std::string& value);
  std::string* _internal_mutable_coin();

  public:
  // string coin_second = 4;
  void clear_coin_second() ;
  const std::string& coin_second() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_coin_second(Arg_&& arg, Args_... args);
  std::string* mutable_coin_second();
  PROTOBUF_NODISCARD std::string* release_coin_second();
  void set_allocated_coin_second(std::string* value);

  private:
  const std::string& _internal_coin_second() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_coin_second(
      const std::string& value);
  std::string* _internal_mutable_coin_second();

  public:
  // string timeframe = 5;
  void clear_timeframe() ;
  const std::string& timeframe() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timeframe(Arg_&& arg, Args_... args);
  std::string* mutable_timeframe();
  PROTOBUF_NODISCARD std::string* release_timeframe();
  void set_allocated_timeframe(std::string* value);

  private:
  const std::string& _internal_timeframe() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timeframe(
      const std::string& value);
  std::string* _internal_mutable_timeframe();

  public:
  // string algo = 6;
  void clear_algo() ;
  const std::string& algo() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_algo(Arg_&& arg, Args_... args);
  std::string* mutable_algo();
  PROTOBUF_NODISCARD std::string* release_algo();
  void set_allocated_algo(std::string* value);

  private:
  const std::string& _internal_algo() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_algo(
      const std::string& value);
  std::string* _internal_mutable_algo();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 price_decimal = 7;
  void clear_price_decimal() ;
  ::int32_t price_decimal() const;
  void set_price_decimal(::int32_t value);

  private:
  ::int32_t _internal_price_decimal() const;
  void _internal_set_price_decimal(::int32_t value);

  public:
  // int32 size_decimal = 8;
  void clear_size_decimal() ;
  ::int32_t size_decimal() const;
  void set_size_decimal(::int32_t value);

  private:
  ::int32_t _internal_size_decimal() const;
  void _internal_set_size_decimal(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chart_api.StreamData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      69, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const StreamData& from_msg);
    ::google::protobuf::RepeatedPtrField< ::chart_api::IndicatorParam > indicator_param_;
    ::google::protobuf::internal::ArenaStringPtr user_;
    ::google::protobuf::internal::ArenaStringPtr coin_;
    ::google::protobuf::internal::ArenaStringPtr coin_second_;
    ::google::protobuf::internal::ArenaStringPtr timeframe_;
    ::google::protobuf::internal::ArenaStringPtr algo_;
    ::int32_t id_;
    ::int32_t price_decimal_;
    ::int32_t size_decimal_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class MarketData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.MarketData) */ {
 public:
  inline MarketData() : MarketData(nullptr) {}
  ~MarketData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MarketData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MarketData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketData(
      ::google::protobuf::internal::ConstantInitialized);

  inline MarketData(const MarketData& from) : MarketData(nullptr, from) {}
  inline MarketData(MarketData&& from) noexcept
      : MarketData(nullptr, std::move(from)) {}
  inline MarketData& operator=(const MarketData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketData& operator=(MarketData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketData& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketData* internal_default_instance() {
    return reinterpret_cast<const MarketData*>(
        &_MarketData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(MarketData& a, MarketData& b) { a.Swap(&b); }
  inline void Swap(MarketData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MarketData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MarketData& from) { MarketData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MarketData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.MarketData"; }

 protected:
  explicit MarketData(::google::protobuf::Arena* arena);
  MarketData(::google::protobuf::Arena* arena, const MarketData& from);
  MarketData(::google::protobuf::Arena* arena, MarketData&& from) noexcept
      : MarketData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMarketsFieldNumber = 1,
  };
  // map<string, .chart_api.ModeData> markets = 1;
  int markets_size() const;
  private:
  int _internal_markets_size() const;

  public:
  void clear_markets() ;
  const ::google::protobuf::Map<std::string, ::chart_api::ModeData>& markets() const;
  ::google::protobuf::Map<std::string, ::chart_api::ModeData>* mutable_markets();

  private:
  const ::google::protobuf::Map<std::string, ::chart_api::ModeData>& _internal_markets() const;
  ::google::protobuf::Map<std::string, ::chart_api::ModeData>* _internal_mutable_markets();

  public:
  // @@protoc_insertion_point(class_scope:chart_api.MarketData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 2,
      36, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MarketData& from_msg);
    ::google::protobuf::internal::MapField<MarketData_MarketsEntry_DoNotUse, std::string, ::chart_api::ModeData,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        markets_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class Indicator final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.Indicator) */ {
 public:
  inline Indicator() : Indicator(nullptr) {}
  ~Indicator() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Indicator* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Indicator));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Indicator(
      ::google::protobuf::internal::ConstantInitialized);

  inline Indicator(const Indicator& from) : Indicator(nullptr, from) {}
  inline Indicator(Indicator&& from) noexcept
      : Indicator(nullptr, std::move(from)) {}
  inline Indicator& operator=(const Indicator& from) {
    CopyFrom(from);
    return *this;
  }
  inline Indicator& operator=(Indicator&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Indicator& default_instance() {
    return *internal_default_instance();
  }
  static inline const Indicator* internal_default_instance() {
    return reinterpret_cast<const Indicator*>(
        &_Indicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(Indicator& a, Indicator& b) { a.Swap(&b); }
  inline void Swap(Indicator* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Indicator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Indicator* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Indicator>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Indicator& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Indicator& from) { Indicator::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Indicator* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.Indicator"; }

 protected:
  explicit Indicator(::google::protobuf::Arena* arena);
  Indicator(::google::protobuf::Arena* arena, const Indicator& from);
  Indicator(::google::protobuf::Arena* arena, Indicator&& from) noexcept
      : Indicator(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kParamFieldNumber = 3,
    kVolumeFieldNumber = 4,
    kTypeFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // map<string, string> param = 3;
  int param_size() const;
  private:
  int _internal_param_size() const;

  public:
  void clear_param() ;
  const ::google::protobuf::Map<std::string, std::string>& param() const;
  ::google::protobuf::Map<std::string, std::string>* mutable_param();

  private:
  const ::google::protobuf::Map<std::string, std::string>& _internal_param() const;
  ::google::protobuf::Map<std::string, std::string>* _internal_mutable_param();

  public:
  // repeated .chart_api.Volume volume = 4;
  int volume_size() const;
  private:
  int _internal_volume_size() const;

  public:
  void clear_volume() ;
  ::chart_api::Volume* mutable_volume(int index);
  ::google::protobuf::RepeatedPtrField<::chart_api::Volume>* mutable_volume();

  private:
  const ::google::protobuf::RepeatedPtrField<::chart_api::Volume>& _internal_volume() const;
  ::google::protobuf::RepeatedPtrField<::chart_api::Volume>* _internal_mutable_volume();
  public:
  const ::chart_api::Volume& volume(int index) const;
  ::chart_api::Volume* add_volume();
  const ::google::protobuf::RepeatedPtrField<::chart_api::Volume>& volume() const;
  // string type = 1;
  void clear_type() ;
  const std::string& type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_type(Arg_&& arg, Args_... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* value);

  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(
      const std::string& value);
  std::string* _internal_mutable_type();

  public:
  // string name = 2;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:chart_api.Indicator)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 2,
      41, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Indicator& from_msg);
    ::google::protobuf::internal::MapField<Indicator_ParamEntry_DoNotUse, std::string, std::string,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING>
        param_;
    ::google::protobuf::RepeatedPtrField< ::chart_api::Volume > volume_;
    ::google::protobuf::internal::ArenaStringPtr type_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetStreamsByAlgoResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.GetStreamsByAlgoResponse) */ {
 public:
  inline GetStreamsByAlgoResponse() : GetStreamsByAlgoResponse(nullptr) {}
  ~GetStreamsByAlgoResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetStreamsByAlgoResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetStreamsByAlgoResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetStreamsByAlgoResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetStreamsByAlgoResponse(const GetStreamsByAlgoResponse& from) : GetStreamsByAlgoResponse(nullptr, from) {}
  inline GetStreamsByAlgoResponse(GetStreamsByAlgoResponse&& from) noexcept
      : GetStreamsByAlgoResponse(nullptr, std::move(from)) {}
  inline GetStreamsByAlgoResponse& operator=(const GetStreamsByAlgoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamsByAlgoResponse& operator=(GetStreamsByAlgoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamsByAlgoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamsByAlgoResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamsByAlgoResponse*>(
        &_GetStreamsByAlgoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GetStreamsByAlgoResponse& a, GetStreamsByAlgoResponse& b) { a.Swap(&b); }
  inline void Swap(GetStreamsByAlgoResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamsByAlgoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStreamsByAlgoResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetStreamsByAlgoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetStreamsByAlgoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetStreamsByAlgoResponse& from) { GetStreamsByAlgoResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetStreamsByAlgoResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetStreamsByAlgoResponse"; }

 protected:
  explicit GetStreamsByAlgoResponse(::google::protobuf::Arena* arena);
  GetStreamsByAlgoResponse(::google::protobuf::Arena* arena, const GetStreamsByAlgoResponse& from);
  GetStreamsByAlgoResponse(::google::protobuf::Arena* arena, GetStreamsByAlgoResponse&& from) noexcept
      : GetStreamsByAlgoResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStreamsFieldNumber = 1,
  };
  // repeated .chart_api.StreamData streams = 1;
  int streams_size() const;
  private:
  int _internal_streams_size() const;

  public:
  void clear_streams() ;
  ::chart_api::StreamData* mutable_streams(int index);
  ::google::protobuf::RepeatedPtrField<::chart_api::StreamData>* mutable_streams();

  private:
  const ::google::protobuf::RepeatedPtrField<::chart_api::StreamData>& _internal_streams() const;
  ::google::protobuf::RepeatedPtrField<::chart_api::StreamData>* _internal_mutable_streams();
  public:
  const ::chart_api::StreamData& streams(int index) const;
  ::chart_api::StreamData* add_streams();
  const ::google::protobuf::RepeatedPtrField<::chart_api::StreamData>& streams() const;
  // @@protoc_insertion_point(class_scope:chart_api.GetStreamsByAlgoResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetStreamsByAlgoResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::chart_api::StreamData > streams_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ExchangeData_ExchangesEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  ExchangeData_ExchangesEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExchangeData_ExchangesEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit ExchangeData_ExchangesEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const ExchangeData_ExchangesEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const ExchangeData_ExchangesEntry_DoNotUse*>(
        &_ExchangeData_ExchangesEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_chart_5fapi_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      49, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class DataPoint final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.DataPoint) */ {
 public:
  inline DataPoint() : DataPoint(nullptr) {}
  ~DataPoint() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(DataPoint* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(DataPoint));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR DataPoint(
      ::google::protobuf::internal::ConstantInitialized);

  inline DataPoint(const DataPoint& from) : DataPoint(nullptr, from) {}
  inline DataPoint(DataPoint&& from) noexcept
      : DataPoint(nullptr, std::move(from)) {}
  inline DataPoint& operator=(const DataPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataPoint& operator=(DataPoint&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataPoint* internal_default_instance() {
    return reinterpret_cast<const DataPoint*>(
        &_DataPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(DataPoint& a, DataPoint& b) { a.Swap(&b); }
  inline void Swap(DataPoint* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataPoint* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<DataPoint>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DataPoint& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const DataPoint& from) { DataPoint::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(DataPoint* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.DataPoint"; }

 protected:
  explicit DataPoint(::google::protobuf::Arena* arena);
  DataPoint(::google::protobuf::Arena* arena, const DataPoint& from);
  DataPoint(::google::protobuf::Arena* arena, DataPoint&& from) noexcept
      : DataPoint(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIndicatorsFieldNumber = 9,
    kTimeFieldNumber = 2,
    kTimestampFieldNumber = 3,
    kOpenFieldNumber = 4,
    kHighFieldNumber = 5,
    kLowFieldNumber = 6,
    kCloseFieldNumber = 7,
    kVolumeFieldNumber = 8,
    kIdFieldNumber = 1,
  };
  // repeated .chart_api.Indicator indicators = 9;
  int indicators_size() const;
  private:
  int _internal_indicators_size() const;

  public:
  void clear_indicators() ;
  ::chart_api::Indicator* mutable_indicators(int index);
  ::google::protobuf::RepeatedPtrField<::chart_api::Indicator>* mutable_indicators();

  private:
  const ::google::protobuf::RepeatedPtrField<::chart_api::Indicator>& _internal_indicators() const;
  ::google::protobuf::RepeatedPtrField<::chart_api::Indicator>* _internal_mutable_indicators();
  public:
  const ::chart_api::Indicator& indicators(int index) const;
  ::chart_api::Indicator* add_indicators();
  const ::google::protobuf::RepeatedPtrField<::chart_api::Indicator>& indicators() const;
  // string time = 2;
  void clear_time() ;
  const std::string& time() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_time(Arg_&& arg, Args_... args);
  std::string* mutable_time();
  PROTOBUF_NODISCARD std::string* release_time();
  void set_allocated_time(std::string* value);

  private:
  const std::string& _internal_time() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_time(
      const std::string& value);
  std::string* _internal_mutable_time();

  public:
  // string timestamp = 3;
  void clear_timestamp() ;
  const std::string& timestamp() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_timestamp(Arg_&& arg, Args_... args);
  std::string* mutable_timestamp();
  PROTOBUF_NODISCARD std::string* release_timestamp();
  void set_allocated_timestamp(std::string* value);

  private:
  const std::string& _internal_timestamp() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_timestamp(
      const std::string& value);
  std::string* _internal_mutable_timestamp();

  public:
  // double open = 4;
  void clear_open() ;
  double open() const;
  void set_open(double value);

  private:
  double _internal_open() const;
  void _internal_set_open(double value);

  public:
  // double high = 5;
  void clear_high() ;
  double high() const;
  void set_high(double value);

  private:
  double _internal_high() const;
  void _internal_set_high(double value);

  public:
  // double low = 6;
  void clear_low() ;
  double low() const;
  void set_low(double value);

  private:
  double _internal_low() const;
  void _internal_set_low(double value);

  public:
  // double close = 7;
  void clear_close() ;
  double close() const;
  void set_close(double value);

  private:
  double _internal_close() const;
  void _internal_set_close(double value);

  public:
  // double volume = 8;
  void clear_volume() ;
  double volume() const;
  void set_volume(double value);

  private:
  double _internal_volume() const;
  void _internal_set_volume(double value);

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:chart_api.DataPoint)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 1,
      49, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const DataPoint& from_msg);
    ::google::protobuf::RepeatedPtrField< ::chart_api::Indicator > indicators_;
    ::google::protobuf::internal::ArenaStringPtr time_;
    ::google::protobuf::internal::ArenaStringPtr timestamp_;
    double open_;
    double high_;
    double low_;
    double close_;
    double volume_;
    ::int32_t id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetDataResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.GetDataResponse) */ {
 public:
  inline GetDataResponse() : GetDataResponse(nullptr) {}
  ~GetDataResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetDataResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetDataResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetDataResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetDataResponse(const GetDataResponse& from) : GetDataResponse(nullptr, from) {}
  inline GetDataResponse(GetDataResponse&& from) noexcept
      : GetDataResponse(nullptr, std::move(from)) {}
  inline GetDataResponse& operator=(const GetDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDataResponse& operator=(GetDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetDataResponse*>(
        &_GetDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(GetDataResponse& a, GetDataResponse& b) { a.Swap(&b); }
  inline void Swap(GetDataResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetDataResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetDataResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetDataResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetDataResponse& from) { GetDataResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetDataResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetDataResponse"; }

 protected:
  explicit GetDataResponse(::google::protobuf::Arena* arena);
  GetDataResponse(::google::protobuf::Arena* arena, const GetDataResponse& from);
  GetDataResponse(::google::protobuf::Arena* arena, GetDataResponse&& from) noexcept
      : GetDataResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated .chart_api.DataPoint data = 1;
  int data_size() const;
  private:
  int _internal_data_size() const;

  public:
  void clear_data() ;
  ::chart_api::DataPoint* mutable_data(int index);
  ::google::protobuf::RepeatedPtrField<::chart_api::DataPoint>* mutable_data();

  private:
  const ::google::protobuf::RepeatedPtrField<::chart_api::DataPoint>& _internal_data() const;
  ::google::protobuf::RepeatedPtrField<::chart_api::DataPoint>* _internal_mutable_data();
  public:
  const ::chart_api::DataPoint& data(int index) const;
  ::chart_api::DataPoint* add_data();
  const ::google::protobuf::RepeatedPtrField<::chart_api::DataPoint>& data() const;
  // @@protoc_insertion_point(class_scope:chart_api.GetDataResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetDataResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::chart_api::DataPoint > data_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ExchangeData final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.ExchangeData) */ {
 public:
  inline ExchangeData() : ExchangeData(nullptr) {}
  ~ExchangeData() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(ExchangeData* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(ExchangeData));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR ExchangeData(
      ::google::protobuf::internal::ConstantInitialized);

  inline ExchangeData(const ExchangeData& from) : ExchangeData(nullptr, from) {}
  inline ExchangeData(ExchangeData&& from) noexcept
      : ExchangeData(nullptr, std::move(from)) {}
  inline ExchangeData& operator=(const ExchangeData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExchangeData& operator=(ExchangeData&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExchangeData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExchangeData* internal_default_instance() {
    return reinterpret_cast<const ExchangeData*>(
        &_ExchangeData_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(ExchangeData& a, ExchangeData& b) { a.Swap(&b); }
  inline void Swap(ExchangeData* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExchangeData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExchangeData* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<ExchangeData>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ExchangeData& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const ExchangeData& from) { ExchangeData::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(ExchangeData* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.ExchangeData"; }

 protected:
  explicit ExchangeData(::google::protobuf::Arena* arena);
  ExchangeData(::google::protobuf::Arena* arena, const ExchangeData& from);
  ExchangeData(::google::protobuf::Arena* arena, ExchangeData&& from) noexcept
      : ExchangeData(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kExchangesFieldNumber = 1,
  };
  // map<string, .chart_api.MarketData> exchanges = 1;
  int exchanges_size() const;
  private:
  int _internal_exchanges_size() const;

  public:
  void clear_exchanges() ;
  const ::google::protobuf::Map<std::string, ::chart_api::MarketData>& exchanges() const;
  ::google::protobuf::Map<std::string, ::chart_api::MarketData>* mutable_exchanges();

  private:
  const ::google::protobuf::Map<std::string, ::chart_api::MarketData>& _internal_exchanges() const;
  ::google::protobuf::Map<std::string, ::chart_api::MarketData>* _internal_mutable_exchanges();

  public:
  // @@protoc_insertion_point(class_scope:chart_api.ExchangeData)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 2,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const ExchangeData& from_msg);
    ::google::protobuf::internal::MapField<ExchangeData_ExchangesEntry_DoNotUse, std::string, ::chart_api::MarketData,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        exchanges_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetUsersResponse_UsersEntry_DoNotUse final
    : public ::google::protobuf::internal::MapEntry<
          std::string, ::google::protobuf::Message,
          ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
          ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE> {
 public:
  using SuperType = ::google::protobuf::internal::MapEntry<
      std::string, ::google::protobuf::Message,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>;
  GetUsersResponse_UsersEntry_DoNotUse();
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetUsersResponse_UsersEntry_DoNotUse(
      ::google::protobuf::internal::ConstantInitialized);
  explicit GetUsersResponse_UsersEntry_DoNotUse(::google::protobuf::Arena* arena);
  static const GetUsersResponse_UsersEntry_DoNotUse* internal_default_instance() {
    return reinterpret_cast<const GetUsersResponse_UsersEntry_DoNotUse*>(
        &_GetUsersResponse_UsersEntry_DoNotUse_default_instance_);
  }


 private:
  friend class ::google::protobuf::MessageLite;
  friend struct ::TableStruct_chart_5fapi_2eproto;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      49, 2>
      _table_;

  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;
};
// -------------------------------------------------------------------

class GetUsersResponse final
    : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:chart_api.GetUsersResponse) */ {
 public:
  inline GetUsersResponse() : GetUsersResponse(nullptr) {}
  ~GetUsersResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetUsersResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetUsersResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetUsersResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetUsersResponse(const GetUsersResponse& from) : GetUsersResponse(nullptr, from) {}
  inline GetUsersResponse(GetUsersResponse&& from) noexcept
      : GetUsersResponse(nullptr, std::move(from)) {}
  inline GetUsersResponse& operator=(const GetUsersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUsersResponse& operator=(GetUsersResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUsersResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUsersResponse* internal_default_instance() {
    return reinterpret_cast<const GetUsersResponse*>(
        &_GetUsersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(GetUsersResponse& a, GetUsersResponse& b) { a.Swap(&b); }
  inline void Swap(GetUsersResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUsersResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUsersResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetUsersResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetUsersResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetUsersResponse& from) { GetUsersResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetUsersResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "chart_api.GetUsersResponse"; }

 protected:
  explicit GetUsersResponse(::google::protobuf::Arena* arena);
  GetUsersResponse(::google::protobuf::Arena* arena, const GetUsersResponse& from);
  GetUsersResponse(::google::protobuf::Arena* arena, GetUsersResponse&& from) noexcept
      : GetUsersResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kUsersFieldNumber = 1,
  };
  // map<string, .chart_api.ExchangeData> users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;

  public:
  void clear_users() ;
  const ::google::protobuf::Map<std::string, ::chart_api::ExchangeData>& users() const;
  ::google::protobuf::Map<std::string, ::chart_api::ExchangeData>* mutable_users();

  private:
  const ::google::protobuf::Map<std::string, ::chart_api::ExchangeData>& _internal_users() const;
  ::google::protobuf::Map<std::string, ::chart_api::ExchangeData>* _internal_mutable_users();

  public:
  // @@protoc_insertion_point(class_scope:chart_api.GetUsersResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 2,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetUsersResponse& from_msg);
    ::google::protobuf::internal::MapField<GetUsersResponse_UsersEntry_DoNotUse, std::string, ::chart_api::ExchangeData,
                      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
                      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE>
        users_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_chart_5fapi_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetAlgosRequest

// -------------------------------------------------------------------

// GetAlgosResponse

// repeated string algos = 1;
inline int GetAlgosResponse::_internal_algos_size() const {
  return _internal_algos().size();
}
inline int GetAlgosResponse::algos_size() const {
  return _internal_algos_size();
}
inline void GetAlgosResponse::clear_algos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algos_.Clear();
}
inline std::string* GetAlgosResponse::add_algos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_algos()->Add();
  // @@protoc_insertion_point(field_add_mutable:chart_api.GetAlgosResponse.algos)
  return _s;
}
inline const std::string& GetAlgosResponse::algos(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.GetAlgosResponse.algos)
  return _internal_algos().Get(index);
}
inline std::string* GetAlgosResponse::mutable_algos(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chart_api.GetAlgosResponse.algos)
  return _internal_mutable_algos()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GetAlgosResponse::set_algos(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_algos()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:chart_api.GetAlgosResponse.algos)
}
template <typename Arg_, typename... Args_>
inline void GetAlgosResponse::add_algos(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_algos(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:chart_api.GetAlgosResponse.algos)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetAlgosResponse::algos() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chart_api.GetAlgosResponse.algos)
  return _internal_algos();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetAlgosResponse::mutable_algos() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chart_api.GetAlgosResponse.algos)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_algos();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetAlgosResponse::_internal_algos() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.algos_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetAlgosResponse::_internal_mutable_algos() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.algos_;
}

// -------------------------------------------------------------------

// GetStreamsByAlgoRequest

// string algo = 1;
inline void GetStreamsByAlgoRequest::clear_algo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.ClearToEmpty();
}
inline const std::string& GetStreamsByAlgoRequest::algo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.GetStreamsByAlgoRequest.algo)
  return _internal_algo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetStreamsByAlgoRequest::set_algo(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.GetStreamsByAlgoRequest.algo)
}
inline std::string* GetStreamsByAlgoRequest::mutable_algo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_algo();
  // @@protoc_insertion_point(field_mutable:chart_api.GetStreamsByAlgoRequest.algo)
  return _s;
}
inline const std::string& GetStreamsByAlgoRequest::_internal_algo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.algo_.Get();
}
inline void GetStreamsByAlgoRequest::_internal_set_algo(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.Set(value, GetArena());
}
inline std::string* GetStreamsByAlgoRequest::_internal_mutable_algo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.algo_.Mutable( GetArena());
}
inline std::string* GetStreamsByAlgoRequest::release_algo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.GetStreamsByAlgoRequest.algo)
  return _impl_.algo_.Release();
}
inline void GetStreamsByAlgoRequest::set_allocated_algo(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.algo_.IsDefault()) {
    _impl_.algo_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.GetStreamsByAlgoRequest.algo)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// IndicatorParam

// string type = 1;
inline void IndicatorParam::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& IndicatorParam::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.IndicatorParam.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IndicatorParam::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.IndicatorParam.type)
}
inline std::string* IndicatorParam::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:chart_api.IndicatorParam.type)
  return _s;
}
inline const std::string& IndicatorParam::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void IndicatorParam::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* IndicatorParam::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* IndicatorParam::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.IndicatorParam.type)
  return _impl_.type_.Release();
}
inline void IndicatorParam::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.IndicatorParam.type)
}

// map<string, string> param = 2;
inline int IndicatorParam::_internal_param_size() const {
  return _internal_param().size();
}
inline int IndicatorParam::param_size() const {
  return _internal_param_size();
}
inline void IndicatorParam::clear_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.param_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& IndicatorParam::_internal_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.param_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& IndicatorParam::param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:chart_api.IndicatorParam.param)
  return _internal_param();
}
inline ::google::protobuf::Map<std::string, std::string>* IndicatorParam::_internal_mutable_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.param_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* IndicatorParam::mutable_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:chart_api.IndicatorParam.param)
  return _internal_mutable_param();
}

// -------------------------------------------------------------------

// StreamData

// int32 id = 1;
inline void StreamData::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t StreamData::id() const {
  // @@protoc_insertion_point(field_get:chart_api.StreamData.id)
  return _internal_id();
}
inline void StreamData::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chart_api.StreamData.id)
}
inline ::int32_t StreamData::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void StreamData::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string user = 2;
inline void StreamData::clear_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.ClearToEmpty();
}
inline const std::string& StreamData::user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.StreamData.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamData::set_user(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.StreamData.user)
}
inline std::string* StreamData::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:chart_api.StreamData.user)
  return _s;
}
inline const std::string& StreamData::_internal_user() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_.Get();
}
inline void StreamData::_internal_set_user(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.Set(value, GetArena());
}
inline std::string* StreamData::_internal_mutable_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_.Mutable( GetArena());
}
inline std::string* StreamData::release_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.StreamData.user)
  return _impl_.user_.Release();
}
inline void StreamData::set_allocated_user(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.StreamData.user)
}

// string coin = 3;
inline void StreamData::clear_coin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_.ClearToEmpty();
}
inline const std::string& StreamData::coin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.StreamData.coin)
  return _internal_coin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamData::set_coin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.StreamData.coin)
}
inline std::string* StreamData::mutable_coin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_coin();
  // @@protoc_insertion_point(field_mutable:chart_api.StreamData.coin)
  return _s;
}
inline const std::string& StreamData::_internal_coin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coin_.Get();
}
inline void StreamData::_internal_set_coin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_.Set(value, GetArena());
}
inline std::string* StreamData::_internal_mutable_coin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.coin_.Mutable( GetArena());
}
inline std::string* StreamData::release_coin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.StreamData.coin)
  return _impl_.coin_.Release();
}
inline void StreamData::set_allocated_coin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.coin_.IsDefault()) {
    _impl_.coin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.StreamData.coin)
}

// string coin_second = 4;
inline void StreamData::clear_coin_second() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_second_.ClearToEmpty();
}
inline const std::string& StreamData::coin_second() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.StreamData.coin_second)
  return _internal_coin_second();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamData::set_coin_second(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_second_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.StreamData.coin_second)
}
inline std::string* StreamData::mutable_coin_second() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_coin_second();
  // @@protoc_insertion_point(field_mutable:chart_api.StreamData.coin_second)
  return _s;
}
inline const std::string& StreamData::_internal_coin_second() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coin_second_.Get();
}
inline void StreamData::_internal_set_coin_second(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_second_.Set(value, GetArena());
}
inline std::string* StreamData::_internal_mutable_coin_second() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.coin_second_.Mutable( GetArena());
}
inline std::string* StreamData::release_coin_second() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.StreamData.coin_second)
  return _impl_.coin_second_.Release();
}
inline void StreamData::set_allocated_coin_second(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_second_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.coin_second_.IsDefault()) {
    _impl_.coin_second_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.StreamData.coin_second)
}

// string timeframe = 5;
inline void StreamData::clear_timeframe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeframe_.ClearToEmpty();
}
inline const std::string& StreamData::timeframe() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.StreamData.timeframe)
  return _internal_timeframe();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamData::set_timeframe(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeframe_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.StreamData.timeframe)
}
inline std::string* StreamData::mutable_timeframe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timeframe();
  // @@protoc_insertion_point(field_mutable:chart_api.StreamData.timeframe)
  return _s;
}
inline const std::string& StreamData::_internal_timeframe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeframe_.Get();
}
inline void StreamData::_internal_set_timeframe(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeframe_.Set(value, GetArena());
}
inline std::string* StreamData::_internal_mutable_timeframe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timeframe_.Mutable( GetArena());
}
inline std::string* StreamData::release_timeframe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.StreamData.timeframe)
  return _impl_.timeframe_.Release();
}
inline void StreamData::set_allocated_timeframe(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeframe_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timeframe_.IsDefault()) {
    _impl_.timeframe_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.StreamData.timeframe)
}

// string algo = 6;
inline void StreamData::clear_algo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.ClearToEmpty();
}
inline const std::string& StreamData::algo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.StreamData.algo)
  return _internal_algo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StreamData::set_algo(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.StreamData.algo)
}
inline std::string* StreamData::mutable_algo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_algo();
  // @@protoc_insertion_point(field_mutable:chart_api.StreamData.algo)
  return _s;
}
inline const std::string& StreamData::_internal_algo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.algo_.Get();
}
inline void StreamData::_internal_set_algo(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.Set(value, GetArena());
}
inline std::string* StreamData::_internal_mutable_algo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.algo_.Mutable( GetArena());
}
inline std::string* StreamData::release_algo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.StreamData.algo)
  return _impl_.algo_.Release();
}
inline void StreamData::set_allocated_algo(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.algo_.IsDefault()) {
    _impl_.algo_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.StreamData.algo)
}

// int32 price_decimal = 7;
inline void StreamData::clear_price_decimal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_decimal_ = 0;
}
inline ::int32_t StreamData::price_decimal() const {
  // @@protoc_insertion_point(field_get:chart_api.StreamData.price_decimal)
  return _internal_price_decimal();
}
inline void StreamData::set_price_decimal(::int32_t value) {
  _internal_set_price_decimal(value);
  // @@protoc_insertion_point(field_set:chart_api.StreamData.price_decimal)
}
inline ::int32_t StreamData::_internal_price_decimal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_decimal_;
}
inline void StreamData::_internal_set_price_decimal(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_decimal_ = value;
}

// int32 size_decimal = 8;
inline void StreamData::clear_size_decimal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_decimal_ = 0;
}
inline ::int32_t StreamData::size_decimal() const {
  // @@protoc_insertion_point(field_get:chart_api.StreamData.size_decimal)
  return _internal_size_decimal();
}
inline void StreamData::set_size_decimal(::int32_t value) {
  _internal_set_size_decimal(value);
  // @@protoc_insertion_point(field_set:chart_api.StreamData.size_decimal)
}
inline ::int32_t StreamData::_internal_size_decimal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.size_decimal_;
}
inline void StreamData::_internal_set_size_decimal(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.size_decimal_ = value;
}

// repeated .chart_api.IndicatorParam indicator_param = 9;
inline int StreamData::_internal_indicator_param_size() const {
  return _internal_indicator_param().size();
}
inline int StreamData::indicator_param_size() const {
  return _internal_indicator_param_size();
}
inline void StreamData::clear_indicator_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indicator_param_.Clear();
}
inline ::chart_api::IndicatorParam* StreamData::mutable_indicator_param(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chart_api.StreamData.indicator_param)
  return _internal_mutable_indicator_param()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::IndicatorParam>* StreamData::mutable_indicator_param()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chart_api.StreamData.indicator_param)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_indicator_param();
}
inline const ::chart_api::IndicatorParam& StreamData::indicator_param(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.StreamData.indicator_param)
  return _internal_indicator_param().Get(index);
}
inline ::chart_api::IndicatorParam* StreamData::add_indicator_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::chart_api::IndicatorParam* _add = _internal_mutable_indicator_param()->Add();
  // @@protoc_insertion_point(field_add:chart_api.StreamData.indicator_param)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::IndicatorParam>& StreamData::indicator_param() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chart_api.StreamData.indicator_param)
  return _internal_indicator_param();
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::IndicatorParam>&
StreamData::_internal_indicator_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.indicator_param_;
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::IndicatorParam>*
StreamData::_internal_mutable_indicator_param() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.indicator_param_;
}

// -------------------------------------------------------------------

// GetStreamsByAlgoResponse

// repeated .chart_api.StreamData streams = 1;
inline int GetStreamsByAlgoResponse::_internal_streams_size() const {
  return _internal_streams().size();
}
inline int GetStreamsByAlgoResponse::streams_size() const {
  return _internal_streams_size();
}
inline void GetStreamsByAlgoResponse::clear_streams() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.streams_.Clear();
}
inline ::chart_api::StreamData* GetStreamsByAlgoResponse::mutable_streams(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chart_api.GetStreamsByAlgoResponse.streams)
  return _internal_mutable_streams()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::StreamData>* GetStreamsByAlgoResponse::mutable_streams()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chart_api.GetStreamsByAlgoResponse.streams)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_streams();
}
inline const ::chart_api::StreamData& GetStreamsByAlgoResponse::streams(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.GetStreamsByAlgoResponse.streams)
  return _internal_streams().Get(index);
}
inline ::chart_api::StreamData* GetStreamsByAlgoResponse::add_streams() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::chart_api::StreamData* _add = _internal_mutable_streams()->Add();
  // @@protoc_insertion_point(field_add:chart_api.GetStreamsByAlgoResponse.streams)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::StreamData>& GetStreamsByAlgoResponse::streams() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chart_api.GetStreamsByAlgoResponse.streams)
  return _internal_streams();
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::StreamData>&
GetStreamsByAlgoResponse::_internal_streams() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.streams_;
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::StreamData>*
GetStreamsByAlgoResponse::_internal_mutable_streams() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.streams_;
}

// -------------------------------------------------------------------

// GetDataRequest

// int32 id = 1;
inline void GetDataRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t GetDataRequest::id() const {
  // @@protoc_insertion_point(field_get:chart_api.GetDataRequest.id)
  return _internal_id();
}
inline void GetDataRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chart_api.GetDataRequest.id)
}
inline ::int32_t GetDataRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void GetDataRequest::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// int64 from_timestamp = 2;
inline void GetDataRequest::clear_from_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_timestamp_ = ::int64_t{0};
}
inline ::int64_t GetDataRequest::from_timestamp() const {
  // @@protoc_insertion_point(field_get:chart_api.GetDataRequest.from_timestamp)
  return _internal_from_timestamp();
}
inline void GetDataRequest::set_from_timestamp(::int64_t value) {
  _internal_set_from_timestamp(value);
  // @@protoc_insertion_point(field_set:chart_api.GetDataRequest.from_timestamp)
}
inline ::int64_t GetDataRequest::_internal_from_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_timestamp_;
}
inline void GetDataRequest::_internal_set_from_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_timestamp_ = value;
}

// int32 limit = 3;
inline void GetDataRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0;
}
inline ::int32_t GetDataRequest::limit() const {
  // @@protoc_insertion_point(field_get:chart_api.GetDataRequest.limit)
  return _internal_limit();
}
inline void GetDataRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:chart_api.GetDataRequest.limit)
}
inline ::int32_t GetDataRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void GetDataRequest::_internal_set_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// -------------------------------------------------------------------

// DataPoint

// int32 id = 1;
inline void DataPoint::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t DataPoint::id() const {
  // @@protoc_insertion_point(field_get:chart_api.DataPoint.id)
  return _internal_id();
}
inline void DataPoint::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chart_api.DataPoint.id)
}
inline ::int32_t DataPoint::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void DataPoint::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string time = 2;
inline void DataPoint::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.ClearToEmpty();
}
inline const std::string& DataPoint::time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.DataPoint.time)
  return _internal_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPoint::set_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.DataPoint.time)
}
inline std::string* DataPoint::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:chart_api.DataPoint.time)
  return _s;
}
inline const std::string& DataPoint::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_.Get();
}
inline void DataPoint::_internal_set_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.Set(value, GetArena());
}
inline std::string* DataPoint::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.time_.Mutable( GetArena());
}
inline std::string* DataPoint::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.DataPoint.time)
  return _impl_.time_.Release();
}
inline void DataPoint::set_allocated_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.time_.IsDefault()) {
    _impl_.time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.DataPoint.time)
}

// string timestamp = 3;
inline void DataPoint::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& DataPoint::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.DataPoint.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DataPoint::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.DataPoint.timestamp)
}
inline std::string* DataPoint::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:chart_api.DataPoint.timestamp)
  return _s;
}
inline const std::string& DataPoint::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void DataPoint::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* DataPoint::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* DataPoint::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.DataPoint.timestamp)
  return _impl_.timestamp_.Release();
}
inline void DataPoint::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.DataPoint.timestamp)
}

// double open = 4;
inline void DataPoint::clear_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_ = 0;
}
inline double DataPoint::open() const {
  // @@protoc_insertion_point(field_get:chart_api.DataPoint.open)
  return _internal_open();
}
inline void DataPoint::set_open(double value) {
  _internal_set_open(value);
  // @@protoc_insertion_point(field_set:chart_api.DataPoint.open)
}
inline double DataPoint::_internal_open() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.open_;
}
inline void DataPoint::_internal_set_open(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.open_ = value;
}

// double high = 5;
inline void DataPoint::clear_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = 0;
}
inline double DataPoint::high() const {
  // @@protoc_insertion_point(field_get:chart_api.DataPoint.high)
  return _internal_high();
}
inline void DataPoint::set_high(double value) {
  _internal_set_high(value);
  // @@protoc_insertion_point(field_set:chart_api.DataPoint.high)
}
inline double DataPoint::_internal_high() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.high_;
}
inline void DataPoint::_internal_set_high(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.high_ = value;
}

// double low = 6;
inline void DataPoint::clear_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = 0;
}
inline double DataPoint::low() const {
  // @@protoc_insertion_point(field_get:chart_api.DataPoint.low)
  return _internal_low();
}
inline void DataPoint::set_low(double value) {
  _internal_set_low(value);
  // @@protoc_insertion_point(field_set:chart_api.DataPoint.low)
}
inline double DataPoint::_internal_low() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.low_;
}
inline void DataPoint::_internal_set_low(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.low_ = value;
}

// double close = 7;
inline void DataPoint::clear_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = 0;
}
inline double DataPoint::close() const {
  // @@protoc_insertion_point(field_get:chart_api.DataPoint.close)
  return _internal_close();
}
inline void DataPoint::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:chart_api.DataPoint.close)
}
inline double DataPoint::_internal_close() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_;
}
inline void DataPoint::_internal_set_close(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = value;
}

// double volume = 8;
inline void DataPoint::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = 0;
}
inline double DataPoint::volume() const {
  // @@protoc_insertion_point(field_get:chart_api.DataPoint.volume)
  return _internal_volume();
}
inline void DataPoint::set_volume(double value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:chart_api.DataPoint.volume)
}
inline double DataPoint::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline void DataPoint::_internal_set_volume(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = value;
}

// repeated .chart_api.Indicator indicators = 9;
inline int DataPoint::_internal_indicators_size() const {
  return _internal_indicators().size();
}
inline int DataPoint::indicators_size() const {
  return _internal_indicators_size();
}
inline void DataPoint::clear_indicators() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indicators_.Clear();
}
inline ::chart_api::Indicator* DataPoint::mutable_indicators(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chart_api.DataPoint.indicators)
  return _internal_mutable_indicators()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::Indicator>* DataPoint::mutable_indicators()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chart_api.DataPoint.indicators)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_indicators();
}
inline const ::chart_api::Indicator& DataPoint::indicators(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.DataPoint.indicators)
  return _internal_indicators().Get(index);
}
inline ::chart_api::Indicator* DataPoint::add_indicators() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::chart_api::Indicator* _add = _internal_mutable_indicators()->Add();
  // @@protoc_insertion_point(field_add:chart_api.DataPoint.indicators)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::Indicator>& DataPoint::indicators() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chart_api.DataPoint.indicators)
  return _internal_indicators();
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::Indicator>&
DataPoint::_internal_indicators() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.indicators_;
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::Indicator>*
DataPoint::_internal_mutable_indicators() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.indicators_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Indicator

// string type = 1;
inline void Indicator::clear_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.ClearToEmpty();
}
inline const std::string& Indicator::type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.Indicator.type)
  return _internal_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Indicator::set_type(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.Indicator.type)
}
inline std::string* Indicator::mutable_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:chart_api.Indicator.type)
  return _s;
}
inline const std::string& Indicator::_internal_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.type_.Get();
}
inline void Indicator::_internal_set_type(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.Set(value, GetArena());
}
inline std::string* Indicator::_internal_mutable_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.type_.Mutable( GetArena());
}
inline std::string* Indicator::release_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.Indicator.type)
  return _impl_.type_.Release();
}
inline void Indicator::set_allocated_type(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.type_.IsDefault()) {
    _impl_.type_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.Indicator.type)
}

// string name = 2;
inline void Indicator::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Indicator::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.Indicator.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Indicator::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.Indicator.name)
}
inline std::string* Indicator::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:chart_api.Indicator.name)
  return _s;
}
inline const std::string& Indicator::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Indicator::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Indicator::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Indicator::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.Indicator.name)
  return _impl_.name_.Release();
}
inline void Indicator::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.Indicator.name)
}

// map<string, string> param = 3;
inline int Indicator::_internal_param_size() const {
  return _internal_param().size();
}
inline int Indicator::param_size() const {
  return _internal_param_size();
}
inline void Indicator::clear_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.param_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Indicator::_internal_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.param_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Indicator::param() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:chart_api.Indicator.param)
  return _internal_param();
}
inline ::google::protobuf::Map<std::string, std::string>* Indicator::_internal_mutable_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.param_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Indicator::mutable_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:chart_api.Indicator.param)
  return _internal_mutable_param();
}

// repeated .chart_api.Volume volume = 4;
inline int Indicator::_internal_volume_size() const {
  return _internal_volume().size();
}
inline int Indicator::volume_size() const {
  return _internal_volume_size();
}
inline void Indicator::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_.Clear();
}
inline ::chart_api::Volume* Indicator::mutable_volume(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chart_api.Indicator.volume)
  return _internal_mutable_volume()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::Volume>* Indicator::mutable_volume()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chart_api.Indicator.volume)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_volume();
}
inline const ::chart_api::Volume& Indicator::volume(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.Indicator.volume)
  return _internal_volume().Get(index);
}
inline ::chart_api::Volume* Indicator::add_volume() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::chart_api::Volume* _add = _internal_mutable_volume()->Add();
  // @@protoc_insertion_point(field_add:chart_api.Indicator.volume)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::Volume>& Indicator::volume() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chart_api.Indicator.volume)
  return _internal_volume();
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::Volume>&
Indicator::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::Volume>*
Indicator::_internal_mutable_volume() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.volume_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Volume

// map<string, string> params = 1;
inline int Volume::_internal_params_size() const {
  return _internal_params().size();
}
inline int Volume::params_size() const {
  return _internal_params_size();
}
inline void Volume::clear_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.params_.Clear();
}
inline const ::google::protobuf::Map<std::string, std::string>& Volume::_internal_params() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.params_.GetMap();
}
inline const ::google::protobuf::Map<std::string, std::string>& Volume::params() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:chart_api.Volume.params)
  return _internal_params();
}
inline ::google::protobuf::Map<std::string, std::string>* Volume::_internal_mutable_params() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.params_.MutableMap();
}
inline ::google::protobuf::Map<std::string, std::string>* Volume::mutable_params() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:chart_api.Volume.params)
  return _internal_mutable_params();
}

// -------------------------------------------------------------------

// GetDataResponse

// repeated .chart_api.DataPoint data = 1;
inline int GetDataResponse::_internal_data_size() const {
  return _internal_data().size();
}
inline int GetDataResponse::data_size() const {
  return _internal_data_size();
}
inline void GetDataResponse::clear_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.data_.Clear();
}
inline ::chart_api::DataPoint* GetDataResponse::mutable_data(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chart_api.GetDataResponse.data)
  return _internal_mutable_data()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::DataPoint>* GetDataResponse::mutable_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chart_api.GetDataResponse.data)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_data();
}
inline const ::chart_api::DataPoint& GetDataResponse::data(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.GetDataResponse.data)
  return _internal_data().Get(index);
}
inline ::chart_api::DataPoint* GetDataResponse::add_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::chart_api::DataPoint* _add = _internal_mutable_data()->Add();
  // @@protoc_insertion_point(field_add:chart_api.GetDataResponse.data)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::DataPoint>& GetDataResponse::data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chart_api.GetDataResponse.data)
  return _internal_data();
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::DataPoint>&
GetDataResponse::_internal_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.data_;
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::DataPoint>*
GetDataResponse::_internal_mutable_data() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.data_;
}

// -------------------------------------------------------------------

// GetLogsRequest

// int32 id = 1;
inline void GetLogsRequest::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t GetLogsRequest::id() const {
  // @@protoc_insertion_point(field_get:chart_api.GetLogsRequest.id)
  return _internal_id();
}
inline void GetLogsRequest::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:chart_api.GetLogsRequest.id)
}
inline ::int32_t GetLogsRequest::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void GetLogsRequest::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// int64 from_timestamp = 2;
inline void GetLogsRequest::clear_from_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_timestamp_ = ::int64_t{0};
}
inline ::int64_t GetLogsRequest::from_timestamp() const {
  // @@protoc_insertion_point(field_get:chart_api.GetLogsRequest.from_timestamp)
  return _internal_from_timestamp();
}
inline void GetLogsRequest::set_from_timestamp(::int64_t value) {
  _internal_set_from_timestamp(value);
  // @@protoc_insertion_point(field_set:chart_api.GetLogsRequest.from_timestamp)
}
inline ::int64_t GetLogsRequest::_internal_from_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.from_timestamp_;
}
inline void GetLogsRequest::_internal_set_from_timestamp(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.from_timestamp_ = value;
}

// bool orders_only = 3;
inline void GetLogsRequest::clear_orders_only() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orders_only_ = false;
}
inline bool GetLogsRequest::orders_only() const {
  // @@protoc_insertion_point(field_get:chart_api.GetLogsRequest.orders_only)
  return _internal_orders_only();
}
inline void GetLogsRequest::set_orders_only(bool value) {
  _internal_set_orders_only(value);
  // @@protoc_insertion_point(field_set:chart_api.GetLogsRequest.orders_only)
}
inline bool GetLogsRequest::_internal_orders_only() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.orders_only_;
}
inline void GetLogsRequest::_internal_set_orders_only(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.orders_only_ = value;
}

// int32 limit = 4;
inline void GetLogsRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0;
}
inline ::int32_t GetLogsRequest::limit() const {
  // @@protoc_insertion_point(field_get:chart_api.GetLogsRequest.limit)
  return _internal_limit();
}
inline void GetLogsRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:chart_api.GetLogsRequest.limit)
}
inline ::int32_t GetLogsRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void GetLogsRequest::_internal_set_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// string mode_time = 5;
inline void GetLogsRequest::clear_mode_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_time_.ClearToEmpty();
}
inline const std::string& GetLogsRequest::mode_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.GetLogsRequest.mode_time)
  return _internal_mode_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetLogsRequest::set_mode_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.GetLogsRequest.mode_time)
}
inline std::string* GetLogsRequest::mutable_mode_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mode_time();
  // @@protoc_insertion_point(field_mutable:chart_api.GetLogsRequest.mode_time)
  return _s;
}
inline const std::string& GetLogsRequest::_internal_mode_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mode_time_.Get();
}
inline void GetLogsRequest::_internal_set_mode_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_time_.Set(value, GetArena());
}
inline std::string* GetLogsRequest::_internal_mutable_mode_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mode_time_.Mutable( GetArena());
}
inline std::string* GetLogsRequest::release_mode_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.GetLogsRequest.mode_time)
  return _impl_.mode_time_.Release();
}
inline void GetLogsRequest::set_allocated_mode_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mode_time_.IsDefault()) {
    _impl_.mode_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.GetLogsRequest.mode_time)
}

// -------------------------------------------------------------------

// LogEntry

// string time = 2;
inline void LogEntry::clear_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.ClearToEmpty();
}
inline const std::string& LogEntry::time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.time)
  return _internal_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.time)
}
inline std::string* LogEntry::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.time)
  return _s;
}
inline const std::string& LogEntry::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_.Get();
}
inline void LogEntry::_internal_set_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.time_.Mutable( GetArena());
}
inline std::string* LogEntry::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.time)
  return _impl_.time_.Release();
}
inline void LogEntry::set_allocated_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.time_.IsDefault()) {
    _impl_.time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.time)
}

// string timestamp = 3;
inline void LogEntry::clear_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.ClearToEmpty();
}
inline const std::string& LogEntry::timestamp() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.timestamp)
  return _internal_timestamp();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_timestamp(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.timestamp)
}
inline std::string* LogEntry::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.timestamp)
  return _s;
}
inline const std::string& LogEntry::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamp_.Get();
}
inline void LogEntry::_internal_set_timestamp(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timestamp_.Mutable( GetArena());
}
inline std::string* LogEntry::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.timestamp)
  return _impl_.timestamp_.Release();
}
inline void LogEntry::set_allocated_timestamp(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamp_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timestamp_.IsDefault()) {
    _impl_.timestamp_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.timestamp)
}

// string algo = 6;
inline void LogEntry::clear_algo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.ClearToEmpty();
}
inline const std::string& LogEntry::algo() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.algo)
  return _internal_algo();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_algo(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.algo)
}
inline std::string* LogEntry::mutable_algo() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_algo();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.algo)
  return _s;
}
inline const std::string& LogEntry::_internal_algo() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.algo_.Get();
}
inline void LogEntry::_internal_set_algo(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_algo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.algo_.Mutable( GetArena());
}
inline std::string* LogEntry::release_algo() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.algo)
  return _impl_.algo_.Release();
}
inline void LogEntry::set_allocated_algo(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.algo_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.algo_.IsDefault()) {
    _impl_.algo_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.algo)
}

// string timeframe = 8;
inline void LogEntry::clear_timeframe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeframe_.ClearToEmpty();
}
inline const std::string& LogEntry::timeframe() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.timeframe)
  return _internal_timeframe();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_timeframe(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeframe_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.timeframe)
}
inline std::string* LogEntry::mutable_timeframe() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_timeframe();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.timeframe)
  return _s;
}
inline const std::string& LogEntry::_internal_timeframe() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timeframe_.Get();
}
inline void LogEntry::_internal_set_timeframe(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeframe_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_timeframe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.timeframe_.Mutable( GetArena());
}
inline std::string* LogEntry::release_timeframe() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.timeframe)
  return _impl_.timeframe_.Release();
}
inline void LogEntry::set_allocated_timeframe(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timeframe_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.timeframe_.IsDefault()) {
    _impl_.timeframe_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.timeframe)
}

// int32 block_id = 10;
inline void LogEntry::clear_block_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = 0;
}
inline ::int32_t LogEntry::block_id() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.block_id)
  return _internal_block_id();
}
inline void LogEntry::set_block_id(::int32_t value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.block_id)
}
inline ::int32_t LogEntry::_internal_block_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_id_;
}
inline void LogEntry::_internal_set_block_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_id_ = value;
}

// string block_name = 11;
inline void LogEntry::clear_block_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_name_.ClearToEmpty();
}
inline const std::string& LogEntry::block_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.block_name)
  return _internal_block_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_block_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.block_name)
}
inline std::string* LogEntry::mutable_block_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_block_name();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.block_name)
  return _s;
}
inline const std::string& LogEntry::_internal_block_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.block_name_.Get();
}
inline void LogEntry::_internal_set_block_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_name_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_block_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.block_name_.Mutable( GetArena());
}
inline std::string* LogEntry::release_block_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.block_name)
  return _impl_.block_name_.Release();
}
inline void LogEntry::set_allocated_block_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.block_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.block_name_.IsDefault()) {
    _impl_.block_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.block_name)
}

// string indicator_param = 12;
inline void LogEntry::clear_indicator_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indicator_param_.ClearToEmpty();
}
inline const std::string& LogEntry::indicator_param() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.indicator_param)
  return _internal_indicator_param();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_indicator_param(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indicator_param_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.indicator_param)
}
inline std::string* LogEntry::mutable_indicator_param() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_indicator_param();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.indicator_param)
  return _s;
}
inline const std::string& LogEntry::_internal_indicator_param() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.indicator_param_.Get();
}
inline void LogEntry::_internal_set_indicator_param(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indicator_param_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_indicator_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.indicator_param_.Mutable( GetArena());
}
inline std::string* LogEntry::release_indicator_param() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.indicator_param)
  return _impl_.indicator_param_.Release();
}
inline void LogEntry::set_allocated_indicator_param(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indicator_param_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.indicator_param_.IsDefault()) {
    _impl_.indicator_param_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.indicator_param)
}

// string vars = 13;
inline void LogEntry::clear_vars() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vars_.ClearToEmpty();
}
inline const std::string& LogEntry::vars() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.vars)
  return _internal_vars();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_vars(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vars_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.vars)
}
inline std::string* LogEntry::mutable_vars() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vars();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.vars)
  return _s;
}
inline const std::string& LogEntry::_internal_vars() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.vars_.Get();
}
inline void LogEntry::_internal_set_vars(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vars_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_vars() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.vars_.Mutable( GetArena());
}
inline std::string* LogEntry::release_vars() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.vars)
  return _impl_.vars_.Release();
}
inline void LogEntry::set_allocated_vars(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.vars_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.vars_.IsDefault()) {
    _impl_.vars_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.vars)
}

// double close = 14;
inline void LogEntry::clear_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = 0;
}
inline double LogEntry::close() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.close)
  return _internal_close();
}
inline void LogEntry::set_close(double value) {
  _internal_set_close(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.close)
}
inline double LogEntry::_internal_close() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_;
}
inline void LogEntry::_internal_set_close(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_ = value;
}

// double balance = 15;
inline void LogEntry::clear_balance() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.balance_ = 0;
}
inline double LogEntry::balance() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.balance)
  return _internal_balance();
}
inline void LogEntry::set_balance(double value) {
  _internal_set_balance(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.balance)
}
inline double LogEntry::_internal_balance() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.balance_;
}
inline void LogEntry::_internal_set_balance(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.balance_ = value;
}

// double equity = 16;
inline void LogEntry::clear_equity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equity_ = 0;
}
inline double LogEntry::equity() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.equity)
  return _internal_equity();
}
inline void LogEntry::set_equity(double value) {
  _internal_set_equity(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.equity)
}
inline double LogEntry::_internal_equity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.equity_;
}
inline void LogEntry::_internal_set_equity(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.equity_ = value;
}

// double money = 17;
inline void LogEntry::clear_money() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.money_ = 0;
}
inline double LogEntry::money() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.money)
  return _internal_money();
}
inline void LogEntry::set_money(double value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.money)
}
inline double LogEntry::_internal_money() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.money_;
}
inline void LogEntry::_internal_set_money(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.money_ = value;
}

// string side = 18;
inline void LogEntry::clear_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.ClearToEmpty();
}
inline const std::string& LogEntry::side() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.side)
  return _internal_side();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_side(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.side)
}
inline std::string* LogEntry::mutable_side() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_side();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.side)
  return _s;
}
inline const std::string& LogEntry::_internal_side() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.side_.Get();
}
inline void LogEntry::_internal_set_side(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.side_.Mutable( GetArena());
}
inline std::string* LogEntry::release_side() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.side)
  return _impl_.side_.Release();
}
inline void LogEntry::set_allocated_side(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.side_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.side_.IsDefault()) {
    _impl_.side_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.side)
}

// double order_leverage_long = 19;
inline void LogEntry::clear_order_leverage_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_leverage_long_ = 0;
}
inline double LogEntry::order_leverage_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_leverage_long)
  return _internal_order_leverage_long();
}
inline void LogEntry::set_order_leverage_long(double value) {
  _internal_set_order_leverage_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_leverage_long)
}
inline double LogEntry::_internal_order_leverage_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_leverage_long_;
}
inline void LogEntry::_internal_set_order_leverage_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_leverage_long_ = value;
}

// double leverage_long = 20;
inline void LogEntry::clear_leverage_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leverage_long_ = 0;
}
inline double LogEntry::leverage_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.leverage_long)
  return _internal_leverage_long();
}
inline void LogEntry::set_leverage_long(double value) {
  _internal_set_leverage_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.leverage_long)
}
inline double LogEntry::_internal_leverage_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leverage_long_;
}
inline void LogEntry::_internal_set_leverage_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leverage_long_ = value;
}

// double order_size_long = 21;
inline void LogEntry::clear_order_size_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_size_long_ = 0;
}
inline double LogEntry::order_size_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_size_long)
  return _internal_order_size_long();
}
inline void LogEntry::set_order_size_long(double value) {
  _internal_set_order_size_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_size_long)
}
inline double LogEntry::_internal_order_size_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_size_long_;
}
inline void LogEntry::_internal_set_order_size_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_size_long_ = value;
}

// double order_price_long = 22;
inline void LogEntry::clear_order_price_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_price_long_ = 0;
}
inline double LogEntry::order_price_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_price_long)
  return _internal_order_price_long();
}
inline void LogEntry::set_order_price_long(double value) {
  _internal_set_order_price_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_price_long)
}
inline double LogEntry::_internal_order_price_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_price_long_;
}
inline void LogEntry::_internal_set_order_price_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_price_long_ = value;
}

// double order_usd_long = 23;
inline void LogEntry::clear_order_usd_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_usd_long_ = 0;
}
inline double LogEntry::order_usd_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_usd_long)
  return _internal_order_usd_long();
}
inline void LogEntry::set_order_usd_long(double value) {
  _internal_set_order_usd_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_usd_long)
}
inline double LogEntry::_internal_order_usd_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_usd_long_;
}
inline void LogEntry::_internal_set_order_usd_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_usd_long_ = value;
}

// string order_type_long = 24;
inline void LogEntry::clear_order_type_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_long_.ClearToEmpty();
}
inline const std::string& LogEntry::order_type_long() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_type_long)
  return _internal_order_type_long();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_order_type_long(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_long_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_type_long)
}
inline std::string* LogEntry::mutable_order_type_long() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_order_type_long();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.order_type_long)
  return _s;
}
inline const std::string& LogEntry::_internal_order_type_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_type_long_.Get();
}
inline void LogEntry::_internal_set_order_type_long(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_long_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_order_type_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.order_type_long_.Mutable( GetArena());
}
inline std::string* LogEntry::release_order_type_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.order_type_long)
  return _impl_.order_type_long_.Release();
}
inline void LogEntry::set_allocated_order_type_long(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_long_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.order_type_long_.IsDefault()) {
    _impl_.order_type_long_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.order_type_long)
}

// double position_size_long = 25;
inline void LogEntry::clear_position_size_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_size_long_ = 0;
}
inline double LogEntry::position_size_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.position_size_long)
  return _internal_position_size_long();
}
inline void LogEntry::set_position_size_long(double value) {
  _internal_set_position_size_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.position_size_long)
}
inline double LogEntry::_internal_position_size_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_size_long_;
}
inline void LogEntry::_internal_set_position_size_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_size_long_ = value;
}

// double position_price_long = 26;
inline void LogEntry::clear_position_price_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_price_long_ = 0;
}
inline double LogEntry::position_price_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.position_price_long)
  return _internal_position_price_long();
}
inline void LogEntry::set_position_price_long(double value) {
  _internal_set_position_price_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.position_price_long)
}
inline double LogEntry::_internal_position_price_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_price_long_;
}
inline void LogEntry::_internal_set_position_price_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_price_long_ = value;
}

// double position_usd_long = 27;
inline void LogEntry::clear_position_usd_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_usd_long_ = 0;
}
inline double LogEntry::position_usd_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.position_usd_long)
  return _internal_position_usd_long();
}
inline void LogEntry::set_position_usd_long(double value) {
  _internal_set_position_usd_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.position_usd_long)
}
inline double LogEntry::_internal_position_usd_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_usd_long_;
}
inline void LogEntry::_internal_set_position_usd_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_usd_long_ = value;
}

// double pnl_usd_long = 28;
inline void LogEntry::clear_pnl_usd_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pnl_usd_long_ = 0;
}
inline double LogEntry::pnl_usd_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.pnl_usd_long)
  return _internal_pnl_usd_long();
}
inline void LogEntry::set_pnl_usd_long(double value) {
  _internal_set_pnl_usd_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.pnl_usd_long)
}
inline double LogEntry::_internal_pnl_usd_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pnl_usd_long_;
}
inline void LogEntry::_internal_set_pnl_usd_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pnl_usd_long_ = value;
}

// double fee_usd_long = 29;
inline void LogEntry::clear_fee_usd_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fee_usd_long_ = 0;
}
inline double LogEntry::fee_usd_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.fee_usd_long)
  return _internal_fee_usd_long();
}
inline void LogEntry::set_fee_usd_long(double value) {
  _internal_set_fee_usd_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.fee_usd_long)
}
inline double LogEntry::_internal_fee_usd_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fee_usd_long_;
}
inline void LogEntry::_internal_set_fee_usd_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fee_usd_long_ = value;
}

// double funding_long = 30;
inline void LogEntry::clear_funding_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.funding_long_ = 0;
}
inline double LogEntry::funding_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.funding_long)
  return _internal_funding_long();
}
inline void LogEntry::set_funding_long(double value) {
  _internal_set_funding_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.funding_long)
}
inline double LogEntry::_internal_funding_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.funding_long_;
}
inline void LogEntry::_internal_set_funding_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.funding_long_ = value;
}

// double rpl_usd_long = 31;
inline void LogEntry::clear_rpl_usd_long() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_usd_long_ = 0;
}
inline double LogEntry::rpl_usd_long() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.rpl_usd_long)
  return _internal_rpl_usd_long();
}
inline void LogEntry::set_rpl_usd_long(double value) {
  _internal_set_rpl_usd_long(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.rpl_usd_long)
}
inline double LogEntry::_internal_rpl_usd_long() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpl_usd_long_;
}
inline void LogEntry::_internal_set_rpl_usd_long(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_usd_long_ = value;
}

// double order_leverage_short = 32;
inline void LogEntry::clear_order_leverage_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_leverage_short_ = 0;
}
inline double LogEntry::order_leverage_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_leverage_short)
  return _internal_order_leverage_short();
}
inline void LogEntry::set_order_leverage_short(double value) {
  _internal_set_order_leverage_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_leverage_short)
}
inline double LogEntry::_internal_order_leverage_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_leverage_short_;
}
inline void LogEntry::_internal_set_order_leverage_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_leverage_short_ = value;
}

// double leverage_short = 33;
inline void LogEntry::clear_leverage_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leverage_short_ = 0;
}
inline double LogEntry::leverage_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.leverage_short)
  return _internal_leverage_short();
}
inline void LogEntry::set_leverage_short(double value) {
  _internal_set_leverage_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.leverage_short)
}
inline double LogEntry::_internal_leverage_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.leverage_short_;
}
inline void LogEntry::_internal_set_leverage_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.leverage_short_ = value;
}

// double order_size_short = 34;
inline void LogEntry::clear_order_size_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_size_short_ = 0;
}
inline double LogEntry::order_size_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_size_short)
  return _internal_order_size_short();
}
inline void LogEntry::set_order_size_short(double value) {
  _internal_set_order_size_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_size_short)
}
inline double LogEntry::_internal_order_size_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_size_short_;
}
inline void LogEntry::_internal_set_order_size_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_size_short_ = value;
}

// double order_price_short = 35;
inline void LogEntry::clear_order_price_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_price_short_ = 0;
}
inline double LogEntry::order_price_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_price_short)
  return _internal_order_price_short();
}
inline void LogEntry::set_order_price_short(double value) {
  _internal_set_order_price_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_price_short)
}
inline double LogEntry::_internal_order_price_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_price_short_;
}
inline void LogEntry::_internal_set_order_price_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_price_short_ = value;
}

// double order_usd_short = 36;
inline void LogEntry::clear_order_usd_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_usd_short_ = 0;
}
inline double LogEntry::order_usd_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_usd_short)
  return _internal_order_usd_short();
}
inline void LogEntry::set_order_usd_short(double value) {
  _internal_set_order_usd_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_usd_short)
}
inline double LogEntry::_internal_order_usd_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_usd_short_;
}
inline void LogEntry::_internal_set_order_usd_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_usd_short_ = value;
}

// string order_type_short = 37;
inline void LogEntry::clear_order_type_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_short_.ClearToEmpty();
}
inline const std::string& LogEntry::order_type_short() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.order_type_short)
  return _internal_order_type_short();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_order_type_short(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_short_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.order_type_short)
}
inline std::string* LogEntry::mutable_order_type_short() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_order_type_short();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.order_type_short)
  return _s;
}
inline const std::string& LogEntry::_internal_order_type_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_type_short_.Get();
}
inline void LogEntry::_internal_set_order_type_short(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_short_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_order_type_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.order_type_short_.Mutable( GetArena());
}
inline std::string* LogEntry::release_order_type_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.order_type_short)
  return _impl_.order_type_short_.Release();
}
inline void LogEntry::set_allocated_order_type_short(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_type_short_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.order_type_short_.IsDefault()) {
    _impl_.order_type_short_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.order_type_short)
}

// double position_usd_short = 38;
inline void LogEntry::clear_position_usd_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_usd_short_ = 0;
}
inline double LogEntry::position_usd_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.position_usd_short)
  return _internal_position_usd_short();
}
inline void LogEntry::set_position_usd_short(double value) {
  _internal_set_position_usd_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.position_usd_short)
}
inline double LogEntry::_internal_position_usd_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_usd_short_;
}
inline void LogEntry::_internal_set_position_usd_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_usd_short_ = value;
}

// double position_size_short = 39;
inline void LogEntry::clear_position_size_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_size_short_ = 0;
}
inline double LogEntry::position_size_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.position_size_short)
  return _internal_position_size_short();
}
inline void LogEntry::set_position_size_short(double value) {
  _internal_set_position_size_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.position_size_short)
}
inline double LogEntry::_internal_position_size_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_size_short_;
}
inline void LogEntry::_internal_set_position_size_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_size_short_ = value;
}

// double position_price_short = 40;
inline void LogEntry::clear_position_price_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_price_short_ = 0;
}
inline double LogEntry::position_price_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.position_price_short)
  return _internal_position_price_short();
}
inline void LogEntry::set_position_price_short(double value) {
  _internal_set_position_price_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.position_price_short)
}
inline double LogEntry::_internal_position_price_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.position_price_short_;
}
inline void LogEntry::_internal_set_position_price_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.position_price_short_ = value;
}

// double pnl_usd_short = 41;
inline void LogEntry::clear_pnl_usd_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pnl_usd_short_ = 0;
}
inline double LogEntry::pnl_usd_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.pnl_usd_short)
  return _internal_pnl_usd_short();
}
inline void LogEntry::set_pnl_usd_short(double value) {
  _internal_set_pnl_usd_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.pnl_usd_short)
}
inline double LogEntry::_internal_pnl_usd_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.pnl_usd_short_;
}
inline void LogEntry::_internal_set_pnl_usd_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.pnl_usd_short_ = value;
}

// double fee_usd_short = 42;
inline void LogEntry::clear_fee_usd_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fee_usd_short_ = 0;
}
inline double LogEntry::fee_usd_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.fee_usd_short)
  return _internal_fee_usd_short();
}
inline void LogEntry::set_fee_usd_short(double value) {
  _internal_set_fee_usd_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.fee_usd_short)
}
inline double LogEntry::_internal_fee_usd_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fee_usd_short_;
}
inline void LogEntry::_internal_set_fee_usd_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fee_usd_short_ = value;
}

// double funding_short = 43;
inline void LogEntry::clear_funding_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.funding_short_ = 0;
}
inline double LogEntry::funding_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.funding_short)
  return _internal_funding_short();
}
inline void LogEntry::set_funding_short(double value) {
  _internal_set_funding_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.funding_short)
}
inline double LogEntry::_internal_funding_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.funding_short_;
}
inline void LogEntry::_internal_set_funding_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.funding_short_ = value;
}

// double rpl_usd_short = 44;
inline void LogEntry::clear_rpl_usd_short() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_usd_short_ = 0;
}
inline double LogEntry::rpl_usd_short() const {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.rpl_usd_short)
  return _internal_rpl_usd_short();
}
inline void LogEntry::set_rpl_usd_short(double value) {
  _internal_set_rpl_usd_short(value);
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.rpl_usd_short)
}
inline double LogEntry::_internal_rpl_usd_short() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.rpl_usd_short_;
}
inline void LogEntry::_internal_set_rpl_usd_short(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rpl_usd_short_ = value;
}

// string user = 45;
inline void LogEntry::clear_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.ClearToEmpty();
}
inline const std::string& LogEntry::user() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.user)
  return _internal_user();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_user(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.user)
}
inline std::string* LogEntry::mutable_user() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.user)
  return _s;
}
inline const std::string& LogEntry::_internal_user() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.user_.Get();
}
inline void LogEntry::_internal_set_user(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.user_.Mutable( GetArena());
}
inline std::string* LogEntry::release_user() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.user)
  return _impl_.user_.Release();
}
inline void LogEntry::set_allocated_user(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.user_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.user_.IsDefault()) {
    _impl_.user_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.user)
}

// string mode = 46;
inline void LogEntry::clear_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_.ClearToEmpty();
}
inline const std::string& LogEntry::mode() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.mode)
  return _internal_mode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_mode(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.mode)
}
inline std::string* LogEntry::mutable_mode() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mode();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.mode)
  return _s;
}
inline const std::string& LogEntry::_internal_mode() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mode_.Get();
}
inline void LogEntry::_internal_set_mode(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mode_.Mutable( GetArena());
}
inline std::string* LogEntry::release_mode() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.mode)
  return _impl_.mode_.Release();
}
inline void LogEntry::set_allocated_mode(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mode_.IsDefault()) {
    _impl_.mode_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.mode)
}

// string mode_time = 47;
inline void LogEntry::clear_mode_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_time_.ClearToEmpty();
}
inline const std::string& LogEntry::mode_time() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.mode_time)
  return _internal_mode_time();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_mode_time(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_time_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.mode_time)
}
inline std::string* LogEntry::mutable_mode_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_mode_time();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.mode_time)
  return _s;
}
inline const std::string& LogEntry::_internal_mode_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.mode_time_.Get();
}
inline void LogEntry::_internal_set_mode_time(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_time_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_mode_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.mode_time_.Mutable( GetArena());
}
inline std::string* LogEntry::release_mode_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.mode_time)
  return _impl_.mode_time_.Release();
}
inline void LogEntry::set_allocated_mode_time(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.mode_time_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.mode_time_.IsDefault()) {
    _impl_.mode_time_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.mode_time)
}

// string coin = 48;
inline void LogEntry::clear_coin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_.ClearToEmpty();
}
inline const std::string& LogEntry::coin() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.coin)
  return _internal_coin();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_coin(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.coin)
}
inline std::string* LogEntry::mutable_coin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_coin();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.coin)
  return _s;
}
inline const std::string& LogEntry::_internal_coin() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coin_.Get();
}
inline void LogEntry::_internal_set_coin(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_coin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.coin_.Mutable( GetArena());
}
inline std::string* LogEntry::release_coin() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.coin)
  return _impl_.coin_.Release();
}
inline void LogEntry::set_allocated_coin(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.coin_.IsDefault()) {
    _impl_.coin_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.coin)
}

// string coin_second = 49;
inline void LogEntry::clear_coin_second() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_second_.ClearToEmpty();
}
inline const std::string& LogEntry::coin_second() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.LogEntry.coin_second)
  return _internal_coin_second();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LogEntry::set_coin_second(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_second_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:chart_api.LogEntry.coin_second)
}
inline std::string* LogEntry::mutable_coin_second() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_coin_second();
  // @@protoc_insertion_point(field_mutable:chart_api.LogEntry.coin_second)
  return _s;
}
inline const std::string& LogEntry::_internal_coin_second() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.coin_second_.Get();
}
inline void LogEntry::_internal_set_coin_second(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_second_.Set(value, GetArena());
}
inline std::string* LogEntry::_internal_mutable_coin_second() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.coin_second_.Mutable( GetArena());
}
inline std::string* LogEntry::release_coin_second() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:chart_api.LogEntry.coin_second)
  return _impl_.coin_second_.Release();
}
inline void LogEntry::set_allocated_coin_second(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.coin_second_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.coin_second_.IsDefault()) {
    _impl_.coin_second_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:chart_api.LogEntry.coin_second)
}

// -------------------------------------------------------------------

// GetLogsResponse

// repeated .chart_api.LogEntry logs = 1;
inline int GetLogsResponse::_internal_logs_size() const {
  return _internal_logs().size();
}
inline int GetLogsResponse::logs_size() const {
  return _internal_logs_size();
}
inline void GetLogsResponse::clear_logs() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.logs_.Clear();
}
inline ::chart_api::LogEntry* GetLogsResponse::mutable_logs(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chart_api.GetLogsResponse.logs)
  return _internal_mutable_logs()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::LogEntry>* GetLogsResponse::mutable_logs()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chart_api.GetLogsResponse.logs)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_logs();
}
inline const ::chart_api::LogEntry& GetLogsResponse::logs(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.GetLogsResponse.logs)
  return _internal_logs().Get(index);
}
inline ::chart_api::LogEntry* GetLogsResponse::add_logs() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::chart_api::LogEntry* _add = _internal_mutable_logs()->Add();
  // @@protoc_insertion_point(field_add:chart_api.GetLogsResponse.logs)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::LogEntry>& GetLogsResponse::logs() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chart_api.GetLogsResponse.logs)
  return _internal_logs();
}
inline const ::google::protobuf::RepeatedPtrField<::chart_api::LogEntry>&
GetLogsResponse::_internal_logs() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.logs_;
}
inline ::google::protobuf::RepeatedPtrField<::chart_api::LogEntry>*
GetLogsResponse::_internal_mutable_logs() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.logs_;
}

// -------------------------------------------------------------------

// GetUsersRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ExchangeData

// map<string, .chart_api.MarketData> exchanges = 1;
inline int ExchangeData::_internal_exchanges_size() const {
  return _internal_exchanges().size();
}
inline int ExchangeData::exchanges_size() const {
  return _internal_exchanges_size();
}
inline void ExchangeData::clear_exchanges() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.exchanges_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::chart_api::MarketData>& ExchangeData::_internal_exchanges() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.exchanges_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::chart_api::MarketData>& ExchangeData::exchanges() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:chart_api.ExchangeData.exchanges)
  return _internal_exchanges();
}
inline ::google::protobuf::Map<std::string, ::chart_api::MarketData>* ExchangeData::_internal_mutable_exchanges() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.exchanges_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::chart_api::MarketData>* ExchangeData::mutable_exchanges() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:chart_api.ExchangeData.exchanges)
  return _internal_mutable_exchanges();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MarketData

// map<string, .chart_api.ModeData> markets = 1;
inline int MarketData::_internal_markets_size() const {
  return _internal_markets().size();
}
inline int MarketData::markets_size() const {
  return _internal_markets_size();
}
inline void MarketData::clear_markets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.markets_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::chart_api::ModeData>& MarketData::_internal_markets() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.markets_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::chart_api::ModeData>& MarketData::markets() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:chart_api.MarketData.markets)
  return _internal_markets();
}
inline ::google::protobuf::Map<std::string, ::chart_api::ModeData>* MarketData::_internal_mutable_markets() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.markets_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::chart_api::ModeData>* MarketData::mutable_markets() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:chart_api.MarketData.markets)
  return _internal_mutable_markets();
}

// -------------------------------------------------------------------

// ModeData

// repeated string timestamps = 1;
inline int ModeData::_internal_timestamps_size() const {
  return _internal_timestamps().size();
}
inline int ModeData::timestamps_size() const {
  return _internal_timestamps_size();
}
inline void ModeData::clear_timestamps() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.timestamps_.Clear();
}
inline std::string* ModeData::add_timestamps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_timestamps()->Add();
  // @@protoc_insertion_point(field_add_mutable:chart_api.ModeData.timestamps)
  return _s;
}
inline const std::string& ModeData::timestamps(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:chart_api.ModeData.timestamps)
  return _internal_timestamps().Get(index);
}
inline std::string* ModeData::mutable_timestamps(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:chart_api.ModeData.timestamps)
  return _internal_mutable_timestamps()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void ModeData::set_timestamps(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_timestamps()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:chart_api.ModeData.timestamps)
}
template <typename Arg_, typename... Args_>
inline void ModeData::add_timestamps(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_timestamps(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:chart_api.ModeData.timestamps)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ModeData::timestamps() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:chart_api.ModeData.timestamps)
  return _internal_timestamps();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ModeData::mutable_timestamps() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:chart_api.ModeData.timestamps)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_timestamps();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
ModeData::_internal_timestamps() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.timestamps_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
ModeData::_internal_mutable_timestamps() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.timestamps_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GetUsersResponse

// map<string, .chart_api.ExchangeData> users = 1;
inline int GetUsersResponse::_internal_users_size() const {
  return _internal_users().size();
}
inline int GetUsersResponse::users_size() const {
  return _internal_users_size();
}
inline void GetUsersResponse::clear_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.users_.Clear();
}
inline const ::google::protobuf::Map<std::string, ::chart_api::ExchangeData>& GetUsersResponse::_internal_users() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.users_.GetMap();
}
inline const ::google::protobuf::Map<std::string, ::chart_api::ExchangeData>& GetUsersResponse::users() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_map:chart_api.GetUsersResponse.users)
  return _internal_users();
}
inline ::google::protobuf::Map<std::string, ::chart_api::ExchangeData>* GetUsersResponse::_internal_mutable_users() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.users_.MutableMap();
}
inline ::google::protobuf::Map<std::string, ::chart_api::ExchangeData>* GetUsersResponse::mutable_users() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_map:chart_api.GetUsersResponse.users)
  return _internal_mutable_users();
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace chart_api


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // chart_5fapi_2eproto_2epb_2eh
