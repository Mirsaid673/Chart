// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chart_api.proto

#include "chart_api.pb.h"
#include "chart_api.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace chart_api {

static const char* ChartAPI_method_names[] = {
  "/chart_api.ChartAPI/GetAlgos",
  "/chart_api.ChartAPI/GetStreams",
  "/chart_api.ChartAPI/GetData",
  "/chart_api.ChartAPI/GetLogs",
  "/chart_api.ChartAPI/GetUsers",
};

std::unique_ptr< ChartAPI::Stub> ChartAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChartAPI::Stub> stub(new ChartAPI::Stub(channel, options));
  return stub;
}

ChartAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetAlgos_(ChartAPI_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStreams_(ChartAPI_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetData_(ChartAPI_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetLogs_(ChartAPI_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUsers_(ChartAPI_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChartAPI::Stub::GetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::chart_api::GetAlgosResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chart_api::GetAlgosRequest, ::chart_api::GetAlgosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetAlgos_, context, request, response);
}

void ChartAPI::Stub::async::GetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest* request, ::chart_api::GetAlgosResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chart_api::GetAlgosRequest, ::chart_api::GetAlgosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAlgos_, context, request, response, std::move(f));
}

void ChartAPI::Stub::async::GetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest* request, ::chart_api::GetAlgosResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetAlgos_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetAlgosResponse>* ChartAPI::Stub::PrepareAsyncGetAlgosRaw(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chart_api::GetAlgosResponse, ::chart_api::GetAlgosRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetAlgos_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetAlgosResponse>* ChartAPI::Stub::AsyncGetAlgosRaw(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetAlgosRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChartAPI::Stub::GetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::chart_api::GetStreamsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chart_api::GetStreamsRequest, ::chart_api::GetStreamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStreams_, context, request, response);
}

void ChartAPI::Stub::async::GetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest* request, ::chart_api::GetStreamsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chart_api::GetStreamsRequest, ::chart_api::GetStreamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStreams_, context, request, response, std::move(f));
}

void ChartAPI::Stub::async::GetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest* request, ::chart_api::GetStreamsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStreams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetStreamsResponse>* ChartAPI::Stub::PrepareAsyncGetStreamsRaw(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chart_api::GetStreamsResponse, ::chart_api::GetStreamsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStreams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetStreamsResponse>* ChartAPI::Stub::AsyncGetStreamsRaw(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStreamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChartAPI::Stub::GetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::chart_api::GetDataResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chart_api::GetDataRequest, ::chart_api::GetDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetData_, context, request, response);
}

void ChartAPI::Stub::async::GetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest* request, ::chart_api::GetDataResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chart_api::GetDataRequest, ::chart_api::GetDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetData_, context, request, response, std::move(f));
}

void ChartAPI::Stub::async::GetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest* request, ::chart_api::GetDataResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetData_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetDataResponse>* ChartAPI::Stub::PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chart_api::GetDataResponse, ::chart_api::GetDataRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetData_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetDataResponse>* ChartAPI::Stub::AsyncGetDataRaw(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetDataRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChartAPI::Stub::GetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::chart_api::GetLogsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chart_api::GetLogsRequest, ::chart_api::GetLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLogs_, context, request, response);
}

void ChartAPI::Stub::async::GetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest* request, ::chart_api::GetLogsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chart_api::GetLogsRequest, ::chart_api::GetLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLogs_, context, request, response, std::move(f));
}

void ChartAPI::Stub::async::GetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest* request, ::chart_api::GetLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLogs_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetLogsResponse>* ChartAPI::Stub::PrepareAsyncGetLogsRaw(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chart_api::GetLogsResponse, ::chart_api::GetLogsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLogs_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetLogsResponse>* ChartAPI::Stub::AsyncGetLogsRaw(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLogsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ChartAPI::Stub::GetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::chart_api::GetUsersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::chart_api::GetUsersRequest, ::chart_api::GetUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUsers_, context, request, response);
}

void ChartAPI::Stub::async::GetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest* request, ::chart_api::GetUsersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::chart_api::GetUsersRequest, ::chart_api::GetUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsers_, context, request, response, std::move(f));
}

void ChartAPI::Stub::async::GetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest* request, ::chart_api::GetUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetUsersResponse>* ChartAPI::Stub::PrepareAsyncGetUsersRaw(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::chart_api::GetUsersResponse, ::chart_api::GetUsersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::chart_api::GetUsersResponse>* ChartAPI::Stub::AsyncGetUsersRaw(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

ChartAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChartAPI_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChartAPI::Service, ::chart_api::GetAlgosRequest, ::chart_api::GetAlgosResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChartAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chart_api::GetAlgosRequest* req,
             ::chart_api::GetAlgosResponse* resp) {
               return service->GetAlgos(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChartAPI_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChartAPI::Service, ::chart_api::GetStreamsRequest, ::chart_api::GetStreamsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChartAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chart_api::GetStreamsRequest* req,
             ::chart_api::GetStreamsResponse* resp) {
               return service->GetStreams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChartAPI_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChartAPI::Service, ::chart_api::GetDataRequest, ::chart_api::GetDataResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChartAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chart_api::GetDataRequest* req,
             ::chart_api::GetDataResponse* resp) {
               return service->GetData(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChartAPI_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChartAPI::Service, ::chart_api::GetLogsRequest, ::chart_api::GetLogsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChartAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chart_api::GetLogsRequest* req,
             ::chart_api::GetLogsResponse* resp) {
               return service->GetLogs(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChartAPI_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChartAPI::Service, ::chart_api::GetUsersRequest, ::chart_api::GetUsersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ChartAPI::Service* service,
             ::grpc::ServerContext* ctx,
             const ::chart_api::GetUsersRequest* req,
             ::chart_api::GetUsersResponse* resp) {
               return service->GetUsers(ctx, req, resp);
             }, this)));
}

ChartAPI::Service::~Service() {
}

::grpc::Status ChartAPI::Service::GetAlgos(::grpc::ServerContext* context, const ::chart_api::GetAlgosRequest* request, ::chart_api::GetAlgosResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChartAPI::Service::GetStreams(::grpc::ServerContext* context, const ::chart_api::GetStreamsRequest* request, ::chart_api::GetStreamsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChartAPI::Service::GetData(::grpc::ServerContext* context, const ::chart_api::GetDataRequest* request, ::chart_api::GetDataResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChartAPI::Service::GetLogs(::grpc::ServerContext* context, const ::chart_api::GetLogsRequest* request, ::chart_api::GetLogsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChartAPI::Service::GetUsers(::grpc::ServerContext* context, const ::chart_api::GetUsersRequest* request, ::chart_api::GetUsersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace chart_api

