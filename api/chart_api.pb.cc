// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: chart_api.proto
// Protobuf C++ Version: 5.29.1

#include "chart_api.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace chart_api {
              template <typename>
PROTOBUF_CONSTEXPR Volume_ParamsEntry_DoNotUse::Volume_ParamsEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Volume_ParamsEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Volume_ParamsEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Volume_ParamsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Volume_ParamsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Volume_ParamsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Volume_ParamsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Volume_ParamsEntry_DoNotUseDefaultTypeInternal _Volume_ParamsEntry_DoNotUse_default_instance_;

inline constexpr LogEntry::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        algo_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timeframe_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        block_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        indicator_param_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        vars_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        side_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        order_type_long_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        order_type_short_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        user_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        mode_time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        coin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        coin_second_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        close_{0},
        balance_{0},
        equity_{0},
        money_{0},
        order_leverage_long_{0},
        leverage_long_{0},
        order_size_long_{0},
        order_price_long_{0},
        order_usd_long_{0},
        position_size_long_{0},
        position_price_long_{0},
        position_usd_long_{0},
        pnl_long_{0},
        fee_long_{0},
        funding_long_{0},
        rpl_long_{0},
        order_leverage_short_{0},
        leverage_short_{0},
        order_size_short_{0},
        order_price_short_{0},
        order_usd_short_{0},
        position_usd_short_{0},
        position_size_short_{0},
        position_price_short_{0},
        pnl_short_{0},
        fee_short_{0},
        funding_short_{0},
        rpl_short_{0},
        block_id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR LogEntry::LogEntry(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct LogEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogEntryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogEntryDefaultTypeInternal() {}
  union {
    LogEntry _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogEntryDefaultTypeInternal _LogEntry_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR IndicatorParam_ParamEntry_DoNotUse::IndicatorParam_ParamEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : IndicatorParam_ParamEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : IndicatorParam_ParamEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct IndicatorParam_ParamEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicatorParam_ParamEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicatorParam_ParamEntry_DoNotUseDefaultTypeInternal() {}
  union {
    IndicatorParam_ParamEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicatorParam_ParamEntry_DoNotUseDefaultTypeInternal _IndicatorParam_ParamEntry_DoNotUse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR Indicator_ParamEntry_DoNotUse::Indicator_ParamEntry_DoNotUse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : Indicator_ParamEntry_DoNotUse::MapEntry(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : Indicator_ParamEntry_DoNotUse::MapEntry() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct Indicator_ParamEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Indicator_ParamEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Indicator_ParamEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Indicator_ParamEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Indicator_ParamEntry_DoNotUseDefaultTypeInternal _Indicator_ParamEntry_DoNotUse_default_instance_;

inline constexpr GetStreamsByAlgoRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : algo_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetStreamsByAlgoRequest::GetStreamsByAlgoRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetStreamsByAlgoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStreamsByAlgoRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStreamsByAlgoRequestDefaultTypeInternal() {}
  union {
    GetStreamsByAlgoRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStreamsByAlgoRequestDefaultTypeInternal _GetStreamsByAlgoRequest_default_instance_;

inline constexpr GetLogsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : from_timestamp_{::int64_t{0}},
        id_{0},
        orders_only_{false},
        limit_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetLogsRequest::GetLogsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetLogsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLogsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLogsRequestDefaultTypeInternal() {}
  union {
    GetLogsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLogsRequestDefaultTypeInternal _GetLogsRequest_default_instance_;

inline constexpr GetDataRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : from_timestamp_{::int64_t{0}},
        id_{0},
        limit_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetDataRequest::GetDataRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetDataRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDataRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDataRequestDefaultTypeInternal() {}
  union {
    GetDataRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDataRequestDefaultTypeInternal _GetDataRequest_default_instance_;

inline constexpr GetAlgosResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : algos_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAlgosResponse::GetAlgosResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAlgosResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAlgosResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAlgosResponseDefaultTypeInternal() {}
  union {
    GetAlgosResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAlgosResponseDefaultTypeInternal _GetAlgosResponse_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR GetAlgosRequest::GetAlgosRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GetAlgosRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAlgosRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAlgosRequestDefaultTypeInternal() {}
  union {
    GetAlgosRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAlgosRequestDefaultTypeInternal _GetAlgosRequest_default_instance_;

inline constexpr Volume::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : params_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Volume::Volume(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VolumeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VolumeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VolumeDefaultTypeInternal() {}
  union {
    Volume _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VolumeDefaultTypeInternal _Volume_default_instance_;

inline constexpr IndicatorParam::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : param_{},
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IndicatorParam::IndicatorParam(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IndicatorParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicatorParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicatorParamDefaultTypeInternal() {}
  union {
    IndicatorParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicatorParamDefaultTypeInternal _IndicatorParam_default_instance_;

inline constexpr GetLogsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : logs_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetLogsResponse::GetLogsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetLogsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetLogsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetLogsResponseDefaultTypeInternal() {}
  union {
    GetLogsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetLogsResponseDefaultTypeInternal _GetLogsResponse_default_instance_;

inline constexpr StreamData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : indicator_param_{},
        user_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        coin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        coin_second_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timeframe_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        algo_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_{0},
        price_decimal_{0},
        size_decimal_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StreamData::StreamData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StreamDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamDataDefaultTypeInternal() {}
  union {
    StreamData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamDataDefaultTypeInternal _StreamData_default_instance_;

inline constexpr Indicator::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : param_{},
        volume_{},
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Indicator::Indicator(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IndicatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicatorDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicatorDefaultTypeInternal() {}
  union {
    Indicator _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicatorDefaultTypeInternal _Indicator_default_instance_;

inline constexpr GetStreamsByAlgoResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : streams_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetStreamsByAlgoResponse::GetStreamsByAlgoResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetStreamsByAlgoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetStreamsByAlgoResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetStreamsByAlgoResponseDefaultTypeInternal() {}
  union {
    GetStreamsByAlgoResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetStreamsByAlgoResponseDefaultTypeInternal _GetStreamsByAlgoResponse_default_instance_;

inline constexpr DataPoint::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : indicators_{},
        time_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        timestamp_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        open_{0},
        high_{0},
        low_{0},
        close_{0},
        volume_{0},
        id_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR DataPoint::DataPoint(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DataPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataPointDefaultTypeInternal() {}
  union {
    DataPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataPointDefaultTypeInternal _DataPoint_default_instance_;

inline constexpr GetDataResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : data_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetDataResponse::GetDataResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetDataResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDataResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDataResponseDefaultTypeInternal() {}
  union {
    GetDataResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDataResponseDefaultTypeInternal _GetDataResponse_default_instance_;
}  // namespace chart_api
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_chart_5fapi_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_chart_5fapi_2eproto = nullptr;
const ::uint32_t
    TableStruct_chart_5fapi_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::GetAlgosRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::GetAlgosResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::GetAlgosResponse, _impl_.algos_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::GetStreamsByAlgoRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::GetStreamsByAlgoRequest, _impl_.algo_),
        PROTOBUF_FIELD_OFFSET(::chart_api::IndicatorParam_ParamEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::chart_api::IndicatorParam_ParamEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::IndicatorParam_ParamEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::chart_api::IndicatorParam_ParamEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::IndicatorParam, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::IndicatorParam, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::chart_api::IndicatorParam, _impl_.param_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _impl_.user_),
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _impl_.coin_),
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _impl_.coin_second_),
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _impl_.timeframe_),
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _impl_.algo_),
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _impl_.price_decimal_),
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _impl_.size_decimal_),
        PROTOBUF_FIELD_OFFSET(::chart_api::StreamData, _impl_.indicator_param_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::GetStreamsByAlgoResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::GetStreamsByAlgoResponse, _impl_.streams_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::GetDataRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::GetDataRequest, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::chart_api::GetDataRequest, _impl_.from_timestamp_),
        PROTOBUF_FIELD_OFFSET(::chart_api::GetDataRequest, _impl_.limit_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _impl_.open_),
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _impl_.high_),
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _impl_.low_),
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _impl_.close_),
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::chart_api::DataPoint, _impl_.indicators_),
        PROTOBUF_FIELD_OFFSET(::chart_api::Indicator_ParamEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::chart_api::Indicator_ParamEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::Indicator_ParamEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::chart_api::Indicator_ParamEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::Indicator, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::Indicator, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::chart_api::Indicator, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::chart_api::Indicator, _impl_.param_),
        PROTOBUF_FIELD_OFFSET(::chart_api::Indicator, _impl_.volume_),
        PROTOBUF_FIELD_OFFSET(::chart_api::Volume_ParamsEntry_DoNotUse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::chart_api::Volume_ParamsEntry_DoNotUse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::Volume_ParamsEntry_DoNotUse, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::chart_api::Volume_ParamsEntry_DoNotUse, _impl_.value_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::Volume, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::Volume, _impl_.params_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::GetDataResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::GetDataResponse, _impl_.data_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::GetLogsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::GetLogsRequest, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::chart_api::GetLogsRequest, _impl_.from_timestamp_),
        PROTOBUF_FIELD_OFFSET(::chart_api::GetLogsRequest, _impl_.orders_only_),
        PROTOBUF_FIELD_OFFSET(::chart_api::GetLogsRequest, _impl_.limit_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.time_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.timestamp_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.algo_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.timeframe_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.block_id_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.block_name_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.indicator_param_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.vars_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.close_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.balance_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.equity_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.money_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.side_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_leverage_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.leverage_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_size_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_price_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_usd_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_type_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.position_size_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.position_price_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.position_usd_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.pnl_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.fee_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.funding_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.rpl_long_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_leverage_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.leverage_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_size_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_price_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_usd_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.order_type_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.position_usd_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.position_size_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.position_price_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.pnl_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.fee_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.funding_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.rpl_short_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.user_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.mode_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.mode_time_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.coin_),
        PROTOBUF_FIELD_OFFSET(::chart_api::LogEntry, _impl_.coin_second_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::chart_api::GetLogsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::chart_api::GetLogsResponse, _impl_.logs_),
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::chart_api::GetAlgosRequest)},
        {8, -1, -1, sizeof(::chart_api::GetAlgosResponse)},
        {17, -1, -1, sizeof(::chart_api::GetStreamsByAlgoRequest)},
        {26, 36, -1, sizeof(::chart_api::IndicatorParam_ParamEntry_DoNotUse)},
        {38, -1, -1, sizeof(::chart_api::IndicatorParam)},
        {48, -1, -1, sizeof(::chart_api::StreamData)},
        {65, -1, -1, sizeof(::chart_api::GetStreamsByAlgoResponse)},
        {74, -1, -1, sizeof(::chart_api::GetDataRequest)},
        {85, -1, -1, sizeof(::chart_api::DataPoint)},
        {102, 112, -1, sizeof(::chart_api::Indicator_ParamEntry_DoNotUse)},
        {114, -1, -1, sizeof(::chart_api::Indicator)},
        {126, 136, -1, sizeof(::chart_api::Volume_ParamsEntry_DoNotUse)},
        {138, -1, -1, sizeof(::chart_api::Volume)},
        {147, -1, -1, sizeof(::chart_api::GetDataResponse)},
        {156, -1, -1, sizeof(::chart_api::GetLogsRequest)},
        {168, -1, -1, sizeof(::chart_api::LogEntry)},
        {220, -1, -1, sizeof(::chart_api::GetLogsResponse)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::chart_api::_GetAlgosRequest_default_instance_._instance,
    &::chart_api::_GetAlgosResponse_default_instance_._instance,
    &::chart_api::_GetStreamsByAlgoRequest_default_instance_._instance,
    &::chart_api::_IndicatorParam_ParamEntry_DoNotUse_default_instance_._instance,
    &::chart_api::_IndicatorParam_default_instance_._instance,
    &::chart_api::_StreamData_default_instance_._instance,
    &::chart_api::_GetStreamsByAlgoResponse_default_instance_._instance,
    &::chart_api::_GetDataRequest_default_instance_._instance,
    &::chart_api::_DataPoint_default_instance_._instance,
    &::chart_api::_Indicator_ParamEntry_DoNotUse_default_instance_._instance,
    &::chart_api::_Indicator_default_instance_._instance,
    &::chart_api::_Volume_ParamsEntry_DoNotUse_default_instance_._instance,
    &::chart_api::_Volume_default_instance_._instance,
    &::chart_api::_GetDataResponse_default_instance_._instance,
    &::chart_api::_GetLogsRequest_default_instance_._instance,
    &::chart_api::_LogEntry_default_instance_._instance,
    &::chart_api::_GetLogsResponse_default_instance_._instance,
};
const char descriptor_table_protodef_chart_5fapi_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\017chart_api.proto\022\tchart_api\"\021\n\017GetAlgos"
    "Request\"!\n\020GetAlgosResponse\022\r\n\005algos\030\001 \003"
    "(\t\"\'\n\027GetStreamsByAlgoRequest\022\014\n\004algo\030\001 "
    "\001(\t\"\201\001\n\016IndicatorParam\022\014\n\004type\030\001 \001(\t\0223\n\005"
    "param\030\002 \003(\0132$.chart_api.IndicatorParam.P"
    "aramEntry\032,\n\nParamEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005"
    "value\030\002 \001(\001:\0028\001\"\313\001\n\nStreamData\022\n\n\002id\030\001 \001"
    "(\005\022\014\n\004user\030\002 \001(\t\022\014\n\004coin\030\003 \001(\t\022\023\n\013coin_s"
    "econd\030\004 \001(\t\022\021\n\ttimeframe\030\005 \001(\t\022\014\n\004algo\030\006"
    " \001(\t\022\025\n\rprice_decimal\030\007 \001(\005\022\024\n\014size_deci"
    "mal\030\010 \001(\005\0222\n\017indicator_param\030\t \003(\0132\031.cha"
    "rt_api.IndicatorParam\"B\n\030GetStreamsByAlg"
    "oResponse\022&\n\007streams\030\001 \003(\0132\025.chart_api.S"
    "treamData\"C\n\016GetDataRequest\022\n\n\002id\030\001 \001(\005\022"
    "\026\n\016from_timestamp\030\002 \001(\003\022\r\n\005limit\030\003 \001(\005\"\252"
    "\001\n\tDataPoint\022\n\n\002id\030\001 \001(\005\022\014\n\004time\030\002 \001(\t\022\021"
    "\n\ttimestamp\030\003 \001(\t\022\014\n\004open\030\004 \001(\001\022\014\n\004high\030"
    "\005 \001(\001\022\013\n\003low\030\006 \001(\001\022\r\n\005close\030\007 \001(\001\022\016\n\006vol"
    "ume\030\010 \001(\001\022(\n\nindicators\030\t \003(\0132\024.chart_ap"
    "i.Indicator\"\250\001\n\tIndicator\022\014\n\004type\030\001 \001(\t\022"
    "\014\n\004name\030\002 \001(\t\022.\n\005param\030\003 \003(\0132\037.chart_api"
    ".Indicator.ParamEntry\022!\n\006volume\030\004 \003(\0132\021."
    "chart_api.Volume\032,\n\nParamEntry\022\013\n\003key\030\001 "
    "\001(\t\022\r\n\005value\030\002 \001(\001:\0028\001\"f\n\006Volume\022-\n\006para"
    "ms\030\001 \003(\0132\035.chart_api.Volume.ParamsEntry\032"
    "-\n\013ParamsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001"
    "(\001:\0028\001\"5\n\017GetDataResponse\022\"\n\004data\030\001 \003(\0132"
    "\024.chart_api.DataPoint\"X\n\016GetLogsRequest\022"
    "\n\n\002id\030\001 \001(\005\022\026\n\016from_timestamp\030\002 \001(\003\022\023\n\013o"
    "rders_only\030\003 \001(\010\022\r\n\005limit\030\004 \001(\005\"\265\007\n\010LogE"
    "ntry\022\014\n\004time\030\002 \001(\t\022\021\n\ttimestamp\030\003 \001(\t\022\014\n"
    "\004algo\030\006 \001(\t\022\021\n\ttimeframe\030\010 \001(\t\022\020\n\010block_"
    "id\030\n \001(\005\022\022\n\nblock_name\030\013 \001(\t\022\027\n\017indicato"
    "r_param\030\014 \001(\t\022\014\n\004vars\030\r \001(\t\022\r\n\005close\030\016 \001"
    "(\001\022\017\n\007balance\030\017 \001(\001\022\016\n\006equity\030\020 \001(\001\022\r\n\005m"
    "oney\030\021 \001(\001\022\014\n\004side\030\022 \001(\t\022\033\n\023order_levera"
    "ge_long\030\023 \001(\001\022\025\n\rleverage_long\030\024 \001(\001\022\027\n\017"
    "order_size_long\030\025 \001(\001\022\030\n\020order_price_lon"
    "g\030\026 \001(\001\022\026\n\016order_usd_long\030\027 \001(\001\022\027\n\017order"
    "_type_long\030\030 \001(\t\022\032\n\022position_size_long\030\031"
    " \001(\001\022\033\n\023position_price_long\030\032 \001(\001\022\031\n\021pos"
    "ition_usd_long\030\033 \001(\001\022\020\n\010pnl_long\030\034 \001(\001\022\020"
    "\n\010fee_long\030\035 \001(\001\022\024\n\014funding_long\030\036 \001(\001\022\020"
    "\n\010rpl_long\030\037 \001(\001\022\034\n\024order_leverage_short"
    "\030  \001(\001\022\026\n\016leverage_short\030! \001(\001\022\030\n\020order_"
    "size_short\030\" \001(\001\022\031\n\021order_price_short\030# "
    "\001(\001\022\027\n\017order_usd_short\030$ \001(\001\022\030\n\020order_ty"
    "pe_short\030% \001(\t\022\032\n\022position_usd_short\030& \001"
    "(\001\022\033\n\023position_size_short\030\' \001(\001\022\034\n\024posit"
    "ion_price_short\030( \001(\001\022\021\n\tpnl_short\030) \001(\001"
    "\022\021\n\tfee_short\030* \001(\001\022\025\n\rfunding_short\030+ \001"
    "(\001\022\021\n\trpl_short\030, \001(\001\022\014\n\004user\030- \001(\t\022\014\n\004m"
    "ode\030. \001(\t\022\021\n\tmode_time\030/ \001(\t\022\014\n\004coin\0300 \001"
    "(\t\022\023\n\013coin_second\0301 \001(\t\"4\n\017GetLogsRespon"
    "se\022!\n\004logs\030\001 \003(\0132\023.chart_api.LogEntry2\270\002"
    "\n\010ChartAPI\022E\n\010GetAlgos\022\032.chart_api.GetAl"
    "gosRequest\032\033.chart_api.GetAlgosResponse\""
    "\000\022]\n\020GetStreamsByAlgo\022\".chart_api.GetStr"
    "eamsByAlgoRequest\032#.chart_api.GetStreams"
    "ByAlgoResponse\"\000\022B\n\007GetData\022\031.chart_api."
    "GetDataRequest\032\032.chart_api.GetDataRespon"
    "se\"\000\022B\n\007GetLogs\022\031.chart_api.GetLogsReque"
    "st\032\032.chart_api.GetLogsResponse\"\000B Z\036char"
    "t_api/internal/proto;protob\006proto3"
};
static ::absl::once_flag descriptor_table_chart_5fapi_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_chart_5fapi_2eproto = {
    false,
    false,
    2554,
    descriptor_table_protodef_chart_5fapi_2eproto,
    "chart_api.proto",
    &descriptor_table_chart_5fapi_2eproto_once,
    nullptr,
    0,
    17,
    schemas,
    file_default_instances,
    TableStruct_chart_5fapi_2eproto::offsets,
    file_level_enum_descriptors_chart_5fapi_2eproto,
    file_level_service_descriptors_chart_5fapi_2eproto,
};
namespace chart_api {
// ===================================================================

class GetAlgosRequest::_Internal {
 public:
};

GetAlgosRequest::GetAlgosRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:chart_api.GetAlgosRequest)
}
GetAlgosRequest::GetAlgosRequest(
    ::google::protobuf::Arena* arena,
    const GetAlgosRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAlgosRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:chart_api.GetAlgosRequest)
}

inline void* GetAlgosRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAlgosRequest(arena);
}
constexpr auto GetAlgosRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetAlgosRequest),
                                            alignof(GetAlgosRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAlgosRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAlgosRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAlgosRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<GetAlgosRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAlgosRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<GetAlgosRequest>(), &GetAlgosRequest::ByteSizeLong,
            &GetAlgosRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAlgosRequest, _impl_._cached_size_),
        false,
    },
    &GetAlgosRequest::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAlgosRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> GetAlgosRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::GetAlgosRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata GetAlgosRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAlgosResponse::_Internal {
 public:
};

GetAlgosResponse::GetAlgosResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.GetAlgosResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAlgosResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::GetAlgosResponse& from_msg)
      : algos_{visibility, arena, from.algos_},
        _cached_size_{0} {}

GetAlgosResponse::GetAlgosResponse(
    ::google::protobuf::Arena* arena,
    const GetAlgosResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAlgosResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:chart_api.GetAlgosResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAlgosResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : algos_{visibility, arena},
        _cached_size_{0} {}

inline void GetAlgosResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAlgosResponse::~GetAlgosResponse() {
  // @@protoc_insertion_point(destructor:chart_api.GetAlgosResponse)
  SharedDtor(*this);
}
inline void GetAlgosResponse::SharedDtor(MessageLite& self) {
  GetAlgosResponse& this_ = static_cast<GetAlgosResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetAlgosResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAlgosResponse(arena);
}
constexpr auto GetAlgosResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetAlgosResponse, _impl_.algos_) +
          decltype(GetAlgosResponse::_impl_.algos_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetAlgosResponse), alignof(GetAlgosResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetAlgosResponse::PlacementNew_,
                                 sizeof(GetAlgosResponse),
                                 alignof(GetAlgosResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAlgosResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAlgosResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAlgosResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAlgosResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAlgosResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAlgosResponse>(), &GetAlgosResponse::ByteSizeLong,
            &GetAlgosResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAlgosResponse, _impl_._cached_size_),
        false,
    },
    &GetAlgosResponse::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAlgosResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 40, 2> GetAlgosResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::GetAlgosResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string algos = 1;
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAlgosResponse, _impl_.algos_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string algos = 1;
    {PROTOBUF_FIELD_OFFSET(GetAlgosResponse, _impl_.algos_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\32\5\0\0\0\0\0\0"
    "chart_api.GetAlgosResponse"
    "algos"
  }},
};

PROTOBUF_NOINLINE void GetAlgosResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.GetAlgosResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.algos_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAlgosResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAlgosResponse& this_ = static_cast<const GetAlgosResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAlgosResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAlgosResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.GetAlgosResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string algos = 1;
          for (int i = 0, n = this_._internal_algos_size(); i < n; ++i) {
            const auto& s = this_._internal_algos().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.GetAlgosResponse.algos");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.GetAlgosResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAlgosResponse::ByteSizeLong(const MessageLite& base) {
          const GetAlgosResponse& this_ = static_cast<const GetAlgosResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAlgosResponse::ByteSizeLong() const {
          const GetAlgosResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.GetAlgosResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string algos = 1;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_algos().size());
              for (int i = 0, n = this_._internal_algos().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_algos().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAlgosResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAlgosResponse*>(&to_msg);
  auto& from = static_cast<const GetAlgosResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.GetAlgosResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_algos()->MergeFrom(from._internal_algos());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAlgosResponse::CopyFrom(const GetAlgosResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.GetAlgosResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAlgosResponse::InternalSwap(GetAlgosResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.algos_.InternalSwap(&other->_impl_.algos_);
}

::google::protobuf::Metadata GetAlgosResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetStreamsByAlgoRequest::_Internal {
 public:
};

GetStreamsByAlgoRequest::GetStreamsByAlgoRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.GetStreamsByAlgoRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetStreamsByAlgoRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::GetStreamsByAlgoRequest& from_msg)
      : algo_(arena, from.algo_),
        _cached_size_{0} {}

GetStreamsByAlgoRequest::GetStreamsByAlgoRequest(
    ::google::protobuf::Arena* arena,
    const GetStreamsByAlgoRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetStreamsByAlgoRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:chart_api.GetStreamsByAlgoRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetStreamsByAlgoRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : algo_(arena),
        _cached_size_{0} {}

inline void GetStreamsByAlgoRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetStreamsByAlgoRequest::~GetStreamsByAlgoRequest() {
  // @@protoc_insertion_point(destructor:chart_api.GetStreamsByAlgoRequest)
  SharedDtor(*this);
}
inline void GetStreamsByAlgoRequest::SharedDtor(MessageLite& self) {
  GetStreamsByAlgoRequest& this_ = static_cast<GetStreamsByAlgoRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.algo_.Destroy();
  this_._impl_.~Impl_();
}

inline void* GetStreamsByAlgoRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetStreamsByAlgoRequest(arena);
}
constexpr auto GetStreamsByAlgoRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetStreamsByAlgoRequest),
                                            alignof(GetStreamsByAlgoRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetStreamsByAlgoRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetStreamsByAlgoRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetStreamsByAlgoRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetStreamsByAlgoRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetStreamsByAlgoRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetStreamsByAlgoRequest>(), &GetStreamsByAlgoRequest::ByteSizeLong,
            &GetStreamsByAlgoRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetStreamsByAlgoRequest, _impl_._cached_size_),
        false,
    },
    &GetStreamsByAlgoRequest::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetStreamsByAlgoRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 46, 2> GetStreamsByAlgoRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::GetStreamsByAlgoRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string algo = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetStreamsByAlgoRequest, _impl_.algo_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string algo = 1;
    {PROTOBUF_FIELD_OFFSET(GetStreamsByAlgoRequest, _impl_.algo_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\41\4\0\0\0\0\0\0"
    "chart_api.GetStreamsByAlgoRequest"
    "algo"
  }},
};

PROTOBUF_NOINLINE void GetStreamsByAlgoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.GetStreamsByAlgoRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.algo_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetStreamsByAlgoRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetStreamsByAlgoRequest& this_ = static_cast<const GetStreamsByAlgoRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetStreamsByAlgoRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetStreamsByAlgoRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.GetStreamsByAlgoRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string algo = 1;
          if (!this_._internal_algo().empty()) {
            const std::string& _s = this_._internal_algo();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.GetStreamsByAlgoRequest.algo");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.GetStreamsByAlgoRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetStreamsByAlgoRequest::ByteSizeLong(const MessageLite& base) {
          const GetStreamsByAlgoRequest& this_ = static_cast<const GetStreamsByAlgoRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetStreamsByAlgoRequest::ByteSizeLong() const {
          const GetStreamsByAlgoRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.GetStreamsByAlgoRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string algo = 1;
            if (!this_._internal_algo().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_algo());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetStreamsByAlgoRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetStreamsByAlgoRequest*>(&to_msg);
  auto& from = static_cast<const GetStreamsByAlgoRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.GetStreamsByAlgoRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_algo().empty()) {
    _this->_internal_set_algo(from._internal_algo());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetStreamsByAlgoRequest::CopyFrom(const GetStreamsByAlgoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.GetStreamsByAlgoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetStreamsByAlgoRequest::InternalSwap(GetStreamsByAlgoRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.algo_, &other->_impl_.algo_, arena);
}

::google::protobuf::Metadata GetStreamsByAlgoRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              IndicatorParam_ParamEntry_DoNotUse::IndicatorParam_ParamEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              IndicatorParam_ParamEntry_DoNotUse::IndicatorParam_ParamEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              IndicatorParam_ParamEntry_DoNotUse::IndicatorParam_ParamEntry_DoNotUse() : SuperType() {}
              IndicatorParam_ParamEntry_DoNotUse::IndicatorParam_ParamEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* IndicatorParam_ParamEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) IndicatorParam_ParamEntry_DoNotUse(arena);
              }
              constexpr auto IndicatorParam_ParamEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(IndicatorParam_ParamEntry_DoNotUse),
                                                          alignof(IndicatorParam_ParamEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull IndicatorParam_ParamEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_IndicatorParam_ParamEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &IndicatorParam_ParamEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<IndicatorParam_ParamEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &IndicatorParam_ParamEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &IndicatorParam_ParamEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(IndicatorParam_ParamEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &IndicatorParam_ParamEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_chart_5fapi_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* IndicatorParam_ParamEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 47, 2> IndicatorParam_ParamEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(IndicatorParam_ParamEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::IndicatorParam_ParamEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(IndicatorParam_ParamEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IndicatorParam_ParamEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(IndicatorParam_ParamEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(IndicatorParam_ParamEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\43\3\0\0\0\0\0\0"
    "chart_api.IndicatorParam.ParamEntry"
    "key"
  }},
};

// ===================================================================

class IndicatorParam::_Internal {
 public:
};

IndicatorParam::IndicatorParam(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.IndicatorParam)
}
inline PROTOBUF_NDEBUG_INLINE IndicatorParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::IndicatorParam& from_msg)
      : param_{visibility, arena, from.param_},
        type_(arena, from.type_),
        _cached_size_{0} {}

IndicatorParam::IndicatorParam(
    ::google::protobuf::Arena* arena,
    const IndicatorParam& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IndicatorParam* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:chart_api.IndicatorParam)
}
inline PROTOBUF_NDEBUG_INLINE IndicatorParam::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : param_{visibility, arena},
        type_(arena),
        _cached_size_{0} {}

inline void IndicatorParam::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
IndicatorParam::~IndicatorParam() {
  // @@protoc_insertion_point(destructor:chart_api.IndicatorParam)
  SharedDtor(*this);
}
inline void IndicatorParam::SharedDtor(MessageLite& self) {
  IndicatorParam& this_ = static_cast<IndicatorParam&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.type_.Destroy();
  this_._impl_.~Impl_();
}

inline void* IndicatorParam::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IndicatorParam(arena);
}
constexpr auto IndicatorParam::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(IndicatorParam, _impl_.param_) +
          decltype(IndicatorParam::_impl_.param_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(IndicatorParam, _impl_.param_) +
          decltype(IndicatorParam::_impl_.param_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(IndicatorParam), alignof(IndicatorParam), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&IndicatorParam::PlacementNew_,
                                 sizeof(IndicatorParam),
                                 alignof(IndicatorParam));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull IndicatorParam::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_IndicatorParam_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IndicatorParam::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<IndicatorParam>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IndicatorParam::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<IndicatorParam>(), &IndicatorParam::ByteSizeLong,
            &IndicatorParam::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IndicatorParam, _impl_._cached_size_),
        false,
    },
    &IndicatorParam::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* IndicatorParam::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 2, 1, 42, 2> IndicatorParam::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::IndicatorParam>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IndicatorParam, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1;
    {PROTOBUF_FIELD_OFFSET(IndicatorParam, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, double> param = 2;
    {PROTOBUF_FIELD_OFFSET(IndicatorParam, _impl_.param_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(IndicatorParam()._impl_.param_)>(
        1, 0, 0, 9,
        1)},
  }}, {{
    "\30\4\5\0\0\0\0\0"
    "chart_api.IndicatorParam"
    "type"
    "param"
  }},
};

PROTOBUF_NOINLINE void IndicatorParam::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.IndicatorParam)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_.Clear();
  _impl_.type_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IndicatorParam::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IndicatorParam& this_ = static_cast<const IndicatorParam&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IndicatorParam::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IndicatorParam& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.IndicatorParam)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string type = 1;
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.IndicatorParam.type");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // map<string, double> param = 2;
          if (!this_._internal_param().empty()) {
            using MapType = ::google::protobuf::Map<std::string, double>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, double,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_DOUBLE>;
            const auto& field = this_._internal_param();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.IndicatorParam.param");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    2, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.IndicatorParam.param");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.IndicatorParam)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IndicatorParam::ByteSizeLong(const MessageLite& base) {
          const IndicatorParam& this_ = static_cast<const IndicatorParam&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IndicatorParam::ByteSizeLong() const {
          const IndicatorParam& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.IndicatorParam)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, double> param = 2;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_param_size());
              for (const auto& entry : this_._internal_param()) {
                total_size += _pbi::MapEntryFuncs<std::string, double,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_DOUBLE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
           {
            // string type = 1;
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void IndicatorParam::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IndicatorParam*>(&to_msg);
  auto& from = static_cast<const IndicatorParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.IndicatorParam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.param_.MergeFrom(from._impl_.param_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IndicatorParam::CopyFrom(const IndicatorParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.IndicatorParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IndicatorParam::InternalSwap(IndicatorParam* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.param_.InternalSwap(&other->_impl_.param_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
}

::google::protobuf::Metadata IndicatorParam::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StreamData::_Internal {
 public:
};

StreamData::StreamData(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.StreamData)
}
inline PROTOBUF_NDEBUG_INLINE StreamData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::StreamData& from_msg)
      : indicator_param_{visibility, arena, from.indicator_param_},
        user_(arena, from.user_),
        coin_(arena, from.coin_),
        coin_second_(arena, from.coin_second_),
        timeframe_(arena, from.timeframe_),
        algo_(arena, from.algo_),
        _cached_size_{0} {}

StreamData::StreamData(
    ::google::protobuf::Arena* arena,
    const StreamData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  StreamData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, id_),
           offsetof(Impl_, size_decimal_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::size_decimal_));

  // @@protoc_insertion_point(copy_constructor:chart_api.StreamData)
}
inline PROTOBUF_NDEBUG_INLINE StreamData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : indicator_param_{visibility, arena},
        user_(arena),
        coin_(arena),
        coin_second_(arena),
        timeframe_(arena),
        algo_(arena),
        _cached_size_{0} {}

inline void StreamData::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, id_),
           0,
           offsetof(Impl_, size_decimal_) -
               offsetof(Impl_, id_) +
               sizeof(Impl_::size_decimal_));
}
StreamData::~StreamData() {
  // @@protoc_insertion_point(destructor:chart_api.StreamData)
  SharedDtor(*this);
}
inline void StreamData::SharedDtor(MessageLite& self) {
  StreamData& this_ = static_cast<StreamData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.user_.Destroy();
  this_._impl_.coin_.Destroy();
  this_._impl_.coin_second_.Destroy();
  this_._impl_.timeframe_.Destroy();
  this_._impl_.algo_.Destroy();
  this_._impl_.~Impl_();
}

inline void* StreamData::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StreamData(arena);
}
constexpr auto StreamData::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(StreamData, _impl_.indicator_param_) +
          decltype(StreamData::_impl_.indicator_param_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(StreamData), alignof(StreamData), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&StreamData::PlacementNew_,
                                 sizeof(StreamData),
                                 alignof(StreamData));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StreamData::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StreamData_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StreamData::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StreamData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StreamData::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StreamData>(), &StreamData::ByteSizeLong,
            &StreamData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StreamData, _impl_._cached_size_),
        false,
    },
    &StreamData::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StreamData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 69, 2> StreamData::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::StreamData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamData, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(StreamData, _impl_.id_)}},
    // string user = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StreamData, _impl_.user_)}},
    // string coin = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(StreamData, _impl_.coin_)}},
    // string coin_second = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(StreamData, _impl_.coin_second_)}},
    // string timeframe = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(StreamData, _impl_.timeframe_)}},
    // string algo = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(StreamData, _impl_.algo_)}},
    // int32 price_decimal = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamData, _impl_.price_decimal_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(StreamData, _impl_.price_decimal_)}},
    // int32 size_decimal = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StreamData, _impl_.size_decimal_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(StreamData, _impl_.size_decimal_)}},
    // repeated .chart_api.IndicatorParam indicator_param = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(StreamData, _impl_.indicator_param_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(StreamData, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string user = 2;
    {PROTOBUF_FIELD_OFFSET(StreamData, _impl_.user_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string coin = 3;
    {PROTOBUF_FIELD_OFFSET(StreamData, _impl_.coin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string coin_second = 4;
    {PROTOBUF_FIELD_OFFSET(StreamData, _impl_.coin_second_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string timeframe = 5;
    {PROTOBUF_FIELD_OFFSET(StreamData, _impl_.timeframe_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string algo = 6;
    {PROTOBUF_FIELD_OFFSET(StreamData, _impl_.algo_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 price_decimal = 7;
    {PROTOBUF_FIELD_OFFSET(StreamData, _impl_.price_decimal_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 size_decimal = 8;
    {PROTOBUF_FIELD_OFFSET(StreamData, _impl_.size_decimal_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // repeated .chart_api.IndicatorParam indicator_param = 9;
    {PROTOBUF_FIELD_OFFSET(StreamData, _impl_.indicator_param_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::chart_api::IndicatorParam>()},
  }}, {{
    "\24\0\4\4\13\11\4\0\0\0\0\0\0\0\0\0"
    "chart_api.StreamData"
    "user"
    "coin"
    "coin_second"
    "timeframe"
    "algo"
  }},
};

PROTOBUF_NOINLINE void StreamData::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.StreamData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.indicator_param_.Clear();
  _impl_.user_.ClearToEmpty();
  _impl_.coin_.ClearToEmpty();
  _impl_.coin_second_.ClearToEmpty();
  _impl_.timeframe_.ClearToEmpty();
  _impl_.algo_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.size_decimal_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.size_decimal_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StreamData::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StreamData& this_ = static_cast<const StreamData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StreamData::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StreamData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.StreamData)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 id = 1;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_id(), target);
          }

          // string user = 2;
          if (!this_._internal_user().empty()) {
            const std::string& _s = this_._internal_user();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.StreamData.user");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string coin = 3;
          if (!this_._internal_coin().empty()) {
            const std::string& _s = this_._internal_coin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.StreamData.coin");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string coin_second = 4;
          if (!this_._internal_coin_second().empty()) {
            const std::string& _s = this_._internal_coin_second();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.StreamData.coin_second");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string timeframe = 5;
          if (!this_._internal_timeframe().empty()) {
            const std::string& _s = this_._internal_timeframe();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.StreamData.timeframe");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string algo = 6;
          if (!this_._internal_algo().empty()) {
            const std::string& _s = this_._internal_algo();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.StreamData.algo");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // int32 price_decimal = 7;
          if (this_._internal_price_decimal() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_price_decimal(), target);
          }

          // int32 size_decimal = 8;
          if (this_._internal_size_decimal() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_size_decimal(), target);
          }

          // repeated .chart_api.IndicatorParam indicator_param = 9;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_indicator_param_size());
               i < n; i++) {
            const auto& repfield = this_._internal_indicator_param().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    9, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.StreamData)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StreamData::ByteSizeLong(const MessageLite& base) {
          const StreamData& this_ = static_cast<const StreamData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StreamData::ByteSizeLong() const {
          const StreamData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.StreamData)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .chart_api.IndicatorParam indicator_param = 9;
            {
              total_size += 1UL * this_._internal_indicator_param_size();
              for (const auto& msg : this_._internal_indicator_param()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string user = 2;
            if (!this_._internal_user().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_user());
            }
            // string coin = 3;
            if (!this_._internal_coin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_coin());
            }
            // string coin_second = 4;
            if (!this_._internal_coin_second().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_coin_second());
            }
            // string timeframe = 5;
            if (!this_._internal_timeframe().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timeframe());
            }
            // string algo = 6;
            if (!this_._internal_algo().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_algo());
            }
            // int32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
            // int32 price_decimal = 7;
            if (this_._internal_price_decimal() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_price_decimal());
            }
            // int32 size_decimal = 8;
            if (this_._internal_size_decimal() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_size_decimal());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StreamData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StreamData*>(&to_msg);
  auto& from = static_cast<const StreamData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.StreamData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_indicator_param()->MergeFrom(
      from._internal_indicator_param());
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_coin().empty()) {
    _this->_internal_set_coin(from._internal_coin());
  }
  if (!from._internal_coin_second().empty()) {
    _this->_internal_set_coin_second(from._internal_coin_second());
  }
  if (!from._internal_timeframe().empty()) {
    _this->_internal_set_timeframe(from._internal_timeframe());
  }
  if (!from._internal_algo().empty()) {
    _this->_internal_set_algo(from._internal_algo());
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_price_decimal() != 0) {
    _this->_impl_.price_decimal_ = from._impl_.price_decimal_;
  }
  if (from._internal_size_decimal() != 0) {
    _this->_impl_.size_decimal_ = from._impl_.size_decimal_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StreamData::CopyFrom(const StreamData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.StreamData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StreamData::InternalSwap(StreamData* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.indicator_param_.InternalSwap(&other->_impl_.indicator_param_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_, &other->_impl_.user_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coin_, &other->_impl_.coin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coin_second_, &other->_impl_.coin_second_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timeframe_, &other->_impl_.timeframe_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.algo_, &other->_impl_.algo_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamData, _impl_.size_decimal_)
      + sizeof(StreamData::_impl_.size_decimal_)
      - PROTOBUF_FIELD_OFFSET(StreamData, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::google::protobuf::Metadata StreamData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetStreamsByAlgoResponse::_Internal {
 public:
};

GetStreamsByAlgoResponse::GetStreamsByAlgoResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.GetStreamsByAlgoResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetStreamsByAlgoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::GetStreamsByAlgoResponse& from_msg)
      : streams_{visibility, arena, from.streams_},
        _cached_size_{0} {}

GetStreamsByAlgoResponse::GetStreamsByAlgoResponse(
    ::google::protobuf::Arena* arena,
    const GetStreamsByAlgoResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetStreamsByAlgoResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:chart_api.GetStreamsByAlgoResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetStreamsByAlgoResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : streams_{visibility, arena},
        _cached_size_{0} {}

inline void GetStreamsByAlgoResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetStreamsByAlgoResponse::~GetStreamsByAlgoResponse() {
  // @@protoc_insertion_point(destructor:chart_api.GetStreamsByAlgoResponse)
  SharedDtor(*this);
}
inline void GetStreamsByAlgoResponse::SharedDtor(MessageLite& self) {
  GetStreamsByAlgoResponse& this_ = static_cast<GetStreamsByAlgoResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetStreamsByAlgoResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetStreamsByAlgoResponse(arena);
}
constexpr auto GetStreamsByAlgoResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetStreamsByAlgoResponse, _impl_.streams_) +
          decltype(GetStreamsByAlgoResponse::_impl_.streams_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetStreamsByAlgoResponse), alignof(GetStreamsByAlgoResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetStreamsByAlgoResponse::PlacementNew_,
                                 sizeof(GetStreamsByAlgoResponse),
                                 alignof(GetStreamsByAlgoResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetStreamsByAlgoResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetStreamsByAlgoResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetStreamsByAlgoResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetStreamsByAlgoResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetStreamsByAlgoResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetStreamsByAlgoResponse>(), &GetStreamsByAlgoResponse::ByteSizeLong,
            &GetStreamsByAlgoResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetStreamsByAlgoResponse, _impl_._cached_size_),
        false,
    },
    &GetStreamsByAlgoResponse::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetStreamsByAlgoResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetStreamsByAlgoResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::GetStreamsByAlgoResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .chart_api.StreamData streams = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetStreamsByAlgoResponse, _impl_.streams_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .chart_api.StreamData streams = 1;
    {PROTOBUF_FIELD_OFFSET(GetStreamsByAlgoResponse, _impl_.streams_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::chart_api::StreamData>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetStreamsByAlgoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.GetStreamsByAlgoResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.streams_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetStreamsByAlgoResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetStreamsByAlgoResponse& this_ = static_cast<const GetStreamsByAlgoResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetStreamsByAlgoResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetStreamsByAlgoResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.GetStreamsByAlgoResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .chart_api.StreamData streams = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_streams_size());
               i < n; i++) {
            const auto& repfield = this_._internal_streams().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.GetStreamsByAlgoResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetStreamsByAlgoResponse::ByteSizeLong(const MessageLite& base) {
          const GetStreamsByAlgoResponse& this_ = static_cast<const GetStreamsByAlgoResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetStreamsByAlgoResponse::ByteSizeLong() const {
          const GetStreamsByAlgoResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.GetStreamsByAlgoResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .chart_api.StreamData streams = 1;
            {
              total_size += 1UL * this_._internal_streams_size();
              for (const auto& msg : this_._internal_streams()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetStreamsByAlgoResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetStreamsByAlgoResponse*>(&to_msg);
  auto& from = static_cast<const GetStreamsByAlgoResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.GetStreamsByAlgoResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_streams()->MergeFrom(
      from._internal_streams());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetStreamsByAlgoResponse::CopyFrom(const GetStreamsByAlgoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.GetStreamsByAlgoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetStreamsByAlgoResponse::InternalSwap(GetStreamsByAlgoResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.streams_.InternalSwap(&other->_impl_.streams_);
}

::google::protobuf::Metadata GetStreamsByAlgoResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetDataRequest::_Internal {
 public:
};

GetDataRequest::GetDataRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.GetDataRequest)
}
GetDataRequest::GetDataRequest(
    ::google::protobuf::Arena* arena, const GetDataRequest& from)
    : GetDataRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GetDataRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetDataRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_timestamp_),
           0,
           offsetof(Impl_, limit_) -
               offsetof(Impl_, from_timestamp_) +
               sizeof(Impl_::limit_));
}
GetDataRequest::~GetDataRequest() {
  // @@protoc_insertion_point(destructor:chart_api.GetDataRequest)
  SharedDtor(*this);
}
inline void GetDataRequest::SharedDtor(MessageLite& self) {
  GetDataRequest& this_ = static_cast<GetDataRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetDataRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetDataRequest(arena);
}
constexpr auto GetDataRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetDataRequest),
                                            alignof(GetDataRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetDataRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetDataRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetDataRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetDataRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetDataRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetDataRequest>(), &GetDataRequest::ByteSizeLong,
            &GetDataRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_._cached_size_),
        false,
    },
    &GetDataRequest::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetDataRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> GetDataRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::GetDataRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetDataRequest, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.id_)}},
    // int64 from_timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GetDataRequest, _impl_.from_timestamp_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.from_timestamp_)}},
    // int32 limit = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetDataRequest, _impl_.limit_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.limit_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 from_timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.from_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 limit = 3;
    {PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GetDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.GetDataRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.from_timestamp_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetDataRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetDataRequest& this_ = static_cast<const GetDataRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetDataRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetDataRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.GetDataRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 id = 1;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_id(), target);
          }

          // int64 from_timestamp = 2;
          if (this_._internal_from_timestamp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_from_timestamp(), target);
          }

          // int32 limit = 3;
          if (this_._internal_limit() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_limit(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.GetDataRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetDataRequest::ByteSizeLong(const MessageLite& base) {
          const GetDataRequest& this_ = static_cast<const GetDataRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetDataRequest::ByteSizeLong() const {
          const GetDataRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.GetDataRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int64 from_timestamp = 2;
            if (this_._internal_from_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_from_timestamp());
            }
            // int32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
            // int32 limit = 3;
            if (this_._internal_limit() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_limit());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetDataRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetDataRequest*>(&to_msg);
  auto& from = static_cast<const GetDataRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.GetDataRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from_timestamp() != 0) {
    _this->_impl_.from_timestamp_ = from._impl_.from_timestamp_;
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_limit() != 0) {
    _this->_impl_.limit_ = from._impl_.limit_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetDataRequest::CopyFrom(const GetDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.GetDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetDataRequest::InternalSwap(GetDataRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.limit_)
      + sizeof(GetDataRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetDataRequest, _impl_.from_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.from_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.from_timestamp_));
}

::google::protobuf::Metadata GetDataRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class DataPoint::_Internal {
 public:
};

DataPoint::DataPoint(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.DataPoint)
}
inline PROTOBUF_NDEBUG_INLINE DataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::DataPoint& from_msg)
      : indicators_{visibility, arena, from.indicators_},
        time_(arena, from.time_),
        timestamp_(arena, from.timestamp_),
        _cached_size_{0} {}

DataPoint::DataPoint(
    ::google::protobuf::Arena* arena,
    const DataPoint& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  DataPoint* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, open_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, open_),
           offsetof(Impl_, id_) -
               offsetof(Impl_, open_) +
               sizeof(Impl_::id_));

  // @@protoc_insertion_point(copy_constructor:chart_api.DataPoint)
}
inline PROTOBUF_NDEBUG_INLINE DataPoint::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : indicators_{visibility, arena},
        time_(arena),
        timestamp_(arena),
        _cached_size_{0} {}

inline void DataPoint::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, open_),
           0,
           offsetof(Impl_, id_) -
               offsetof(Impl_, open_) +
               sizeof(Impl_::id_));
}
DataPoint::~DataPoint() {
  // @@protoc_insertion_point(destructor:chart_api.DataPoint)
  SharedDtor(*this);
}
inline void DataPoint::SharedDtor(MessageLite& self) {
  DataPoint& this_ = static_cast<DataPoint&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.time_.Destroy();
  this_._impl_.timestamp_.Destroy();
  this_._impl_.~Impl_();
}

inline void* DataPoint::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) DataPoint(arena);
}
constexpr auto DataPoint::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.indicators_) +
          decltype(DataPoint::_impl_.indicators_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(DataPoint), alignof(DataPoint), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&DataPoint::PlacementNew_,
                                 sizeof(DataPoint),
                                 alignof(DataPoint));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull DataPoint::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_DataPoint_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &DataPoint::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<DataPoint>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &DataPoint::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<DataPoint>(), &DataPoint::ByteSizeLong,
            &DataPoint::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(DataPoint, _impl_._cached_size_),
        false,
    },
    &DataPoint::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* DataPoint::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 49, 2> DataPoint::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::DataPoint>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DataPoint, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.id_)}},
    // string time = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.time_)}},
    // string timestamp = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.timestamp_)}},
    // double open = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.open_)}},
    // double high = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.high_)}},
    // double low = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.low_)}},
    // double close = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.close_)}},
    // double volume = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.volume_)}},
    // repeated .chart_api.Indicator indicators = 9;
    {::_pbi::TcParser::FastMtR1,
     {74, 63, 0, PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.indicators_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string time = 2;
    {PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double open = 4;
    {PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.open_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double high = 5;
    {PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.high_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double low = 6;
    {PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.low_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double close = 7;
    {PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.close_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double volume = 8;
    {PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.volume_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // repeated .chart_api.Indicator indicators = 9;
    {PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.indicators_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::chart_api::Indicator>()},
  }}, {{
    "\23\0\4\11\0\0\0\0\0\0\0\0\0\0\0\0"
    "chart_api.DataPoint"
    "time"
    "timestamp"
  }},
};

PROTOBUF_NOINLINE void DataPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.DataPoint)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.indicators_.Clear();
  _impl_.time_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  ::memset(&_impl_.open_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.open_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* DataPoint::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const DataPoint& this_ = static_cast<const DataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* DataPoint::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const DataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.DataPoint)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 id = 1;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_id(), target);
          }

          // string time = 2;
          if (!this_._internal_time().empty()) {
            const std::string& _s = this_._internal_time();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.DataPoint.time");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string timestamp = 3;
          if (!this_._internal_timestamp().empty()) {
            const std::string& _s = this_._internal_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.DataPoint.timestamp");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // double open = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_open(), target);
          }

          // double high = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_high(), target);
          }

          // double low = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_low(), target);
          }

          // double close = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_close(), target);
          }

          // double volume = 8;
          if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_volume(), target);
          }

          // repeated .chart_api.Indicator indicators = 9;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_indicators_size());
               i < n; i++) {
            const auto& repfield = this_._internal_indicators().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    9, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.DataPoint)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t DataPoint::ByteSizeLong(const MessageLite& base) {
          const DataPoint& this_ = static_cast<const DataPoint&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t DataPoint::ByteSizeLong() const {
          const DataPoint& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.DataPoint)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .chart_api.Indicator indicators = 9;
            {
              total_size += 1UL * this_._internal_indicators_size();
              for (const auto& msg : this_._internal_indicators()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string time = 2;
            if (!this_._internal_time().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_time());
            }
            // string timestamp = 3;
            if (!this_._internal_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timestamp());
            }
            // double open = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_open()) != 0) {
              total_size += 9;
            }
            // double high = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_high()) != 0) {
              total_size += 9;
            }
            // double low = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_low()) != 0) {
              total_size += 9;
            }
            // double close = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
              total_size += 9;
            }
            // double volume = 8;
            if (::absl::bit_cast<::uint64_t>(this_._internal_volume()) != 0) {
              total_size += 9;
            }
            // int32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void DataPoint::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<DataPoint*>(&to_msg);
  auto& from = static_cast<const DataPoint&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.DataPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_indicators()->MergeFrom(
      from._internal_indicators());
  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_open()) != 0) {
    _this->_impl_.open_ = from._impl_.open_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_high()) != 0) {
    _this->_impl_.high_ = from._impl_.high_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_low()) != 0) {
    _this->_impl_.low_ = from._impl_.low_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_close()) != 0) {
    _this->_impl_.close_ = from._impl_.close_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_volume()) != 0) {
    _this->_impl_.volume_ = from._impl_.volume_;
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DataPoint::CopyFrom(const DataPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.DataPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void DataPoint::InternalSwap(DataPoint* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.indicators_.InternalSwap(&other->_impl_.indicators_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_, &other->_impl_.time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.id_)
      + sizeof(DataPoint::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(DataPoint, _impl_.open_)>(
          reinterpret_cast<char*>(&_impl_.open_),
          reinterpret_cast<char*>(&other->_impl_.open_));
}

::google::protobuf::Metadata DataPoint::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              Indicator_ParamEntry_DoNotUse::Indicator_ParamEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              Indicator_ParamEntry_DoNotUse::Indicator_ParamEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              Indicator_ParamEntry_DoNotUse::Indicator_ParamEntry_DoNotUse() : SuperType() {}
              Indicator_ParamEntry_DoNotUse::Indicator_ParamEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* Indicator_ParamEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) Indicator_ParamEntry_DoNotUse(arena);
              }
              constexpr auto Indicator_ParamEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Indicator_ParamEntry_DoNotUse),
                                                          alignof(Indicator_ParamEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull Indicator_ParamEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_Indicator_ParamEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &Indicator_ParamEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<Indicator_ParamEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &Indicator_ParamEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &Indicator_ParamEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(Indicator_ParamEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &Indicator_ParamEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_chart_5fapi_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* Indicator_ParamEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 42, 2> Indicator_ParamEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Indicator_ParamEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::Indicator_ParamEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Indicator_ParamEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Indicator_ParamEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Indicator_ParamEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(Indicator_ParamEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\36\3\0\0\0\0\0\0"
    "chart_api.Indicator.ParamEntry"
    "key"
  }},
};

// ===================================================================

class Indicator::_Internal {
 public:
};

Indicator::Indicator(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.Indicator)
}
inline PROTOBUF_NDEBUG_INLINE Indicator::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::Indicator& from_msg)
      : param_{visibility, arena, from.param_},
        volume_{visibility, arena, from.volume_},
        type_(arena, from.type_),
        name_(arena, from.name_),
        _cached_size_{0} {}

Indicator::Indicator(
    ::google::protobuf::Arena* arena,
    const Indicator& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Indicator* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:chart_api.Indicator)
}
inline PROTOBUF_NDEBUG_INLINE Indicator::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : param_{visibility, arena},
        volume_{visibility, arena},
        type_(arena),
        name_(arena),
        _cached_size_{0} {}

inline void Indicator::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Indicator::~Indicator() {
  // @@protoc_insertion_point(destructor:chart_api.Indicator)
  SharedDtor(*this);
}
inline void Indicator::SharedDtor(MessageLite& self) {
  Indicator& this_ = static_cast<Indicator&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.type_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Indicator::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Indicator(arena);
}
constexpr auto Indicator::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Indicator, _impl_.param_) +
          decltype(Indicator::_impl_.param_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Indicator, _impl_.param_) +
          decltype(Indicator::_impl_.param_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Indicator, _impl_.volume_) +
          decltype(Indicator::_impl_.volume_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Indicator), alignof(Indicator), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Indicator::PlacementNew_,
                                 sizeof(Indicator),
                                 alignof(Indicator));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Indicator::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Indicator_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Indicator::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Indicator>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Indicator::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Indicator>(), &Indicator::ByteSizeLong,
            &Indicator::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Indicator, _impl_._cached_size_),
        false,
    },
    &Indicator::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Indicator::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 41, 2> Indicator::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::Indicator>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .chart_api.Volume volume = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Indicator, _impl_.volume_)}},
    // string type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Indicator, _impl_.type_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Indicator, _impl_.name_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1;
    {PROTOBUF_FIELD_OFFSET(Indicator, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(Indicator, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // map<string, double> param = 3;
    {PROTOBUF_FIELD_OFFSET(Indicator, _impl_.param_), 0, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
    // repeated .chart_api.Volume volume = 4;
    {PROTOBUF_FIELD_OFFSET(Indicator, _impl_.volume_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::chart_api::Volume>()},
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Indicator()._impl_.param_)>(
        1, 0, 0, 9,
        1)},
  }}, {{
    "\23\4\4\5\0\0\0\0"
    "chart_api.Indicator"
    "type"
    "name"
    "param"
  }},
};

PROTOBUF_NOINLINE void Indicator::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.Indicator)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.param_.Clear();
  _impl_.volume_.Clear();
  _impl_.type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Indicator::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Indicator& this_ = static_cast<const Indicator&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Indicator::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Indicator& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.Indicator)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string type = 1;
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.Indicator.type");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.Indicator.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // map<string, double> param = 3;
          if (!this_._internal_param().empty()) {
            using MapType = ::google::protobuf::Map<std::string, double>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, double,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_DOUBLE>;
            const auto& field = this_._internal_param();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.Indicator.param");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    3, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.Indicator.param");
              }
            }
          }

          // repeated .chart_api.Volume volume = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_volume_size());
               i < n; i++) {
            const auto& repfield = this_._internal_volume().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.Indicator)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Indicator::ByteSizeLong(const MessageLite& base) {
          const Indicator& this_ = static_cast<const Indicator&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Indicator::ByteSizeLong() const {
          const Indicator& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.Indicator)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, double> param = 3;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_param_size());
              for (const auto& entry : this_._internal_param()) {
                total_size += _pbi::MapEntryFuncs<std::string, double,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_DOUBLE>::ByteSizeLong(entry.first, entry.second);
              }
            }
            // repeated .chart_api.Volume volume = 4;
            {
              total_size += 1UL * this_._internal_volume_size();
              for (const auto& msg : this_._internal_volume()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string type = 1;
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
            // string name = 2;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Indicator::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Indicator*>(&to_msg);
  auto& from = static_cast<const Indicator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.Indicator)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.param_.MergeFrom(from._impl_.param_);
  _this->_internal_mutable_volume()->MergeFrom(
      from._internal_volume());
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Indicator::CopyFrom(const Indicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.Indicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Indicator::InternalSwap(Indicator* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.param_.InternalSwap(&other->_impl_.param_);
  _impl_.volume_.InternalSwap(&other->_impl_.volume_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
}

::google::protobuf::Metadata Indicator::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

#if defined(PROTOBUF_CUSTOM_VTABLE)
              Volume_ParamsEntry_DoNotUse::Volume_ParamsEntry_DoNotUse() : SuperType(_class_data_.base()) {}
              Volume_ParamsEntry_DoNotUse::Volume_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena)
                  : SuperType(arena, _class_data_.base()) {}
#else   // PROTOBUF_CUSTOM_VTABLE
              Volume_ParamsEntry_DoNotUse::Volume_ParamsEntry_DoNotUse() : SuperType() {}
              Volume_ParamsEntry_DoNotUse::Volume_ParamsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
#endif  // PROTOBUF_CUSTOM_VTABLE
              inline void* Volume_ParamsEntry_DoNotUse::PlacementNew_(const void*, void* mem,
                                                      ::google::protobuf::Arena* arena) {
                return ::new (mem) Volume_ParamsEntry_DoNotUse(arena);
              }
              constexpr auto Volume_ParamsEntry_DoNotUse::InternalNewImpl_() {
                return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Volume_ParamsEntry_DoNotUse),
                                                          alignof(Volume_ParamsEntry_DoNotUse));
              }
              PROTOBUF_CONSTINIT
              PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
              const ::google::protobuf::internal::ClassDataFull Volume_ParamsEntry_DoNotUse::_class_data_ = {
                  ::google::protobuf::internal::ClassData{
                      &_Volume_ParamsEntry_DoNotUse_default_instance_._instance,
                      &_table_.header,
                      nullptr,  // OnDemandRegisterArenaDtor
                      nullptr,  // IsInitialized
                      &Volume_ParamsEntry_DoNotUse::MergeImpl,
                      ::google::protobuf::Message::GetNewImpl<Volume_ParamsEntry_DoNotUse>(),
              #if defined(PROTOBUF_CUSTOM_VTABLE)
                      &Volume_ParamsEntry_DoNotUse::SharedDtor,
                      static_cast<void (::google::protobuf::MessageLite::*)()>(
                          &Volume_ParamsEntry_DoNotUse::ClearImpl),
                          ::google::protobuf::Message::ByteSizeLongImpl, ::google::protobuf::Message::_InternalSerializeImpl
                          ,
              #endif  // PROTOBUF_CUSTOM_VTABLE
                      PROTOBUF_FIELD_OFFSET(Volume_ParamsEntry_DoNotUse, _impl_._cached_size_),
                      false,
                  },
                  &Volume_ParamsEntry_DoNotUse::kDescriptorMethods,
                  &descriptor_table_chart_5fapi_2eproto,
                  nullptr,  // tracker
              };
              const ::google::protobuf::internal::ClassData* Volume_ParamsEntry_DoNotUse::GetClassData() const {
                ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
                ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
                return _class_data_.base();
              }
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 40, 2> Volume_ParamsEntry_DoNotUse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Volume_ParamsEntry_DoNotUse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::DiscardEverythingFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::Volume_ParamsEntry_DoNotUse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // double value = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 63, 0, PROTOBUF_FIELD_OFFSET(Volume_ParamsEntry_DoNotUse, _impl_.value_)}},
    // string key = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Volume_ParamsEntry_DoNotUse, _impl_.key_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string key = 1;
    {PROTOBUF_FIELD_OFFSET(Volume_ParamsEntry_DoNotUse, _impl_.key_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double value = 2;
    {PROTOBUF_FIELD_OFFSET(Volume_ParamsEntry_DoNotUse, _impl_.value_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }},
  // no aux_entries
  {{
    "\34\3\0\0\0\0\0\0"
    "chart_api.Volume.ParamsEntry"
    "key"
  }},
};

// ===================================================================

class Volume::_Internal {
 public:
};

Volume::Volume(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.Volume)
}
inline PROTOBUF_NDEBUG_INLINE Volume::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::Volume& from_msg)
      : params_{visibility, arena, from.params_},
        _cached_size_{0} {}

Volume::Volume(
    ::google::protobuf::Arena* arena,
    const Volume& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Volume* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:chart_api.Volume)
}
inline PROTOBUF_NDEBUG_INLINE Volume::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : params_{visibility, arena},
        _cached_size_{0} {}

inline void Volume::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Volume::~Volume() {
  // @@protoc_insertion_point(destructor:chart_api.Volume)
  SharedDtor(*this);
}
inline void Volume::SharedDtor(MessageLite& self) {
  Volume& this_ = static_cast<Volume&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Volume::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Volume(arena);
}
constexpr auto Volume::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Volume, _impl_.params_) +
          decltype(Volume::_impl_.params_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(Volume, _impl_.params_) +
          decltype(Volume::_impl_.params_)::
              InternalGetArenaOffsetAlt(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Volume), alignof(Volume), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Volume::PlacementNew_,
                                 sizeof(Volume),
                                 alignof(Volume));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Volume::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Volume_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Volume::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Volume>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Volume::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Volume>(), &Volume::ByteSizeLong,
            &Volume::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Volume, _impl_._cached_size_),
        false,
    },
    &Volume::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Volume::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 31, 2> Volume::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::Volume>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // map<string, double> params = 1;
    {PROTOBUF_FIELD_OFFSET(Volume, _impl_.params_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMap)},
  }}, {{
    {::_pbi::TcParser::GetMapAuxInfo<
        decltype(Volume()._impl_.params_)>(
        1, 0, 0, 9,
        1)},
  }}, {{
    "\20\6\0\0\0\0\0\0"
    "chart_api.Volume"
    "params"
  }},
};

PROTOBUF_NOINLINE void Volume::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.Volume)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Volume::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Volume& this_ = static_cast<const Volume&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Volume::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Volume& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.Volume)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // map<string, double> params = 1;
          if (!this_._internal_params().empty()) {
            using MapType = ::google::protobuf::Map<std::string, double>;
            using WireHelper = _pbi::MapEntryFuncs<std::string, double,
                                           _pbi::WireFormatLite::TYPE_STRING,
                                           _pbi::WireFormatLite::TYPE_DOUBLE>;
            const auto& field = this_._internal_params();

            if (stream->IsSerializationDeterministic() && field.size() > 1) {
              for (const auto& entry : ::google::protobuf::internal::MapSorterPtr<MapType>(field)) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.Volume.params");
              }
            } else {
              for (const auto& entry : field) {
                target = WireHelper::InternalSerialize(
                    1, entry.first, entry.second, target, stream);
                ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                    entry.first.data(), static_cast<int>(entry.first.length()),
 ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.Volume.params");
              }
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.Volume)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Volume::ByteSizeLong(const MessageLite& base) {
          const Volume& this_ = static_cast<const Volume&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Volume::ByteSizeLong() const {
          const Volume& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.Volume)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // map<string, double> params = 1;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_params_size());
              for (const auto& entry : this_._internal_params()) {
                total_size += _pbi::MapEntryFuncs<std::string, double,
                                               _pbi::WireFormatLite::TYPE_STRING,
                                               _pbi::WireFormatLite::TYPE_DOUBLE>::ByteSizeLong(entry.first, entry.second);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Volume::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Volume*>(&to_msg);
  auto& from = static_cast<const Volume&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.Volume)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Volume::CopyFrom(const Volume& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.Volume)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Volume::InternalSwap(Volume* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
}

::google::protobuf::Metadata Volume::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetDataResponse::_Internal {
 public:
};

GetDataResponse::GetDataResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.GetDataResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetDataResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::GetDataResponse& from_msg)
      : data_{visibility, arena, from.data_},
        _cached_size_{0} {}

GetDataResponse::GetDataResponse(
    ::google::protobuf::Arena* arena,
    const GetDataResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetDataResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:chart_api.GetDataResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetDataResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : data_{visibility, arena},
        _cached_size_{0} {}

inline void GetDataResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetDataResponse::~GetDataResponse() {
  // @@protoc_insertion_point(destructor:chart_api.GetDataResponse)
  SharedDtor(*this);
}
inline void GetDataResponse::SharedDtor(MessageLite& self) {
  GetDataResponse& this_ = static_cast<GetDataResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetDataResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetDataResponse(arena);
}
constexpr auto GetDataResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetDataResponse, _impl_.data_) +
          decltype(GetDataResponse::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetDataResponse), alignof(GetDataResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetDataResponse::PlacementNew_,
                                 sizeof(GetDataResponse),
                                 alignof(GetDataResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetDataResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetDataResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetDataResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetDataResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetDataResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetDataResponse>(), &GetDataResponse::ByteSizeLong,
            &GetDataResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetDataResponse, _impl_._cached_size_),
        false,
    },
    &GetDataResponse::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetDataResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetDataResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::GetDataResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .chart_api.DataPoint data = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetDataResponse, _impl_.data_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .chart_api.DataPoint data = 1;
    {PROTOBUF_FIELD_OFFSET(GetDataResponse, _impl_.data_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::chart_api::DataPoint>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.GetDataResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetDataResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetDataResponse& this_ = static_cast<const GetDataResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetDataResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetDataResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.GetDataResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .chart_api.DataPoint data = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_data_size());
               i < n; i++) {
            const auto& repfield = this_._internal_data().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.GetDataResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetDataResponse::ByteSizeLong(const MessageLite& base) {
          const GetDataResponse& this_ = static_cast<const GetDataResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetDataResponse::ByteSizeLong() const {
          const GetDataResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.GetDataResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .chart_api.DataPoint data = 1;
            {
              total_size += 1UL * this_._internal_data_size();
              for (const auto& msg : this_._internal_data()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetDataResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetDataResponse*>(&to_msg);
  auto& from = static_cast<const GetDataResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.GetDataResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetDataResponse::CopyFrom(const GetDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.GetDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetDataResponse::InternalSwap(GetDataResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
}

::google::protobuf::Metadata GetDataResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetLogsRequest::_Internal {
 public:
};

GetLogsRequest::GetLogsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.GetLogsRequest)
}
GetLogsRequest::GetLogsRequest(
    ::google::protobuf::Arena* arena, const GetLogsRequest& from)
    : GetLogsRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE GetLogsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetLogsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_timestamp_),
           0,
           offsetof(Impl_, limit_) -
               offsetof(Impl_, from_timestamp_) +
               sizeof(Impl_::limit_));
}
GetLogsRequest::~GetLogsRequest() {
  // @@protoc_insertion_point(destructor:chart_api.GetLogsRequest)
  SharedDtor(*this);
}
inline void GetLogsRequest::SharedDtor(MessageLite& self) {
  GetLogsRequest& this_ = static_cast<GetLogsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetLogsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetLogsRequest(arena);
}
constexpr auto GetLogsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetLogsRequest),
                                            alignof(GetLogsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetLogsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetLogsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetLogsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetLogsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetLogsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetLogsRequest>(), &GetLogsRequest::ByteSizeLong,
            &GetLogsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_._cached_size_),
        false,
    },
    &GetLogsRequest::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetLogsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> GetLogsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::GetLogsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 limit = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetLogsRequest, _impl_.limit_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.limit_)}},
    // int32 id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetLogsRequest, _impl_.id_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.id_)}},
    // int64 from_timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(GetLogsRequest, _impl_.from_timestamp_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.from_timestamp_)}},
    // bool orders_only = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(GetLogsRequest, _impl_.orders_only_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.orders_only_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 id = 1;
    {PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 from_timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.from_timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // bool orders_only = 3;
    {PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.orders_only_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 limit = 4;
    {PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.limit_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void GetLogsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.GetLogsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.from_timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.limit_) -
      reinterpret_cast<char*>(&_impl_.from_timestamp_)) + sizeof(_impl_.limit_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetLogsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetLogsRequest& this_ = static_cast<const GetLogsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetLogsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetLogsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.GetLogsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 id = 1;
          if (this_._internal_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_id(), target);
          }

          // int64 from_timestamp = 2;
          if (this_._internal_from_timestamp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<2>(
                    stream, this_._internal_from_timestamp(), target);
          }

          // bool orders_only = 3;
          if (this_._internal_orders_only() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_orders_only(), target);
          }

          // int32 limit = 4;
          if (this_._internal_limit() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_limit(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.GetLogsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetLogsRequest::ByteSizeLong(const MessageLite& base) {
          const GetLogsRequest& this_ = static_cast<const GetLogsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetLogsRequest::ByteSizeLong() const {
          const GetLogsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.GetLogsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int64 from_timestamp = 2;
            if (this_._internal_from_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_from_timestamp());
            }
            // int32 id = 1;
            if (this_._internal_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_id());
            }
            // bool orders_only = 3;
            if (this_._internal_orders_only() != 0) {
              total_size += 2;
            }
            // int32 limit = 4;
            if (this_._internal_limit() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_limit());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetLogsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetLogsRequest*>(&to_msg);
  auto& from = static_cast<const GetLogsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.GetLogsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_from_timestamp() != 0) {
    _this->_impl_.from_timestamp_ = from._impl_.from_timestamp_;
  }
  if (from._internal_id() != 0) {
    _this->_impl_.id_ = from._impl_.id_;
  }
  if (from._internal_orders_only() != 0) {
    _this->_impl_.orders_only_ = from._impl_.orders_only_;
  }
  if (from._internal_limit() != 0) {
    _this->_impl_.limit_ = from._impl_.limit_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetLogsRequest::CopyFrom(const GetLogsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.GetLogsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetLogsRequest::InternalSwap(GetLogsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.limit_)
      + sizeof(GetLogsRequest::_impl_.limit_)
      - PROTOBUF_FIELD_OFFSET(GetLogsRequest, _impl_.from_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.from_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.from_timestamp_));
}

::google::protobuf::Metadata GetLogsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class LogEntry::_Internal {
 public:
};

LogEntry::LogEntry(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.LogEntry)
}
inline PROTOBUF_NDEBUG_INLINE LogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::LogEntry& from_msg)
      : time_(arena, from.time_),
        timestamp_(arena, from.timestamp_),
        algo_(arena, from.algo_),
        timeframe_(arena, from.timeframe_),
        block_name_(arena, from.block_name_),
        indicator_param_(arena, from.indicator_param_),
        vars_(arena, from.vars_),
        side_(arena, from.side_),
        order_type_long_(arena, from.order_type_long_),
        order_type_short_(arena, from.order_type_short_),
        user_(arena, from.user_),
        mode_(arena, from.mode_),
        mode_time_(arena, from.mode_time_),
        coin_(arena, from.coin_),
        coin_second_(arena, from.coin_second_),
        _cached_size_{0} {}

LogEntry::LogEntry(
    ::google::protobuf::Arena* arena,
    const LogEntry& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  LogEntry* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, close_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, close_),
           offsetof(Impl_, block_id_) -
               offsetof(Impl_, close_) +
               sizeof(Impl_::block_id_));

  // @@protoc_insertion_point(copy_constructor:chart_api.LogEntry)
}
inline PROTOBUF_NDEBUG_INLINE LogEntry::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : time_(arena),
        timestamp_(arena),
        algo_(arena),
        timeframe_(arena),
        block_name_(arena),
        indicator_param_(arena),
        vars_(arena),
        side_(arena),
        order_type_long_(arena),
        order_type_short_(arena),
        user_(arena),
        mode_(arena),
        mode_time_(arena),
        coin_(arena),
        coin_second_(arena),
        _cached_size_{0} {}

inline void LogEntry::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, close_),
           0,
           offsetof(Impl_, block_id_) -
               offsetof(Impl_, close_) +
               sizeof(Impl_::block_id_));
}
LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:chart_api.LogEntry)
  SharedDtor(*this);
}
inline void LogEntry::SharedDtor(MessageLite& self) {
  LogEntry& this_ = static_cast<LogEntry&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.time_.Destroy();
  this_._impl_.timestamp_.Destroy();
  this_._impl_.algo_.Destroy();
  this_._impl_.timeframe_.Destroy();
  this_._impl_.block_name_.Destroy();
  this_._impl_.indicator_param_.Destroy();
  this_._impl_.vars_.Destroy();
  this_._impl_.side_.Destroy();
  this_._impl_.order_type_long_.Destroy();
  this_._impl_.order_type_short_.Destroy();
  this_._impl_.user_.Destroy();
  this_._impl_.mode_.Destroy();
  this_._impl_.mode_time_.Destroy();
  this_._impl_.coin_.Destroy();
  this_._impl_.coin_second_.Destroy();
  this_._impl_.~Impl_();
}

inline void* LogEntry::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) LogEntry(arena);
}
constexpr auto LogEntry::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(LogEntry),
                                            alignof(LogEntry));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull LogEntry::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_LogEntry_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &LogEntry::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<LogEntry>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &LogEntry::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<LogEntry>(), &LogEntry::ByteSizeLong,
            &LogEntry::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(LogEntry, _impl_._cached_size_),
        false,
    },
    &LogEntry::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* LogEntry::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 44, 0, 189, 9> LogEntry::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    49, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    345,  // skipmap
    offsetof(decltype(_table_), field_entries),
    44,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::LogEntry>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string time = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.time_)}},
    // string timestamp = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.timestamp_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string algo = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.algo_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string timeframe = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.timeframe_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // int32 block_id = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(LogEntry, _impl_.block_id_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.block_id_)}},
    // string block_name = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.block_name_)}},
    // string indicator_param = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.indicator_param_)}},
    // string vars = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.vars_)}},
    // double close = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.close_)}},
    // double balance = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.balance_)}},
    // double equity = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.equity_)}},
    // double money = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.money_)}},
    // string side = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.side_)}},
    // double order_leverage_long = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_leverage_long_)}},
    // double leverage_long = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.leverage_long_)}},
    // double order_size_long = 21;
    {::_pbi::TcParser::FastF64S2,
     {425, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_size_long_)}},
    // double order_price_long = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_price_long_)}},
    // double order_usd_long = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_usd_long_)}},
    // string order_type_long = 24;
    {::_pbi::TcParser::FastUS2,
     {450, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_type_long_)}},
    // double position_size_long = 25;
    {::_pbi::TcParser::FastF64S2,
     {457, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.position_size_long_)}},
    // double position_price_long = 26;
    {::_pbi::TcParser::FastF64S2,
     {465, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.position_price_long_)}},
    // double position_usd_long = 27;
    {::_pbi::TcParser::FastF64S2,
     {473, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.position_usd_long_)}},
    // double pnl_long = 28;
    {::_pbi::TcParser::FastF64S2,
     {481, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.pnl_long_)}},
    // double fee_long = 29;
    {::_pbi::TcParser::FastF64S2,
     {489, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.fee_long_)}},
    // double funding_long = 30;
    {::_pbi::TcParser::FastF64S2,
     {497, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.funding_long_)}},
    // double rpl_long = 31;
    {::_pbi::TcParser::FastF64S2,
     {505, 63, 0, PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.rpl_long_)}},
  }}, {{
    33, 0, 2,
    0, 27, 65534, 43,
    65535, 65535
  }}, {{
    // string time = 2;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string algo = 6;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.algo_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string timeframe = 8;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.timeframe_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 block_id = 10;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.block_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string block_name = 11;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.block_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string indicator_param = 12;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.indicator_param_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string vars = 13;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.vars_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double close = 14;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.close_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double balance = 15;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.balance_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double equity = 16;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.equity_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double money = 17;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.money_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string side = 18;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.side_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double order_leverage_long = 19;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_leverage_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double leverage_long = 20;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.leverage_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double order_size_long = 21;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_size_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double order_price_long = 22;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_price_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double order_usd_long = 23;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_usd_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string order_type_long = 24;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_type_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double position_size_long = 25;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.position_size_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double position_price_long = 26;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.position_price_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double position_usd_long = 27;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.position_usd_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double pnl_long = 28;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.pnl_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double fee_long = 29;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.fee_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double funding_long = 30;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.funding_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double rpl_long = 31;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.rpl_long_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double order_leverage_short = 32;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_leverage_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double leverage_short = 33;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.leverage_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double order_size_short = 34;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_size_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double order_price_short = 35;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_price_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double order_usd_short = 36;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_usd_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string order_type_short = 37;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.order_type_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double position_usd_short = 38;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.position_usd_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double position_size_short = 39;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.position_size_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double position_price_short = 40;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.position_price_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double pnl_short = 41;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.pnl_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double fee_short = 42;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.fee_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double funding_short = 43;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.funding_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double rpl_short = 44;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.rpl_short_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string user = 45;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.user_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mode = 46;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.mode_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string mode_time = 47;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.mode_time_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string coin = 48;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.coin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string coin_second = 49;
    {PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.coin_second_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\22\4\11\4\11\0\12\17\4\0\0\0\0\4\0\0\0\0\0\17\0\0\0\0\0\0\0\0\0\0\0\0\20\0\0\0\0\0\0\0\4\4\11\4\13\0\0\0"
    "chart_api.LogEntry"
    "time"
    "timestamp"
    "algo"
    "timeframe"
    "block_name"
    "indicator_param"
    "vars"
    "side"
    "order_type_long"
    "order_type_short"
    "user"
    "mode"
    "mode_time"
    "coin"
    "coin_second"
  }},
};

PROTOBUF_NOINLINE void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.LogEntry)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_.ClearToEmpty();
  _impl_.timestamp_.ClearToEmpty();
  _impl_.algo_.ClearToEmpty();
  _impl_.timeframe_.ClearToEmpty();
  _impl_.block_name_.ClearToEmpty();
  _impl_.indicator_param_.ClearToEmpty();
  _impl_.vars_.ClearToEmpty();
  _impl_.side_.ClearToEmpty();
  _impl_.order_type_long_.ClearToEmpty();
  _impl_.order_type_short_.ClearToEmpty();
  _impl_.user_.ClearToEmpty();
  _impl_.mode_.ClearToEmpty();
  _impl_.mode_time_.ClearToEmpty();
  _impl_.coin_.ClearToEmpty();
  _impl_.coin_second_.ClearToEmpty();
  ::memset(&_impl_.close_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.block_id_) -
      reinterpret_cast<char*>(&_impl_.close_)) + sizeof(_impl_.block_id_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* LogEntry::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const LogEntry& this_ = static_cast<const LogEntry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* LogEntry::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const LogEntry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.LogEntry)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string time = 2;
          if (!this_._internal_time().empty()) {
            const std::string& _s = this_._internal_time();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.time");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string timestamp = 3;
          if (!this_._internal_timestamp().empty()) {
            const std::string& _s = this_._internal_timestamp();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.timestamp");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string algo = 6;
          if (!this_._internal_algo().empty()) {
            const std::string& _s = this_._internal_algo();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.algo");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string timeframe = 8;
          if (!this_._internal_timeframe().empty()) {
            const std::string& _s = this_._internal_timeframe();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.timeframe");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // int32 block_id = 10;
          if (this_._internal_block_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<10>(
                    stream, this_._internal_block_id(), target);
          }

          // string block_name = 11;
          if (!this_._internal_block_name().empty()) {
            const std::string& _s = this_._internal_block_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.block_name");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // string indicator_param = 12;
          if (!this_._internal_indicator_param().empty()) {
            const std::string& _s = this_._internal_indicator_param();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.indicator_param");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // string vars = 13;
          if (!this_._internal_vars().empty()) {
            const std::string& _s = this_._internal_vars();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.vars");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // double close = 14;
          if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                14, this_._internal_close(), target);
          }

          // double balance = 15;
          if (::absl::bit_cast<::uint64_t>(this_._internal_balance()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                15, this_._internal_balance(), target);
          }

          // double equity = 16;
          if (::absl::bit_cast<::uint64_t>(this_._internal_equity()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                16, this_._internal_equity(), target);
          }

          // double money = 17;
          if (::absl::bit_cast<::uint64_t>(this_._internal_money()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                17, this_._internal_money(), target);
          }

          // string side = 18;
          if (!this_._internal_side().empty()) {
            const std::string& _s = this_._internal_side();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.side");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // double order_leverage_long = 19;
          if (::absl::bit_cast<::uint64_t>(this_._internal_order_leverage_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                19, this_._internal_order_leverage_long(), target);
          }

          // double leverage_long = 20;
          if (::absl::bit_cast<::uint64_t>(this_._internal_leverage_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                20, this_._internal_leverage_long(), target);
          }

          // double order_size_long = 21;
          if (::absl::bit_cast<::uint64_t>(this_._internal_order_size_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                21, this_._internal_order_size_long(), target);
          }

          // double order_price_long = 22;
          if (::absl::bit_cast<::uint64_t>(this_._internal_order_price_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                22, this_._internal_order_price_long(), target);
          }

          // double order_usd_long = 23;
          if (::absl::bit_cast<::uint64_t>(this_._internal_order_usd_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                23, this_._internal_order_usd_long(), target);
          }

          // string order_type_long = 24;
          if (!this_._internal_order_type_long().empty()) {
            const std::string& _s = this_._internal_order_type_long();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.order_type_long");
            target = stream->WriteStringMaybeAliased(24, _s, target);
          }

          // double position_size_long = 25;
          if (::absl::bit_cast<::uint64_t>(this_._internal_position_size_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                25, this_._internal_position_size_long(), target);
          }

          // double position_price_long = 26;
          if (::absl::bit_cast<::uint64_t>(this_._internal_position_price_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                26, this_._internal_position_price_long(), target);
          }

          // double position_usd_long = 27;
          if (::absl::bit_cast<::uint64_t>(this_._internal_position_usd_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                27, this_._internal_position_usd_long(), target);
          }

          // double pnl_long = 28;
          if (::absl::bit_cast<::uint64_t>(this_._internal_pnl_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                28, this_._internal_pnl_long(), target);
          }

          // double fee_long = 29;
          if (::absl::bit_cast<::uint64_t>(this_._internal_fee_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                29, this_._internal_fee_long(), target);
          }

          // double funding_long = 30;
          if (::absl::bit_cast<::uint64_t>(this_._internal_funding_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                30, this_._internal_funding_long(), target);
          }

          // double rpl_long = 31;
          if (::absl::bit_cast<::uint64_t>(this_._internal_rpl_long()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                31, this_._internal_rpl_long(), target);
          }

          // double order_leverage_short = 32;
          if (::absl::bit_cast<::uint64_t>(this_._internal_order_leverage_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                32, this_._internal_order_leverage_short(), target);
          }

          // double leverage_short = 33;
          if (::absl::bit_cast<::uint64_t>(this_._internal_leverage_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                33, this_._internal_leverage_short(), target);
          }

          // double order_size_short = 34;
          if (::absl::bit_cast<::uint64_t>(this_._internal_order_size_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                34, this_._internal_order_size_short(), target);
          }

          // double order_price_short = 35;
          if (::absl::bit_cast<::uint64_t>(this_._internal_order_price_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                35, this_._internal_order_price_short(), target);
          }

          // double order_usd_short = 36;
          if (::absl::bit_cast<::uint64_t>(this_._internal_order_usd_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                36, this_._internal_order_usd_short(), target);
          }

          // string order_type_short = 37;
          if (!this_._internal_order_type_short().empty()) {
            const std::string& _s = this_._internal_order_type_short();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.order_type_short");
            target = stream->WriteStringMaybeAliased(37, _s, target);
          }

          // double position_usd_short = 38;
          if (::absl::bit_cast<::uint64_t>(this_._internal_position_usd_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                38, this_._internal_position_usd_short(), target);
          }

          // double position_size_short = 39;
          if (::absl::bit_cast<::uint64_t>(this_._internal_position_size_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                39, this_._internal_position_size_short(), target);
          }

          // double position_price_short = 40;
          if (::absl::bit_cast<::uint64_t>(this_._internal_position_price_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                40, this_._internal_position_price_short(), target);
          }

          // double pnl_short = 41;
          if (::absl::bit_cast<::uint64_t>(this_._internal_pnl_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                41, this_._internal_pnl_short(), target);
          }

          // double fee_short = 42;
          if (::absl::bit_cast<::uint64_t>(this_._internal_fee_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                42, this_._internal_fee_short(), target);
          }

          // double funding_short = 43;
          if (::absl::bit_cast<::uint64_t>(this_._internal_funding_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                43, this_._internal_funding_short(), target);
          }

          // double rpl_short = 44;
          if (::absl::bit_cast<::uint64_t>(this_._internal_rpl_short()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                44, this_._internal_rpl_short(), target);
          }

          // string user = 45;
          if (!this_._internal_user().empty()) {
            const std::string& _s = this_._internal_user();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.user");
            target = stream->WriteStringMaybeAliased(45, _s, target);
          }

          // string mode = 46;
          if (!this_._internal_mode().empty()) {
            const std::string& _s = this_._internal_mode();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.mode");
            target = stream->WriteStringMaybeAliased(46, _s, target);
          }

          // string mode_time = 47;
          if (!this_._internal_mode_time().empty()) {
            const std::string& _s = this_._internal_mode_time();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.mode_time");
            target = stream->WriteStringMaybeAliased(47, _s, target);
          }

          // string coin = 48;
          if (!this_._internal_coin().empty()) {
            const std::string& _s = this_._internal_coin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.coin");
            target = stream->WriteStringMaybeAliased(48, _s, target);
          }

          // string coin_second = 49;
          if (!this_._internal_coin_second().empty()) {
            const std::string& _s = this_._internal_coin_second();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "chart_api.LogEntry.coin_second");
            target = stream->WriteStringMaybeAliased(49, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.LogEntry)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t LogEntry::ByteSizeLong(const MessageLite& base) {
          const LogEntry& this_ = static_cast<const LogEntry&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t LogEntry::ByteSizeLong() const {
          const LogEntry& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.LogEntry)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string time = 2;
            if (!this_._internal_time().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_time());
            }
            // string timestamp = 3;
            if (!this_._internal_timestamp().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timestamp());
            }
            // string algo = 6;
            if (!this_._internal_algo().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_algo());
            }
            // string timeframe = 8;
            if (!this_._internal_timeframe().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_timeframe());
            }
            // string block_name = 11;
            if (!this_._internal_block_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_block_name());
            }
            // string indicator_param = 12;
            if (!this_._internal_indicator_param().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_indicator_param());
            }
            // string vars = 13;
            if (!this_._internal_vars().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_vars());
            }
            // string side = 18;
            if (!this_._internal_side().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_side());
            }
            // string order_type_long = 24;
            if (!this_._internal_order_type_long().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_order_type_long());
            }
            // string order_type_short = 37;
            if (!this_._internal_order_type_short().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_order_type_short());
            }
            // string user = 45;
            if (!this_._internal_user().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_user());
            }
            // string mode = 46;
            if (!this_._internal_mode().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mode());
            }
            // string mode_time = 47;
            if (!this_._internal_mode_time().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_mode_time());
            }
            // string coin = 48;
            if (!this_._internal_coin().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_coin());
            }
            // string coin_second = 49;
            if (!this_._internal_coin_second().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_coin_second());
            }
            // double close = 14;
            if (::absl::bit_cast<::uint64_t>(this_._internal_close()) != 0) {
              total_size += 9;
            }
            // double balance = 15;
            if (::absl::bit_cast<::uint64_t>(this_._internal_balance()) != 0) {
              total_size += 9;
            }
            // double equity = 16;
            if (::absl::bit_cast<::uint64_t>(this_._internal_equity()) != 0) {
              total_size += 10;
            }
            // double money = 17;
            if (::absl::bit_cast<::uint64_t>(this_._internal_money()) != 0) {
              total_size += 10;
            }
            // double order_leverage_long = 19;
            if (::absl::bit_cast<::uint64_t>(this_._internal_order_leverage_long()) != 0) {
              total_size += 10;
            }
            // double leverage_long = 20;
            if (::absl::bit_cast<::uint64_t>(this_._internal_leverage_long()) != 0) {
              total_size += 10;
            }
            // double order_size_long = 21;
            if (::absl::bit_cast<::uint64_t>(this_._internal_order_size_long()) != 0) {
              total_size += 10;
            }
            // double order_price_long = 22;
            if (::absl::bit_cast<::uint64_t>(this_._internal_order_price_long()) != 0) {
              total_size += 10;
            }
            // double order_usd_long = 23;
            if (::absl::bit_cast<::uint64_t>(this_._internal_order_usd_long()) != 0) {
              total_size += 10;
            }
            // double position_size_long = 25;
            if (::absl::bit_cast<::uint64_t>(this_._internal_position_size_long()) != 0) {
              total_size += 10;
            }
            // double position_price_long = 26;
            if (::absl::bit_cast<::uint64_t>(this_._internal_position_price_long()) != 0) {
              total_size += 10;
            }
            // double position_usd_long = 27;
            if (::absl::bit_cast<::uint64_t>(this_._internal_position_usd_long()) != 0) {
              total_size += 10;
            }
            // double pnl_long = 28;
            if (::absl::bit_cast<::uint64_t>(this_._internal_pnl_long()) != 0) {
              total_size += 10;
            }
            // double fee_long = 29;
            if (::absl::bit_cast<::uint64_t>(this_._internal_fee_long()) != 0) {
              total_size += 10;
            }
            // double funding_long = 30;
            if (::absl::bit_cast<::uint64_t>(this_._internal_funding_long()) != 0) {
              total_size += 10;
            }
            // double rpl_long = 31;
            if (::absl::bit_cast<::uint64_t>(this_._internal_rpl_long()) != 0) {
              total_size += 10;
            }
            // double order_leverage_short = 32;
            if (::absl::bit_cast<::uint64_t>(this_._internal_order_leverage_short()) != 0) {
              total_size += 10;
            }
            // double leverage_short = 33;
            if (::absl::bit_cast<::uint64_t>(this_._internal_leverage_short()) != 0) {
              total_size += 10;
            }
            // double order_size_short = 34;
            if (::absl::bit_cast<::uint64_t>(this_._internal_order_size_short()) != 0) {
              total_size += 10;
            }
            // double order_price_short = 35;
            if (::absl::bit_cast<::uint64_t>(this_._internal_order_price_short()) != 0) {
              total_size += 10;
            }
            // double order_usd_short = 36;
            if (::absl::bit_cast<::uint64_t>(this_._internal_order_usd_short()) != 0) {
              total_size += 10;
            }
            // double position_usd_short = 38;
            if (::absl::bit_cast<::uint64_t>(this_._internal_position_usd_short()) != 0) {
              total_size += 10;
            }
            // double position_size_short = 39;
            if (::absl::bit_cast<::uint64_t>(this_._internal_position_size_short()) != 0) {
              total_size += 10;
            }
            // double position_price_short = 40;
            if (::absl::bit_cast<::uint64_t>(this_._internal_position_price_short()) != 0) {
              total_size += 10;
            }
            // double pnl_short = 41;
            if (::absl::bit_cast<::uint64_t>(this_._internal_pnl_short()) != 0) {
              total_size += 10;
            }
            // double fee_short = 42;
            if (::absl::bit_cast<::uint64_t>(this_._internal_fee_short()) != 0) {
              total_size += 10;
            }
            // double funding_short = 43;
            if (::absl::bit_cast<::uint64_t>(this_._internal_funding_short()) != 0) {
              total_size += 10;
            }
            // double rpl_short = 44;
            if (::absl::bit_cast<::uint64_t>(this_._internal_rpl_short()) != 0) {
              total_size += 10;
            }
            // int32 block_id = 10;
            if (this_._internal_block_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_block_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void LogEntry::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<LogEntry*>(&to_msg);
  auto& from = static_cast<const LogEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.LogEntry)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  if (!from._internal_timestamp().empty()) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (!from._internal_algo().empty()) {
    _this->_internal_set_algo(from._internal_algo());
  }
  if (!from._internal_timeframe().empty()) {
    _this->_internal_set_timeframe(from._internal_timeframe());
  }
  if (!from._internal_block_name().empty()) {
    _this->_internal_set_block_name(from._internal_block_name());
  }
  if (!from._internal_indicator_param().empty()) {
    _this->_internal_set_indicator_param(from._internal_indicator_param());
  }
  if (!from._internal_vars().empty()) {
    _this->_internal_set_vars(from._internal_vars());
  }
  if (!from._internal_side().empty()) {
    _this->_internal_set_side(from._internal_side());
  }
  if (!from._internal_order_type_long().empty()) {
    _this->_internal_set_order_type_long(from._internal_order_type_long());
  }
  if (!from._internal_order_type_short().empty()) {
    _this->_internal_set_order_type_short(from._internal_order_type_short());
  }
  if (!from._internal_user().empty()) {
    _this->_internal_set_user(from._internal_user());
  }
  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (!from._internal_mode_time().empty()) {
    _this->_internal_set_mode_time(from._internal_mode_time());
  }
  if (!from._internal_coin().empty()) {
    _this->_internal_set_coin(from._internal_coin());
  }
  if (!from._internal_coin_second().empty()) {
    _this->_internal_set_coin_second(from._internal_coin_second());
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_close()) != 0) {
    _this->_impl_.close_ = from._impl_.close_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_balance()) != 0) {
    _this->_impl_.balance_ = from._impl_.balance_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_equity()) != 0) {
    _this->_impl_.equity_ = from._impl_.equity_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_money()) != 0) {
    _this->_impl_.money_ = from._impl_.money_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_order_leverage_long()) != 0) {
    _this->_impl_.order_leverage_long_ = from._impl_.order_leverage_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_leverage_long()) != 0) {
    _this->_impl_.leverage_long_ = from._impl_.leverage_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_order_size_long()) != 0) {
    _this->_impl_.order_size_long_ = from._impl_.order_size_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_order_price_long()) != 0) {
    _this->_impl_.order_price_long_ = from._impl_.order_price_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_order_usd_long()) != 0) {
    _this->_impl_.order_usd_long_ = from._impl_.order_usd_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_position_size_long()) != 0) {
    _this->_impl_.position_size_long_ = from._impl_.position_size_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_position_price_long()) != 0) {
    _this->_impl_.position_price_long_ = from._impl_.position_price_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_position_usd_long()) != 0) {
    _this->_impl_.position_usd_long_ = from._impl_.position_usd_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_pnl_long()) != 0) {
    _this->_impl_.pnl_long_ = from._impl_.pnl_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_fee_long()) != 0) {
    _this->_impl_.fee_long_ = from._impl_.fee_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_funding_long()) != 0) {
    _this->_impl_.funding_long_ = from._impl_.funding_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_rpl_long()) != 0) {
    _this->_impl_.rpl_long_ = from._impl_.rpl_long_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_order_leverage_short()) != 0) {
    _this->_impl_.order_leverage_short_ = from._impl_.order_leverage_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_leverage_short()) != 0) {
    _this->_impl_.leverage_short_ = from._impl_.leverage_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_order_size_short()) != 0) {
    _this->_impl_.order_size_short_ = from._impl_.order_size_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_order_price_short()) != 0) {
    _this->_impl_.order_price_short_ = from._impl_.order_price_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_order_usd_short()) != 0) {
    _this->_impl_.order_usd_short_ = from._impl_.order_usd_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_position_usd_short()) != 0) {
    _this->_impl_.position_usd_short_ = from._impl_.position_usd_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_position_size_short()) != 0) {
    _this->_impl_.position_size_short_ = from._impl_.position_size_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_position_price_short()) != 0) {
    _this->_impl_.position_price_short_ = from._impl_.position_price_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_pnl_short()) != 0) {
    _this->_impl_.pnl_short_ = from._impl_.pnl_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_fee_short()) != 0) {
    _this->_impl_.fee_short_ = from._impl_.fee_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_funding_short()) != 0) {
    _this->_impl_.funding_short_ = from._impl_.funding_short_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_rpl_short()) != 0) {
    _this->_impl_.rpl_short_ = from._impl_.rpl_short_;
  }
  if (from._internal_block_id() != 0) {
    _this->_impl_.block_id_ = from._impl_.block_id_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void LogEntry::InternalSwap(LogEntry* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.time_, &other->_impl_.time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timestamp_, &other->_impl_.timestamp_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.algo_, &other->_impl_.algo_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.timeframe_, &other->_impl_.timeframe_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.block_name_, &other->_impl_.block_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.indicator_param_, &other->_impl_.indicator_param_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.vars_, &other->_impl_.vars_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.side_, &other->_impl_.side_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_type_long_, &other->_impl_.order_type_long_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.order_type_short_, &other->_impl_.order_type_short_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_, &other->_impl_.user_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mode_, &other->_impl_.mode_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.mode_time_, &other->_impl_.mode_time_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coin_, &other->_impl_.coin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.coin_second_, &other->_impl_.coin_second_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.block_id_)
      + sizeof(LogEntry::_impl_.block_id_)
      - PROTOBUF_FIELD_OFFSET(LogEntry, _impl_.close_)>(
          reinterpret_cast<char*>(&_impl_.close_),
          reinterpret_cast<char*>(&other->_impl_.close_));
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetLogsResponse::_Internal {
 public:
};

GetLogsResponse::GetLogsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:chart_api.GetLogsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetLogsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::chart_api::GetLogsResponse& from_msg)
      : logs_{visibility, arena, from.logs_},
        _cached_size_{0} {}

GetLogsResponse::GetLogsResponse(
    ::google::protobuf::Arena* arena,
    const GetLogsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetLogsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:chart_api.GetLogsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetLogsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : logs_{visibility, arena},
        _cached_size_{0} {}

inline void GetLogsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetLogsResponse::~GetLogsResponse() {
  // @@protoc_insertion_point(destructor:chart_api.GetLogsResponse)
  SharedDtor(*this);
}
inline void GetLogsResponse::SharedDtor(MessageLite& self) {
  GetLogsResponse& this_ = static_cast<GetLogsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetLogsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetLogsResponse(arena);
}
constexpr auto GetLogsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetLogsResponse, _impl_.logs_) +
          decltype(GetLogsResponse::_impl_.logs_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetLogsResponse), alignof(GetLogsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetLogsResponse::PlacementNew_,
                                 sizeof(GetLogsResponse),
                                 alignof(GetLogsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetLogsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetLogsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetLogsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetLogsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetLogsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetLogsResponse>(), &GetLogsResponse::ByteSizeLong,
            &GetLogsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetLogsResponse, _impl_._cached_size_),
        false,
    },
    &GetLogsResponse::kDescriptorMethods,
    &descriptor_table_chart_5fapi_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetLogsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetLogsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::chart_api::GetLogsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .chart_api.LogEntry logs = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetLogsResponse, _impl_.logs_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .chart_api.LogEntry logs = 1;
    {PROTOBUF_FIELD_OFFSET(GetLogsResponse, _impl_.logs_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::chart_api::LogEntry>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetLogsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_api.GetLogsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.logs_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetLogsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetLogsResponse& this_ = static_cast<const GetLogsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetLogsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetLogsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:chart_api.GetLogsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .chart_api.LogEntry logs = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_logs_size());
               i < n; i++) {
            const auto& repfield = this_._internal_logs().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:chart_api.GetLogsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetLogsResponse::ByteSizeLong(const MessageLite& base) {
          const GetLogsResponse& this_ = static_cast<const GetLogsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetLogsResponse::ByteSizeLong() const {
          const GetLogsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:chart_api.GetLogsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .chart_api.LogEntry logs = 1;
            {
              total_size += 1UL * this_._internal_logs_size();
              for (const auto& msg : this_._internal_logs()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetLogsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetLogsResponse*>(&to_msg);
  auto& from = static_cast<const GetLogsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:chart_api.GetLogsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_logs()->MergeFrom(
      from._internal_logs());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetLogsResponse::CopyFrom(const GetLogsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_api.GetLogsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetLogsResponse::InternalSwap(GetLogsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.logs_.InternalSwap(&other->_impl_.logs_);
}

::google::protobuf::Metadata GetLogsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace chart_api
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_chart_5fapi_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
