// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: chart_api.proto
#ifndef GRPC_chart_5fapi_2eproto__INCLUDED
#define GRPC_chart_5fapi_2eproto__INCLUDED

#include "chart_api.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace chart_api {

class ChartAPI final {
 public:
  static constexpr char const* service_full_name() {
    return "chart_api.ChartAPI";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::chart_api::GetAlgosResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetAlgosResponse>> AsyncGetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetAlgosResponse>>(AsyncGetAlgosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetAlgosResponse>> PrepareAsyncGetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetAlgosResponse>>(PrepareAsyncGetAlgosRaw(context, request, cq));
    }
    virtual ::grpc::Status GetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::chart_api::GetStreamsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetStreamsResponse>> AsyncGetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetStreamsResponse>>(AsyncGetStreamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetStreamsResponse>> PrepareAsyncGetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetStreamsResponse>>(PrepareAsyncGetStreamsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::chart_api::GetDataResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetDataResponse>> AsyncGetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetDataResponse>>(AsyncGetDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetDataResponse>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetDataResponse>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::chart_api::GetLogsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetLogsResponse>> AsyncGetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetLogsResponse>>(AsyncGetLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetLogsResponse>> PrepareAsyncGetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetLogsResponse>>(PrepareAsyncGetLogsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::chart_api::GetUsersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetUsersResponse>> AsyncGetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetUsersResponse>>(AsyncGetUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetUsersResponse>> PrepareAsyncGetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetUsersResponse>>(PrepareAsyncGetUsersRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest* request, ::chart_api::GetAlgosResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest* request, ::chart_api::GetAlgosResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest* request, ::chart_api::GetStreamsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest* request, ::chart_api::GetStreamsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest* request, ::chart_api::GetDataResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest* request, ::chart_api::GetDataResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest* request, ::chart_api::GetLogsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest* request, ::chart_api::GetLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest* request, ::chart_api::GetUsersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest* request, ::chart_api::GetUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetAlgosResponse>* AsyncGetAlgosRaw(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetAlgosResponse>* PrepareAsyncGetAlgosRaw(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetStreamsResponse>* AsyncGetStreamsRaw(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetStreamsResponse>* PrepareAsyncGetStreamsRaw(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetDataResponse>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetDataResponse>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetLogsResponse>* AsyncGetLogsRaw(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetLogsResponse>* PrepareAsyncGetLogsRaw(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetUsersResponse>* AsyncGetUsersRaw(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::chart_api::GetUsersResponse>* PrepareAsyncGetUsersRaw(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::chart_api::GetAlgosResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetAlgosResponse>> AsyncGetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetAlgosResponse>>(AsyncGetAlgosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetAlgosResponse>> PrepareAsyncGetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetAlgosResponse>>(PrepareAsyncGetAlgosRaw(context, request, cq));
    }
    ::grpc::Status GetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::chart_api::GetStreamsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetStreamsResponse>> AsyncGetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetStreamsResponse>>(AsyncGetStreamsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetStreamsResponse>> PrepareAsyncGetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetStreamsResponse>>(PrepareAsyncGetStreamsRaw(context, request, cq));
    }
    ::grpc::Status GetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::chart_api::GetDataResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetDataResponse>> AsyncGetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetDataResponse>>(AsyncGetDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetDataResponse>> PrepareAsyncGetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetDataResponse>>(PrepareAsyncGetDataRaw(context, request, cq));
    }
    ::grpc::Status GetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::chart_api::GetLogsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetLogsResponse>> AsyncGetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetLogsResponse>>(AsyncGetLogsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetLogsResponse>> PrepareAsyncGetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetLogsResponse>>(PrepareAsyncGetLogsRaw(context, request, cq));
    }
    ::grpc::Status GetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::chart_api::GetUsersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetUsersResponse>> AsyncGetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetUsersResponse>>(AsyncGetUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetUsersResponse>> PrepareAsyncGetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::chart_api::GetUsersResponse>>(PrepareAsyncGetUsersRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest* request, ::chart_api::GetAlgosResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAlgos(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest* request, ::chart_api::GetAlgosResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest* request, ::chart_api::GetStreamsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStreams(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest* request, ::chart_api::GetStreamsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest* request, ::chart_api::GetDataResponse* response, std::function<void(::grpc::Status)>) override;
      void GetData(::grpc::ClientContext* context, const ::chart_api::GetDataRequest* request, ::chart_api::GetDataResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest* request, ::chart_api::GetLogsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLogs(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest* request, ::chart_api::GetLogsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest* request, ::chart_api::GetUsersResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUsers(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest* request, ::chart_api::GetUsersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetAlgosResponse>* AsyncGetAlgosRaw(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetAlgosResponse>* PrepareAsyncGetAlgosRaw(::grpc::ClientContext* context, const ::chart_api::GetAlgosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetStreamsResponse>* AsyncGetStreamsRaw(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetStreamsResponse>* PrepareAsyncGetStreamsRaw(::grpc::ClientContext* context, const ::chart_api::GetStreamsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetDataResponse>* AsyncGetDataRaw(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetDataResponse>* PrepareAsyncGetDataRaw(::grpc::ClientContext* context, const ::chart_api::GetDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetLogsResponse>* AsyncGetLogsRaw(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetLogsResponse>* PrepareAsyncGetLogsRaw(::grpc::ClientContext* context, const ::chart_api::GetLogsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetUsersResponse>* AsyncGetUsersRaw(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::chart_api::GetUsersResponse>* PrepareAsyncGetUsersRaw(::grpc::ClientContext* context, const ::chart_api::GetUsersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetAlgos_;
    const ::grpc::internal::RpcMethod rpcmethod_GetStreams_;
    const ::grpc::internal::RpcMethod rpcmethod_GetData_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLogs_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUsers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetAlgos(::grpc::ServerContext* context, const ::chart_api::GetAlgosRequest* request, ::chart_api::GetAlgosResponse* response);
    virtual ::grpc::Status GetStreams(::grpc::ServerContext* context, const ::chart_api::GetStreamsRequest* request, ::chart_api::GetStreamsResponse* response);
    virtual ::grpc::Status GetData(::grpc::ServerContext* context, const ::chart_api::GetDataRequest* request, ::chart_api::GetDataResponse* response);
    virtual ::grpc::Status GetLogs(::grpc::ServerContext* context, const ::chart_api::GetLogsRequest* request, ::chart_api::GetLogsResponse* response);
    virtual ::grpc::Status GetUsers(::grpc::ServerContext* context, const ::chart_api::GetUsersRequest* request, ::chart_api::GetUsersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAlgos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAlgos() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetAlgos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgos(::grpc::ServerContext* /*context*/, const ::chart_api::GetAlgosRequest* /*request*/, ::chart_api::GetAlgosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlgos(::grpc::ServerContext* context, ::chart_api::GetAlgosRequest* request, ::grpc::ServerAsyncResponseWriter< ::chart_api::GetAlgosResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStreams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStreams() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetStreams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreams(::grpc::ServerContext* /*context*/, const ::chart_api::GetStreamsRequest* /*request*/, ::chart_api::GetStreamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStreams(::grpc::ServerContext* context, ::chart_api::GetStreamsRequest* request, ::grpc::ServerAsyncResponseWriter< ::chart_api::GetStreamsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetData() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::chart_api::GetDataRequest* /*request*/, ::chart_api::GetDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::chart_api::GetDataRequest* request, ::grpc::ServerAsyncResponseWriter< ::chart_api::GetDataResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLogs() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogs(::grpc::ServerContext* /*context*/, const ::chart_api::GetLogsRequest* /*request*/, ::chart_api::GetLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLogs(::grpc::ServerContext* context, ::chart_api::GetLogsRequest* request, ::grpc::ServerAsyncResponseWriter< ::chart_api::GetLogsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUsers() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, const ::chart_api::GetUsersRequest* /*request*/, ::chart_api::GetUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsers(::grpc::ServerContext* context, ::chart_api::GetUsersRequest* request, ::grpc::ServerAsyncResponseWriter< ::chart_api::GetUsersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetAlgos<WithAsyncMethod_GetStreams<WithAsyncMethod_GetData<WithAsyncMethod_GetLogs<WithAsyncMethod_GetUsers<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetAlgos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAlgos() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::chart_api::GetAlgosRequest, ::chart_api::GetAlgosResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chart_api::GetAlgosRequest* request, ::chart_api::GetAlgosResponse* response) { return this->GetAlgos(context, request, response); }));}
    void SetMessageAllocatorFor_GetAlgos(
        ::grpc::MessageAllocator< ::chart_api::GetAlgosRequest, ::chart_api::GetAlgosResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chart_api::GetAlgosRequest, ::chart_api::GetAlgosResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAlgos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgos(::grpc::ServerContext* /*context*/, const ::chart_api::GetAlgosRequest* /*request*/, ::chart_api::GetAlgosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAlgos(
      ::grpc::CallbackServerContext* /*context*/, const ::chart_api::GetAlgosRequest* /*request*/, ::chart_api::GetAlgosResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetStreams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStreams() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::chart_api::GetStreamsRequest, ::chart_api::GetStreamsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chart_api::GetStreamsRequest* request, ::chart_api::GetStreamsResponse* response) { return this->GetStreams(context, request, response); }));}
    void SetMessageAllocatorFor_GetStreams(
        ::grpc::MessageAllocator< ::chart_api::GetStreamsRequest, ::chart_api::GetStreamsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chart_api::GetStreamsRequest, ::chart_api::GetStreamsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStreams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreams(::grpc::ServerContext* /*context*/, const ::chart_api::GetStreamsRequest* /*request*/, ::chart_api::GetStreamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStreams(
      ::grpc::CallbackServerContext* /*context*/, const ::chart_api::GetStreamsRequest* /*request*/, ::chart_api::GetStreamsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetData() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::chart_api::GetDataRequest, ::chart_api::GetDataResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chart_api::GetDataRequest* request, ::chart_api::GetDataResponse* response) { return this->GetData(context, request, response); }));}
    void SetMessageAllocatorFor_GetData(
        ::grpc::MessageAllocator< ::chart_api::GetDataRequest, ::chart_api::GetDataResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chart_api::GetDataRequest, ::chart_api::GetDataResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::chart_api::GetDataRequest* /*request*/, ::chart_api::GetDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetData(
      ::grpc::CallbackServerContext* /*context*/, const ::chart_api::GetDataRequest* /*request*/, ::chart_api::GetDataResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLogs() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::chart_api::GetLogsRequest, ::chart_api::GetLogsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chart_api::GetLogsRequest* request, ::chart_api::GetLogsResponse* response) { return this->GetLogs(context, request, response); }));}
    void SetMessageAllocatorFor_GetLogs(
        ::grpc::MessageAllocator< ::chart_api::GetLogsRequest, ::chart_api::GetLogsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chart_api::GetLogsRequest, ::chart_api::GetLogsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogs(::grpc::ServerContext* /*context*/, const ::chart_api::GetLogsRequest* /*request*/, ::chart_api::GetLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::chart_api::GetLogsRequest* /*request*/, ::chart_api::GetLogsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUsers() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::chart_api::GetUsersRequest, ::chart_api::GetUsersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::chart_api::GetUsersRequest* request, ::chart_api::GetUsersResponse* response) { return this->GetUsers(context, request, response); }));}
    void SetMessageAllocatorFor_GetUsers(
        ::grpc::MessageAllocator< ::chart_api::GetUsersRequest, ::chart_api::GetUsersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::chart_api::GetUsersRequest, ::chart_api::GetUsersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, const ::chart_api::GetUsersRequest* /*request*/, ::chart_api::GetUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::chart_api::GetUsersRequest* /*request*/, ::chart_api::GetUsersResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetAlgos<WithCallbackMethod_GetStreams<WithCallbackMethod_GetData<WithCallbackMethod_GetLogs<WithCallbackMethod_GetUsers<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetAlgos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAlgos() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetAlgos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgos(::grpc::ServerContext* /*context*/, const ::chart_api::GetAlgosRequest* /*request*/, ::chart_api::GetAlgosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetStreams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStreams() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetStreams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreams(::grpc::ServerContext* /*context*/, const ::chart_api::GetStreamsRequest* /*request*/, ::chart_api::GetStreamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetData() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::chart_api::GetDataRequest* /*request*/, ::chart_api::GetDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLogs() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogs(::grpc::ServerContext* /*context*/, const ::chart_api::GetLogsRequest* /*request*/, ::chart_api::GetLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUsers() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, const ::chart_api::GetUsersRequest* /*request*/, ::chart_api::GetUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAlgos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAlgos() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetAlgos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgos(::grpc::ServerContext* /*context*/, const ::chart_api::GetAlgosRequest* /*request*/, ::chart_api::GetAlgosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAlgos(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStreams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStreams() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetStreams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreams(::grpc::ServerContext* /*context*/, const ::chart_api::GetStreamsRequest* /*request*/, ::chart_api::GetStreamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStreams(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetData() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::chart_api::GetDataRequest* /*request*/, ::chart_api::GetDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLogs() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogs(::grpc::ServerContext* /*context*/, const ::chart_api::GetLogsRequest* /*request*/, ::chart_api::GetLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLogs(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUsers() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, const ::chart_api::GetUsersRequest* /*request*/, ::chart_api::GetUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUsers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAlgos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAlgos() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAlgos(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAlgos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAlgos(::grpc::ServerContext* /*context*/, const ::chart_api::GetAlgosRequest* /*request*/, ::chart_api::GetAlgosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAlgos(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStreams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStreams() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStreams(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStreams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStreams(::grpc::ServerContext* /*context*/, const ::chart_api::GetStreamsRequest* /*request*/, ::chart_api::GetStreamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStreams(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetData() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetData(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::chart_api::GetDataRequest* /*request*/, ::chart_api::GetDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetData(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLogs() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLogs(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogs(::grpc::ServerContext* /*context*/, const ::chart_api::GetLogsRequest* /*request*/, ::chart_api::GetLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLogs(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUsers() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUsers(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, const ::chart_api::GetUsersRequest* /*request*/, ::chart_api::GetUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUsers(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAlgos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAlgos() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chart_api::GetAlgosRequest, ::chart_api::GetAlgosResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chart_api::GetAlgosRequest, ::chart_api::GetAlgosResponse>* streamer) {
                       return this->StreamedGetAlgos(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAlgos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAlgos(::grpc::ServerContext* /*context*/, const ::chart_api::GetAlgosRequest* /*request*/, ::chart_api::GetAlgosResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAlgos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chart_api::GetAlgosRequest,::chart_api::GetAlgosResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStreams : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStreams() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chart_api::GetStreamsRequest, ::chart_api::GetStreamsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chart_api::GetStreamsRequest, ::chart_api::GetStreamsResponse>* streamer) {
                       return this->StreamedGetStreams(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStreams() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStreams(::grpc::ServerContext* /*context*/, const ::chart_api::GetStreamsRequest* /*request*/, ::chart_api::GetStreamsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStreams(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chart_api::GetStreamsRequest,::chart_api::GetStreamsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetData() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chart_api::GetDataRequest, ::chart_api::GetDataResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chart_api::GetDataRequest, ::chart_api::GetDataResponse>* streamer) {
                       return this->StreamedGetData(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetData(::grpc::ServerContext* /*context*/, const ::chart_api::GetDataRequest* /*request*/, ::chart_api::GetDataResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetData(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chart_api::GetDataRequest,::chart_api::GetDataResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLogs : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLogs() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chart_api::GetLogsRequest, ::chart_api::GetLogsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chart_api::GetLogsRequest, ::chart_api::GetLogsResponse>* streamer) {
                       return this->StreamedGetLogs(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLogs() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLogs(::grpc::ServerContext* /*context*/, const ::chart_api::GetLogsRequest* /*request*/, ::chart_api::GetLogsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLogs(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chart_api::GetLogsRequest,::chart_api::GetLogsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUsers() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::chart_api::GetUsersRequest, ::chart_api::GetUsersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::chart_api::GetUsersRequest, ::chart_api::GetUsersResponse>* streamer) {
                       return this->StreamedGetUsers(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUsers(::grpc::ServerContext* /*context*/, const ::chart_api::GetUsersRequest* /*request*/, ::chart_api::GetUsersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::chart_api::GetUsersRequest,::chart_api::GetUsersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAlgos<WithStreamedUnaryMethod_GetStreams<WithStreamedUnaryMethod_GetData<WithStreamedUnaryMethod_GetLogs<WithStreamedUnaryMethod_GetUsers<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetAlgos<WithStreamedUnaryMethod_GetStreams<WithStreamedUnaryMethod_GetData<WithStreamedUnaryMethod_GetLogs<WithStreamedUnaryMethod_GetUsers<Service > > > > > StreamedService;
};

}  // namespace chart_api


#endif  // GRPC_chart_5fapi_2eproto__INCLUDED
